# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:119
#: en/content/news/2014/08/06/transducers-are-coming.adoc:121
#: en/content/news/2016/05/23/introducing-clojure-spec.adoc:30
#: en/content/news/2012/05/08/reducers.adoc:172
#: en/content/news/2012/05/15/anatomy-of-reducer.adoc:198
msgid "Rich"
msgstr ""

#. type: Title =
#: en/content/news/2014/08/06/transducers-are-coming.adoc:1
#, no-wrap
msgid "Transducers are Coming"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:4
msgid "Rich Hickey 2014-08-06"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:9
msgid ""
"Transducers are a powerful and composable way to build algorithmic "
"transformations that you can reuse in many contexts, and they're coming to "
"Clojure core and core.async."
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:11
msgid ""
"Two years ago, in a https://clojure.org/news/2012/05/15/anatomy-of-"
"reducer[blog post describing how reducers work], I described the reducing "
"function transformers on which they were based, and provided explicit "
"examples like `mapping`, `filtering` and `mapcatting`. Because the reducers "
"library intends to deliver an API with the same 'shape' as existing sequence "
"function APIs, these transformers were never exposed a la carte, instead "
"being encapsulated by the macrology of reducers."
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:13
msgid ""
"In working recently on providing algorithmic combinators for core.async, I "
"became more and more convinced of the superiority of reducing function "
"transformers over channel->channel functions for algorithmic transformation. "
"In fact, I think they are a better way to do many things for which we "
"normally create bespoke replicas of map, filter etc."
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:15
msgid ""
"So, reducing function transformers are getting a name - *transducers*, and "
"first-class support in Clojure core and core.async."
msgstr ""

#. type: Title ==
#: en/content/news/2014/08/06/transducers-are-coming.adoc:16
#, no-wrap
msgid "What's a Transducer?"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:19
msgid "To recap that earlier post:"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:21
msgid ""
"A reducing function is just the kind of function you'd pass to `reduce` - it "
"takes a result so far and a new input and returns the next result-so-far. In "
"the context of transducers it's best to think about this most generally:"
msgstr ""

#. type: delimited block -
#: en/content/news/2014/08/06/transducers-are-coming.adoc:26
#, no-wrap
msgid ""
";;reducing function signature\n"
"whatever, input -> whatever\n"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:29
msgid ""
"and a transducer is a function that takes one reducing function and returns "
"another:"
msgstr ""

#. type: delimited block -
#: en/content/news/2014/08/06/transducers-are-coming.adoc:34
#, no-wrap
msgid ""
";;transducer signature\n"
"(whatever, input -> whatever) -> (whatever, input -> whatever)\n"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:37
msgid ""
"The primary power of transducers comes from their fundamental decoupling - "
"they don't care (or know about):"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:39
msgid "the 'job' being done (what the reducing function does)"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:40
msgid "the context of use (what 'whatever' is)"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:41
msgid "the source of inputs (where input comes from)."
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:43
msgid ""
"The other source of power comes from the fact that transducers compose using "
"ordinary function composition."
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:45
msgid ""
"The reducers library leverages transducers' decoupling from the job, the "
"representation, and the source of inputs to accomplish parallel reduction. "
"But transducers can also be used for:"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:47
msgid "a la carte laziness"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:48
msgid "transformations during collection building"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:49
msgid "collection/iteration/laziness-free transforming reductions"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:50
msgid "channel transformations, event notifications and more."
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:52
msgid "All of this is coming to Clojure core and core.async."
msgstr ""

#. type: Title ==
#: en/content/news/2014/08/06/transducers-are-coming.adoc:53
#, no-wrap
msgid "New stuff"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:56
msgid ""
"Concretely, most of the core sequence functions are gaining a new arity, one "
"shorter than their current shortest, which elides the final collection "
"source argument. This arity will return a transducer that represents the "
"same logic, independent of lazy sequence processing."
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:58
msgid "Thus:"
msgstr ""

#. type: delimited block -
#: en/content/news/2014/08/06/transducers-are-coming.adoc:63
#, no-wrap
msgid ""
";;look Ma, no collection!\n"
"(map f)\n"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:66
msgid "returns a 'mapping' transducer. filter et al get similar support."
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:68
msgid ""
"You can build a 'stack' of transducers using ordinary function composition "
"(comp):"
msgstr ""

#. type: delimited block -
#: en/content/news/2014/08/06/transducers-are-coming.adoc:72
#, no-wrap
msgid "(def xform (comp (map inc) (filter even?)))\n"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:75
msgid ""
"You might notice the similarity between the above comp and a call to ->>:"
msgstr ""

#. type: delimited block -
#: en/content/news/2014/08/06/transducers-are-coming.adoc:79
#, no-wrap
msgid "(->> aseq (map inc) (filter even?))\n"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:82
msgid ""
"One way to think of transducers is like ->> but independent of the job (lazy "
"sequence creation) and the source of inputs (aseq)."
msgstr ""

#. type: Title ==
#: en/content/news/2014/08/06/transducers-are-coming.adoc:83
#, no-wrap
msgid "Transducers in action"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:86
msgid ""
"Once you've got a transducer, what can you do with it? _**An open set of "
"things.**_"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:88
msgid ""
"For instance, given the above transducer and some data in a vector, you can:"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:90
msgid ""
"lazily transform the data (one lazy sequence, not three as with composed "
"sequence functions) +"
msgstr ""

#. type: delimited block -
#: en/content/news/2014/08/06/transducers-are-coming.adoc:93
#, no-wrap
msgid "(sequence xform data)\n"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:95
msgid "reduce with a transformation (no laziness, just a loop) +"
msgstr ""

#. type: delimited block -
#: en/content/news/2014/08/06/transducers-are-coming.adoc:98
#, no-wrap
msgid "(transduce xform + 0 data)\n"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:100
msgid ""
"build one collection from a transformation of another, again no laziness +"
msgstr ""

#. type: delimited block -
#: en/content/news/2014/08/06/transducers-are-coming.adoc:103
#, no-wrap
msgid "(into [] xform data)\n"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:105
msgid ""
"create a recipe for a transformation, which can be subsequently sequenced, "
"iterated or reduced +"
msgstr ""

#. type: delimited block -
#: en/content/news/2014/08/06/transducers-are-coming.adoc:108
#, no-wrap
msgid "(iteration xform data)\n"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:110
msgid ""
"or use the same transducer to transform everything that goes through a "
"channel +"
msgstr ""

#. type: delimited block -
#: en/content/news/2014/08/06/transducers-are-coming.adoc:113
#, no-wrap
msgid "(chan 1 xform)\n"
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:116
msgid ""
"The latter demonstrates the corresponding new capability of core.async "
"channels - they can take transducers."
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:118
msgid ""
"This post is just to serve as a heads up on what the ongoing work is about. "
"There will be more explanations, tutorials and derivations to follow, here "
"and elsewhere."
msgstr ""

#. type: Plain text
#: en/content/news/2014/08/06/transducers-are-coming.adoc:120
msgid ""
"I'm excited about transducers and the power they bring, and I hope you are "
"too!"
msgstr ""
