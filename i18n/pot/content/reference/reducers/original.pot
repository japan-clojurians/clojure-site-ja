# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/content/reference/metadata.adoc:4 en/content/reference/protocols.adoc:4
#: en/content/reference/sequences.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/reference/libs.adoc:4
#: en/content/reference/transients.adoc:4
#: en/content/reference/compilation.adoc:4
#: en/content/reference/other_libraries.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/macros.adoc:4
#: en/content/reference/transducers.adoc:4 en/content/reference/refs.adoc:4
#: en/content/reference/lazy.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/evaluation.adoc:4
#: en/content/reference/other_functions.adoc:4
#: en/content/reference/reducers.adoc:4
#: en/content/reference/data_structures.adoc:4
#: en/content/reference/atoms.adoc:4 en/content/reference/repl_and_main.adoc:4
#: en/content/reference/agents.adoc:4 en/content/reference/datatypes.adoc:4
#: en/content/community/libraries.adoc:4 en/content/community/license.adoc:4
#: en/content/community/downloads_older.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/swag.adoc:4
#: en/content/404.adoc:4 en/content/privacy.adoc:4 en/content/search.adoc:4
#: en/content/about/spec.adoc:4 en/content/about/concurrent_programming.adoc:4
#: en/content/about/lisp.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/about/dynamic.adoc:4
#: en/content/about/features.adoc:4 en/content/about/rationale.adoc:4
#: en/content/about/state.adoc:4 en/content/about/clojurescript.adoc:4
#: en/content/about/functional_programming.adoc:4
#: en/content/about/clojureclr.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr ""

#. type: Title =
#: en/content/reference/reducers.adoc:1
#, no-wrap
msgid "Reducers"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:17
msgid ""
"Reducers provide an alternative approach to using <<sequences#,sequences>> "
"to manipulate standard Clojure collections. Sequence functions are typically "
"applied lazily, in order, create intermediate results, and in a single "
"thread. However, many sequence functions (like map and filter) could "
"conceptually be applied in parallel, yielding code that will get faster "
"automatically as machines get more cores. For more details on the rationale "
"for reducers, see the original http://clojure.com/blog/2012/05/08/reducers-a-"
"library-and-model-for-collection-processing.html[blog] http://clojure.com/"
"blog/2012/05/15/anatomy-of-reducer.html[posts]."
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:19
msgid ""
"A _reducer_ is the combination of a _reducible collection_ (a collection "
"that knows how to reduce itself) with a _reducing function_ (the \"recipe\" "
"for what needs to be done during the reduction). The standard sequence "
"operations are replaced with new versions that do not perform the operation "
"but merely transform the reducing function. Execution of the operations is "
"deferred until the final reduction is performed. This removes the "
"intermediate results and lazy evaluation seen with sequences."
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:21
msgid ""
"Additionally, some collections (persistent vectors and maps) are _foldable_. "
"The _fold_ operation on a reducer executes the reduction in parallel by:"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:23
msgid ""
"Partitioning the reducible collection at a specified granularity (default = "
"512 elements)"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:24
msgid "Applying reduce to each partition"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:25
msgid ""
"Recursively combining each partition using Java's http://gee.cs.oswego.edu/"
"dl/papers/fj.pdf[fork/join] framework."
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:27
msgid ""
"If a collection does not support folding, it will fall back to non-parallel "
"reduce instead."
msgstr ""

#. type: Title ==
#: en/content/reference/reducers.adoc:28
#, no-wrap
msgid "reduce and fold"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:31
msgid ""
"The *clojure.core.reducers* namespace (aliased here as *r*) provides an "
"alternate https://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core.reducers/reduce[r/reduce] function."
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:35
#, no-wrap
msgid ""
"*(r/reduce f coll)*\n"
"*(r/reduce f init coll)*\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:37
msgid "The reducers version differs in that:"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:39
msgid "Map colls are reduced with reduce-kv"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:40
msgid ""
"When init is not provided, f is invoked with no arguments to produce an "
"identity value"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:41
msgid "_Note: f may be invoked multiple times to provide the identity value_"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:43
msgid ""
"In general most users will not call r/reduce directly and instead should "
"prefer https://clojure.github.io/clojure/clojure.core-api.html#clojure.core."
"reducers/fold[r/fold], which implements parallel reduce and combine. "
"However, it may be useful to execute an eager reduce with fewer intermediate "
"results."
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:48
#, no-wrap
msgid ""
"*(r/fold reducef coll)*\n"
"*(r/fold combinef reducef coll)*\n"
"*(r/fold n combinef reducef coll)**\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:50
msgid ""
"r/fold takes a reducible collection and partitions it into groups of "
"approximately n (default 512) elements. Each group is reduced using the "
"reducef function. The reducef function will be called with no arguments to "
"produce an identity value _in each partition_. The results of those "
"reductions are then reduced with the combinef (defaults to reducef) "
"function. When called with no arguments, (combinef) must produce its "
"identity element - this will be called multiple times. Operations may be "
"performed in parallel. Results will preserve order."
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:52
msgid ""
"The following functions (analagous to the sequence versions) create reducers "
"from a reducible or foldable collection: https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core.reducers/map[r/map] https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core.reducers/mapcat[r/"
"mapcat] https://clojure.github.io/clojure/clojure.core-api.html#clojure.core."
"reducers/filter[r/filter] https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core.reducers/remove[r/remove] https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core.reducers/flatten[r/flatten] "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core."
"reducers/take-while[r/take-while] https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core.reducers/take[r/take] and https://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core.reducers/drop[r/drop]. None of "
"these functions actually transforms the source collection. To produce an "
"accumulated result, you must use r/reduce or r/fold. To produce an output "
"collection, use https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/into[clojure.core/into] to choose the collection type or "
"the provided https://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core.reducers/foldcat[r/foldcat] to produce a collection that is reducible, "
"foldable, seqable, and counted."
msgstr ""

#. type: Title ==
#: en/content/reference/reducers.adoc:53
#, no-wrap
msgid "Using Reducers"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:56
msgid "Use fold to sum with +:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reducers.adoc:61
#, no-wrap
msgid ""
"(require '[clojure.core.reducers :as r])\n"
"(r/fold + (r/filter even? (r/map inc [1 1 1 2])))\n"
";=> 6\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:63
msgid ""
"Use https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"into[into] to produce a final collection:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reducers.adoc:66
#, no-wrap
msgid "(into [] (r/filter even? (r/map inc (range 100000))))\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:68
msgid ""
"Or https://clojure.github.io/clojure/clojure.core-api.html#clojure.core."
"reducers/foldcat[r/foldcat]:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reducers.adoc:71
#, no-wrap
msgid "(r/foldcat (r/filter even? (r/map inc (range 100000))))\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:73
msgid "Specify a reduce function and a combine function with fold:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reducers.adoc:79
#, no-wrap
msgid ""
"(defn count-words\n"
"  ([] {})\n"
"  ([freqs word]\n"
"    (assoc freqs word (inc (get freqs word 0)))))\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/reducers.adoc:83
#, no-wrap
msgid ""
"(defn merge-counts\n"
"  ([] {})\n"
"  ([& m] (apply merge-with + m)))\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/reducers.adoc:86
#, no-wrap
msgid ""
"(defn word-frequency [text]\n"
"  (r/fold merge-counts count-words (clojure.string/split text #\"\\s+\")))\n"
msgstr ""

#. type: Title ==
#: en/content/reference/reducers.adoc:88
#, no-wrap
msgid "When to use"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:91
msgid "Use the reducer form of these operations for:"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:93
msgid "Efficient eager application of a multi-step transformation"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:94
msgid "Avoiding the dangling I/O resource issues (as seen with lazy seqs)"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:96
msgid "Use `fold` when:"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:98
msgid "Source data can be generated and held in memory"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:99
msgid "Work to be performed is computation (not I/O or blocking)"
msgstr ""

#. type: Plain text
#: en/content/reference/reducers.adoc:99
msgid "Number of data items or work to be done is \"large\""
msgstr ""
