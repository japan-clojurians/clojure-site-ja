# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ===
#: en/content/reference/data_structures.adoc:111
#: en/content/reference/reader.adoc:24
#, no-wrap
msgid "Symbols"
msgstr ""

#. type: Title ==
#: en/content/reference/data_structures.adoc:235
#: en/content/reference/reader.adoc:101
#: en/content/guides/learn/hashed_colls.adoc:19
#, no-wrap
msgid "Sets"
msgstr ""

#. type: Plain text
#: en/content/reference/transducers.adoc:39
#: en/content/reference/reader.adoc:180
#: en/content/guides/test_check_beginner.adoc:204
msgid "For example:"
msgstr ""

#. type: Title =
#: en/content/reference/reader.adoc:1
#, no-wrap
msgid "The Reader"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:4 en/content/community/books.adoc:4
#: en/content/community/resources.adoc:4
msgid "Rich Hickey 2016-02-15"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:15
msgid ""
"Clojure is a http://en.wikipedia.org/wiki/Homoiconicity[homoiconic] "
"language, which is a fancy term describing the fact that Clojure programs "
"are represented by Clojure data structures. This is a very important "
"difference between Clojure (and Common Lisp) and most other programming "
"languages - Clojure is defined in terms of the evaluation of data structures "
"and *not* in terms of the syntax of character streams/files. It is quite "
"common, and easy, for Clojure programs to manipulate, transform and produce "
"other Clojure programs."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:17
msgid ""
"That said, most Clojure programs begin life as text files, and it is the "
"task of the _reader_ to parse the text and produce the data structure the "
"compiler will see. This is not merely a phase of the compiler. The reader, "
"and the Clojure data representations, have utility on their own in many of "
"the same contexts one might use XML or JSON etc."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:19
msgid ""
"One might say the reader has syntax defined in terms of characters, and the "
"Clojure language has syntax defined in terms of symbols, lists, vectors, "
"maps etc. The reader is represented by the function https://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/read[read], which reads the "
"next form (not character) from a stream, and returns the object represented "
"by that form."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:21
msgid ""
"Since we have to start somewhere, this reference starts where evaluation "
"starts, with the reader forms. This will inevitably entail talking about "
"data structures whose descriptive details, and interpretation by the "
"compiler, will follow."
msgstr ""

#. type: Title ==
#: en/content/reference/reader.adoc:22
#, no-wrap
msgid "Reader forms"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:27
msgid ""
"Symbols begin with a non-numeric character and can contain alphanumeric "
"characters and *, +, !, -, _, ', ?, <, > and = (other characters may be "
"allowed eventually)."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:28
msgid ""
"'/' has special meaning, it can be used once in the middle of a symbol to "
"separate the namespace from the name, e.g. `my-namespace/foo`. '/' by itself "
"names the division function."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:29
msgid ""
"'.' has special meaning - it can be used one or more times in the middle of "
"a symbol to designate a fully-qualified class name, e.g. `java.util.BitSet`, "
"or in namespace names. Symbols beginning or ending with '.' are reserved by "
"Clojure. Symbols containing / or . are said to be 'qualified'."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:30
msgid ""
"Symbols beginning or ending with ':' are reserved by Clojure. A symbol can "
"contain one or more non-repeating ':'s."
msgstr ""

#. type: Title ==
#: en/content/reference/reader.adoc:31 en/content/guides/learn/syntax.adoc:15
#, no-wrap
msgid "Literals"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:34
msgid ""
"Strings - Enclosed in \"double quotes\". May span multiple lines. Standard "
"Java escape characters are supported."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:35
msgid "Numbers - generally represented as per Java"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:36
msgid ""
"Integers can be indefinitely long and will be read as Longs when in range "
"and clojure.lang.BigInts otherwise. Integers with an N suffix are always "
"read as BigInts. When possible, they can be specified in any base with radix "
"from 2 to 36 (see http://docs.oracle.com/javase/7/docs/api/java/lang/Long."
"html#parseLong(java.lang.String,%20int)[Long.parseLong()]); for example "
"`2r101010`, `8r52`, `36r16`, and `42` are all the same Long."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:37
msgid ""
"Floating point numbers are read as Doubles; with M suffix they are read as "
"BigDecimals."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:38
msgid "Ratios are supported, e.g. `22/7`."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:39
msgid ""
"Characters - preceded by a backslash: `\\c`. `\\newline`, `\\space`, `"
"\\tab`, `\\formfeed`, `\\backspace`, and `\\return` yield the corresponding "
"characters. Unicode characters are represented with `\\uNNNN` as in Java. "
"Octals are represented with `\\oNNN`."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:40
msgid ""
"`nil` Means 'nothing/no-value'- represents Java null and tests logical false"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:41
msgid "Booleans - `true` and `false`"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:42
msgid "Symbolic values - `pass:[##Inf]`, `pass:[##-Inf]`, and `pass:[##NaN]`"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:43
msgid "Keywords - Keywords are like symbols, except:"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:44
msgid "They can and must begin with a colon, e.g. :fred."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:45
msgid "They cannot contain '.' in the name part, or name classes."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:46
msgid ""
"Like symbols, they can contain a namespace, `:person/name`, which may "
"contain '.'s."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:47
msgid ""
"A keyword that begins with two colons is auto-resolved in the current "
"namespace to a qualified keyword:"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:48
msgid ""
"If the keyword is unqualified, the namespace will be the current namespace. "
"In `user`, `::rect` is read as `:user/rect`."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:49
msgid ""
"If the keyword is qualified, the namespace will be resolved using aliases in "
"the current namespace. In a namespace where `x` is aliased to `example`, `::"
"x/foo` resolves to `:example/foo`."
msgstr ""

#. type: Title ==
#: en/content/reference/reader.adoc:50
#: en/content/guides/learn/sequential_colls.adoc:102
#: en/content/community/editing.adoc:172
#, no-wrap
msgid "Lists"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:53
msgid "Lists are zero or more forms enclosed in parentheses: `(a b c)`"
msgstr ""

#. type: Title ==
#: en/content/reference/reader.adoc:54
#: en/content/guides/learn/sequential_colls.adoc:19
#, no-wrap
msgid "Vectors"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:57
msgid "Vectors are zero or more forms enclosed in square brackets: `[1 2 3]`"
msgstr ""

#. type: Title ====
#: en/content/reference/reader.adoc:58
#: en/content/guides/learn/hashed_colls.adoc:82 en/content/about/spec.adoc:198
#, no-wrap
msgid "Maps"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:61
msgid "Maps are zero or more key/value pairs enclosed in braces: `{:a 1 :b 2}`"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:62
msgid ""
"Commas are considered whitespace, and can be used to organize the pairs: `{:"
"a 1, :b 2}`"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:63
msgid "Keys and values can be any forms."
msgstr ""

#. type: Title ====
#: en/content/reference/reader.adoc:65
#, no-wrap
msgid "Map namespace syntax"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:68
msgid "_Added in Clojure 1.9_"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:70
msgid ""
"Map literals can optionally specify a default namespace context for keys in "
"the map using a `#:ns` prefix, where _ns_ is the name of a namespace and the "
"prefix precedes the opening brace `{` of the map. Additionally, `pass:[#::]` "
"can be used to auto-resolve namespaces with the same semantics as auto-"
"resolved keywords."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:72
msgid ""
"A map literal with namespace syntax is read with the following differences "
"from a map without:"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:74
msgid "Keys"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:75
msgid ""
"Keys that are keywords or symbols without a namespace are read with the "
"default namespace."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:76
msgid ""
"Keys that are keywords or symbols with a namespace are not affected *except* "
"for the special namespace `_`, which is removed during read. This allows for "
"the specification of keywords or symbols without namespaces as keys in a map "
"literal with namespace syntax."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:77
msgid "Keys that are not symbols or keywords are not affected."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:78
msgid "Values"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:79
msgid "Values are not affected."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:80
msgid "Nested map literal keys are not affected."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:82
#: en/content/guides/weird_characters.adoc:478
msgid "For example, the following map literal with namespace syntax:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:89
#: en/content/guides/weird_characters.adoc:484
#, no-wrap
msgid ""
"#:person{:first \"Han\"\n"
"         :last \"Solo\"\n"
"         :ship #:ship{:name \"Millennium Falcon\"\n"
"                      :model \"YT-1300f light freighter\"}}\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:92
#: en/content/guides/weird_characters.adoc:486
msgid "is read as:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:99
#: en/content/guides/weird_characters.adoc:492
#, no-wrap
msgid ""
"{:person/first \"Han\"\n"
" :person/last \"Solo\"\n"
" :person/ship {:ship/name \"Millennium Falcon\"\n"
"               :ship/model \"YT-1300f light freighter\"}}\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:104
msgid ""
"Sets are zero or more forms enclosed in braces preceded by `pass:[#]`: `#{:"
"a :b :c}`"
msgstr ""

#. type: Title ===
#: en/content/reference/reader.adoc:105
#, no-wrap
msgid "deftype, defrecord, and constructor calls (version 1.3 and later):"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:108
msgid ""
"Calls to Java class, deftype, and defrecord constructors can be called using "
"their fully qualified class name preceded by # and followed by a vector: "
"`#my.klass_or_type_or_record[:a :b :c]` +"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:109
msgid ""
"The elements in the vector part are passed *unevaluated* to the relevant "
"constructor. defrecord instances can also be created with a similar form "
"that takes a map instead: `#my.record{:a 1, :b 2}` +"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:110
msgid ""
"The keyed values in the map are assigned *unevaluated* to the relevant "
"fields in the defrecord. Any defrecord fields without corresponding entries "
"in the literal map are assigned nil as their value. Any extra keyed values "
"in the map literal are added to the resulting defrecord instance."
msgstr ""

#. type: Title ==
#: en/content/reference/reader.adoc:112
#, no-wrap
msgid "Macro characters"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:115
msgid ""
"The behavior of the reader is driven by a combination of built-in constructs "
"and an extension system called the read table. Entries in the read table "
"provide mappings from certain characters, called macro characters, to "
"specific reading behavior, called reader macros. Unless indicated otherwise, "
"macro characters cannot be used in user symbols."
msgstr ""

#. type: Title ===
#: en/content/reference/reader.adoc:116
#, no-wrap
msgid "Quote (')"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:119
msgid "`'form` => `(quote form)`"
msgstr ""

#. type: Title ===
#: en/content/reference/reader.adoc:120
#, no-wrap
msgid "Character (\\)"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:123
msgid ""
"As per above, yields a character literal. Example character literals are: `"
"\\a \\b \\c`."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:125
msgid ""
"The following special character literals can be used for common characters: `"
"\\newline`, `\\space`, `\\tab`, `\\formfeed`, `\\backspace`, and `\\return`."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:127
msgid ""
"Unicode support follows Java conventions with support corresponding to the "
"underlying Java version. A Unicode literal is of the form `\\uNNNN`, for "
"example `\\u03A9` is the literal for Ω."
msgstr ""

#. type: Title ===
#: en/content/reference/reader.adoc:128
#, no-wrap
msgid "Comment (;)"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:131
msgid ""
"Single-line comment, causes the reader to ignore everything from the "
"semicolon to the end-of-line."
msgstr ""

#. type: Title ===
#: en/content/reference/reader.adoc:132
#, no-wrap
msgid "Deref (@)"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:135
msgid "`@form => (deref form)`"
msgstr ""

#. type: Title ===
#: en/content/reference/reader.adoc:136
#, no-wrap
msgid "Metadata (^)"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:140
msgid ""
"Metadata is a map associated with some kinds of objects: Symbols, Lists, "
"Vector, Sets, Maps, tagged literals returning an IMeta, and record, type, "
"and constructor calls. The metadata reader macro first reads the metadata "
"and attaches it to the next form read (see https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/with-meta[with-meta] to attach meta to an "
"object): + `^{:a 1 :b 2} [1 2 3]` yields the vector `[1 2 3]` with a "
"metadata map of `{:a 1 :b 2}`. +"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:143
msgid ""
"A shorthand version allows the metadata to be a simple symbol or string, in "
"which case it is treated as a single entry map with a key of :tag and a "
"value of the (resolved) symbol or string, e.g.: + `^String x` is the same as "
"`^{:tag java.lang.String} x` +"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:145
msgid "Such tags can be used to convey type information to the compiler. +"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:148
msgid ""
"Another shorthand version allows the metadata to be a keyword, in which case "
"it is treated as a single entry map with a key of the keyword and a value of "
"true, e.g.: + `^:dynamic x` is the same as `^{:dynamic true} x` +"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:150
msgid ""
"Metadata can be chained in which case they are merged from right to left."
msgstr ""

#. type: Title ===
#: en/content/reference/reader.adoc:151
#, no-wrap
msgid "Dispatch (pass:[#])"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:154
msgid ""
"The dispatch macro causes the reader to use a reader macro from another "
"table, indexed by the character following"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:156
msgid "pass:[#{}] - see Sets above"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:157
msgid "Regex patterns (pass:[#\"pattern\"])"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:159
msgid ""
"A regex pattern is read and _compiled at read time_. The resulting object is "
"of type java.util.regex.Pattern. Regex strings do not follow the same escape "
"character rules as strings. Specifically, backslashes in the pattern are "
"treated as themselves (and do not need to be escaped with an additional "
"backslash). For example, `(re-pattern \"\\\\s*\\\\d+\")` can be written more "
"concisely as `#\"\\s*\\d+\"`."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:160
msgid "Var-quote (pass:[#'])"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:162
msgid "`#'x` => `(var x)`"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:163
msgid "Anonymous function literal (#())"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:166
msgid ""
"`#(...)` => `(fn [args] (...))` + where args are determined by the presence "
"of argument literals taking the form %, %n or %&. % is a synonym for %1, %n "
"designates the nth arg (1-based), and %& designates a rest arg. This is not "
"a replacement for https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/fn[fn] - idiomatic use would be for very short one-off "
"mapping/filter fns and the like. #() forms cannot be nested."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:167
msgid "Ignore next form (pass:[#_])"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:169
msgid ""
"The form following pass:[#_] is completely skipped by the reader. (This is a "
"more complete removal than the https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/comment[comment] macro which yields nil)."
msgstr ""

#. type: Title ===
#: en/content/reference/reader.adoc:171
#, no-wrap
msgid "Syntax-quote (`, note, the \"backquote\" character), Unquote (~) and Unquote-splicing (~@)"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:174
msgid ""
"For all forms other than Symbols, Lists, Vectors, Sets and Maps, `x is the "
"same as 'x. +"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:176
msgid ""
"For Symbols, syntax-quote _resolves_ the symbol in the current context, "
"yielding a fully-qualified symbol (i.e. namespace/name or fully.qualified."
"Classname). If a symbol is non-namespace-qualified and ends with pass:['#'], "
"it is resolved to a generated symbol with the same name to which '_' and a "
"unique id have been appended. e.g. x# will resolve to x_123. All references "
"to that symbol within a syntax-quoted expression resolve to the same "
"generated symbol. +"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:178
msgid ""
"For Lists/Vectors/Sets/Maps, syntax-quote establishes a template of the "
"corresponding data structure. Within the template, unqualified forms behave "
"as if recursively syntax-quoted, but forms can be exempted from such "
"recursive quoting by qualifying them with unquote or unquote-splicing, in "
"which case they will be treated as expressions and be replaced in the "
"template by their value, or sequence of values, respectively. +"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:187
#, no-wrap
msgid ""
"user=> (def x 5)\n"
"user=> (def lst '(a b c))\n"
"user=> `(fred x ~x lst ~@lst 7 8 :nine)\n"
"(user/fred user/x 5 user/lst a b c 7 8 :nine)\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:190
msgid "The read table is currently not accessible to user programs."
msgstr ""

#. type: Title ==
#: en/content/reference/reader.adoc:191
#, no-wrap
msgid "extensible data notation (edn)"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:193
msgid ""
"Clojure's reader supports a superset of https://github.com/edn-format/"
"edn[extensible data notation (edn)]. The edn specification is under active "
"development, and complements this document by defining a subset of Clojure "
"data syntax in a language-neutral way."
msgstr ""

#. type: Title ==
#: en/content/reference/reader.adoc:195
#, no-wrap
msgid "Tagged Literals"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:197
msgid ""
"Tagged literals are Clojure's implementation of edn https://github.com/edn-"
"format/edn#tagged-elements[tagged elements]."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:199
msgid ""
"When Clojure starts, it searches for files named `data_readers.clj` at the "
"root of the classpath. Each such file must contain a Clojure map of symbols, "
"like this:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:204
#, no-wrap
msgid ""
"{foo/bar my.project.foo/bar\n"
" foo/baz my.project/baz}\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:206
msgid ""
"The key in each pair is a tag that will be recognized by the Clojure reader. "
"The value in the pair is the fully-qualified name of a <<vars#,Var>> which "
"will be invoked by the reader to parse the form following the tag. For "
"example, given the `data_readers.clj` file above, the Clojure reader would "
"parse this form:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:210
#, no-wrap
msgid "#foo/bar [1 2 3]\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:212
msgid ""
"by invoking the Var `#'my.project.foo/bar` on the vector `[1 2 3]`. The data "
"reader function is invoked on the form AFTER it has been read as a normal "
"Clojure data structure by the reader."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:214
msgid ""
"Reader tags without namespace qualifiers are reserved for Clojure. Default "
"reader tags are defined in https://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/default-data-readers[default-data-readers] but may be "
"overridden in `data_readers.clj` or by rebinding https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/%2Adata-readers%2A[pass:[*data-"
"readers*]]. If no data reader is found for a tag, the function bound in "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"%2Adefault-data-reader-fn%2A[pass:[*default-data-reader-fn*]] will be "
"invoked with the tag and value to produce a value. If pass:[*default-data-"
"reader-fn*] is nil (the default), a RuntimeException will be thrown."
msgstr ""

#. type: Title ===
#: en/content/reference/reader.adoc:215
#, no-wrap
msgid "Built-in tagged literals"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:220
msgid ""
"Clojure 1.4 introduced the _instant_ and _UUID_ tagged literals. Instants "
"have the format `#inst \"yyyy-mm-ddThh:mm:ss.fff+hh:mm\"`.  NOTE: Some of "
"the elements of this format are optional. See the code for details.  The "
"default reader will parse the supplied string into a `java.util.Date` by "
"default. For example:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:226
#, no-wrap
msgid ""
"(def instant #inst \"2018-03-28T10:48:00.000\")\n"
"(= java.util.Date (class instant))\n"
";=> true\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:229
msgid ""
"Since https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"%2Adata-readers%2A[pass:[*data-readers*]] is a dynamic var that can be "
"bound, you can replace the default reader with a different one. For example, "
"`clojure.instant/read-instant-calendar` will parse the literal into a `java."
"util.Calendar`, while `clojure.instant/read-instant-timestamp` will parse it "
"into a `java.util.Timestamp`:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:235
#, no-wrap
msgid ""
"(binding [*data-readers* {'inst read-instant-calendar}]\n"
"  (= java.util.Calendar (class (read-string (pr-str instant)))))\n"
";=> true\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:239
#, no-wrap
msgid ""
"(binding [*data-readers* {'inst read-instant-timestamp}]\n"
"  (= java.util.Timestamp (class (read-string (pr-str instant)))))\n"
";=> true\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:242
msgid "The `#uuid` tagged literal will be parsed into a `java.util.UUID`:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:247
#, no-wrap
msgid ""
"(= java.util.UUID (class (read-string \"#uuid \\\"3b8a31ed-fd89-4f1b-a00f-42e3d60cf5ce\\\"\")))\n"
";=> true\n"
msgstr ""

#. type: Title ===
#: en/content/reference/reader.adoc:249
#, no-wrap
msgid "Default data reader function"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:252
msgid ""
"If no data reader is found when reading a tagged literal, the https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/%2Adefault-data-"
"reader-fn%2A[pass:[*default-data-reader-fn*]] is invoked. You can set your "
"own default data reader function and the provided http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/tagged-literal[tagged-literal] "
"function can be used to build an object that can store an unhandled literal. "
"The object returned by `tagged-literal` supports keyword lookup of the `:"
"tag` and `:form`:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:256
#, no-wrap
msgid "(set! *default-data-reader-fn* tagged-literal)\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:259
#, no-wrap
msgid ""
";; read #object as a generic TaggedLiteral object\n"
"(def x #object[clojure.lang.Namespace 0x23bff419 \"user\"])\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:262
#, no-wrap
msgid ""
"[(:tag x) (:form x)]\n"
";=> [object [clojure.lang.Namespace 599782425 \"user\"]]\n"
msgstr ""

#. type: Title ==
#: en/content/reference/reader.adoc:264
#, no-wrap
msgid "Reader Conditionals"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:267
msgid ""
"Clojure 1.7 introduced a new extension (.cljc) for portable files that can "
"be loaded by multiple Clojure platforms. The primary mechanism for managing "
"platform-specific code is to isolate that code into a minimal set of "
"namespaces, and then provide platform-specific versions (.clj/.class or ."
"cljs) of those namespaces."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:269
msgid ""
"In cases where is not feasible to isolate the varying parts of the code, or "
"where the code is mostly portable with only small platform-specific parts, "
"1.7 also introduced _reader conditionals_, which are supported only in cljc "
"files and at the default REPL. Reader conditionals should be used sparingly "
"and only when necessary."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:271
msgid ""
"Reader conditionals are a new reader dispatch form starting with `pass:[#?]` "
"or `pass:[#?@]`. Both consist of a series of alternating features and "
"expressions, similar to `cond`. Every Clojure platform has a well-known "
"\"platform feature\" - `:clj`, `:cljs`, `:cljr`. Each condition in a reader "
"conditional is checked in order until a feature matching the platform "
"feature is found. The reader conditional will read and return that feature's "
"expression. The expression on each non-selected branch will be read but "
"skipped. A well-known `:default` feature will always match and can be used "
"to provide a default. If no branches match, no form will be read (as if no "
"reader conditional expression was present)."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:273
msgid ""
"The following example will read as Double/NaN in Clojure, js/NaN in "
"ClojureScript, and nil in any other platform:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:279
#, no-wrap
msgid ""
"#?(:clj     Double/NaN\n"
"   :cljs    js/NaN\n"
"   :default nil)\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:282
msgid ""
"The syntax for `pass:[#?@]` is exactly the same but the expression is "
"expected to return a collection that can be spliced into the surrounding "
"context, similar to unquote-splicing in syntax quote. Use of reader "
"conditional splicing at the top level is not supported and will throw an "
"exception. An example:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:289
#, no-wrap
msgid ""
"[1 2 #?@(:clj [3 4] :cljs [5 6])]\n"
";; in clj =>        [1 2 3 4]\n"
";; in cljs =>       [1 2 5 6]\n"
";; anywhere else => [1 2]\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:292
msgid ""
"The https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"read[read] and https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/read-string[read-string] functions optionally take a map "
"of options as a first argument. The current feature set and reader "
"conditional behavior can be set in the options map with these keys and "
"values:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:298
#, no-wrap
msgid ""
"  :read-cond - :allow to process reader conditionals, or\n"
"               :preserve to keep all branches\n"
"  :features - persistent set of feature keywords that are active\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:301
msgid ""
"An example of how to test ClojureScript reader conditionals from Clojure:"
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:309
#, no-wrap
msgid ""
"(read-string\n"
"  {:read-cond :allow\n"
"   :features #{:cljs}}\n"
"  \"#?(:cljs :works! :default :boo)\")\n"
";; :works!\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:312
msgid ""
"However, note that the Clojure reader will _always_ inject the platform "
"feature :clj as well. For platform-agnostic reading, see https://github.com/"
"clojure/tools.reader[tools.reader]."
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:314
msgid ""
"If the reader is invoked with `{:read-cond :preserve}`, the reader "
"conditional and non-executed branches will be preserved, as data, in the "
"returned form. The reader-conditional will be returned as a type that "
"supports keyword retrieval for keys with `:form` and a `:splicing?` flag. "
"Read but skipped tagged literals will be returned as a type that supports "
"keyword retrieval for keys with `:form` and `:tag` keys."
msgstr ""

#. type: delimited block -
#: en/content/reference/reader.adoc:321
#, no-wrap
msgid ""
"(read-string\n"
"  {:read-cond :preserve}\n"
"  \"[1 2 #?@(:clj [3 4] :cljs [5 6])]\")\n"
";; [1 2 #?@(:clj [3 4] :cljs [5 6])]\n"
msgstr ""

#. type: Plain text
#: en/content/reference/reader.adoc:324
msgid ""
"The following functions can also be used as predicates or constructors for "
"these types: + https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/reader-conditional%3F[reader-conditional?] https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/reader-"
"conditional[reader-conditional] https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/tagged-literal%3F[tagged-literal?] https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/tagged-"
"literal[tagged-literal]"
msgstr ""
