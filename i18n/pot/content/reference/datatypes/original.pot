# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/content/reference/metadata.adoc:4 en/content/reference/protocols.adoc:4
#: en/content/reference/sequences.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/reference/libs.adoc:4
#: en/content/reference/transients.adoc:4
#: en/content/reference/compilation.adoc:4
#: en/content/reference/other_libraries.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/macros.adoc:4
#: en/content/reference/transducers.adoc:4 en/content/reference/refs.adoc:4
#: en/content/reference/lazy.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/evaluation.adoc:4
#: en/content/reference/other_functions.adoc:4
#: en/content/reference/reducers.adoc:4
#: en/content/reference/data_structures.adoc:4
#: en/content/reference/atoms.adoc:4 en/content/reference/repl_and_main.adoc:4
#: en/content/reference/agents.adoc:4 en/content/reference/datatypes.adoc:4
#: en/content/community/libraries.adoc:4 en/content/community/license.adoc:4
#: en/content/community/downloads_older.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/swag.adoc:4
#: en/content/404.adoc:4 en/content/privacy.adoc:4 en/content/search.adoc:4
#: en/content/about/spec.adoc:4 en/content/about/concurrent_programming.adoc:4
#: en/content/about/lisp.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/about/dynamic.adoc:4
#: en/content/about/features.adoc:4 en/content/about/rationale.adoc:4
#: en/content/about/state.adoc:4 en/content/about/clojurescript.adoc:4
#: en/content/about/functional_programming.adoc:4
#: en/content/about/clojureclr.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr ""

#. type: Title ==
#: en/content/reference/protocols.adoc:16
#: en/content/reference/datatypes.adoc:17
#, no-wrap
msgid "Motivation"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:19
#: en/content/reference/datatypes.adoc:20
msgid ""
"Clojure is written in terms of abstractions. There are abstractions for "
"sequences, collections, callability, etc. In addition, Clojure supplies many "
"implementations of these abstractions. The abstractions are specified by "
"host interfaces, and the implementations by host classes. While this was "
"sufficient for bootstrapping the language, it left Clojure without similar "
"abstraction and low-level implementation facilities. The <<protocols#,"
"protocols>> and <<datatypes#,datatypes>> features add powerful and flexible "
"mechanisms for abstraction and data structure definition with no compromises "
"vs the facilities of the host platform."
msgstr ""

#. type: Title ==
#: en/content/reference/protocols.adoc:36
#: en/content/reference/datatypes.adoc:21 en/content/about/dynamic.adoc:42
#, no-wrap
msgid "Basics"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:182
#: en/content/reference/datatypes.adoc:115 en/content/guides/faq.adoc:184
msgid "Example:"
msgstr ""

#. type: Title =
#: en/content/reference/datatypes.adoc:1
#, no-wrap
msgid "Datatypes: deftype, defrecord and reify"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:24
msgid ""
"The datatype features - https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/deftype[deftype] , https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/defrecord[defrecord] and https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/reify[reify] , provide "
"the mechanism for defining implementations of abstractions, and in the case "
"of reify, instances of those implementations. The abstractions themselves "
"are defined by either <<protocols#,protocols>> or interfaces. A datatype "
"provides a host type, (named in the case of deftype and defrecord, anonymous "
"in the case of reify), with some structure (explicit fields in the case of "
"deftype and defrecord, implicit closure in the case of reify), and optional "
"in-type implementations of abstraction methods. They support, in a "
"relatively clean manner, access to the highest-performance primitive "
"representation and polymorphism mechanisms of the host. N.B. that they are "
"not merely host-in-parens constructs. They support only a circumscribed "
"subset of the host facilities, often with more dynamism than the host "
"itself. The intent is that, unless interop forces one to go beyond their "
"circumscribed scope, one need not leave Clojure to get the highest-"
"performing data structures possible on the platform."
msgstr ""

#. type: Title ==
#: en/content/reference/datatypes.adoc:25
#, no-wrap
msgid "deftype and defrecord"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:28
msgid ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"deftype[deftype] and https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/defrecord[defrecord] dynamically generate compiled "
"bytecode for a named class with a set of given fields, and, optionally, "
"methods for one or more protocols and/or interfaces. They are suitable for "
"dynamic and interactive development, need not be AOT compiled, and can be re-"
"evaluated in the course of a single session. They are similar to defstruct "
"in generating data structures with named fields, but differ from defstruct "
"in that:"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:31
msgid ""
"They generate a unique class, with fields corresponding to the given names."
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:32
msgid ""
"the resulting class has a proper type, unlike conventions for encoding type "
"for structs in metadata"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:33
msgid "because they generate a named class, it has an accessible constructor"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:34
msgid "fields can have type hints, and can be primitive"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:35
msgid ""
"note that currently a type hint of a non-primitive type will not be used to "
"constrain the field type nor the constructor arg, but will be used to "
"optimize its use in the class methods"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:36
msgid "constraining the field type and constructor arg is planned"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:37
msgid ""
"a deftype/defrecord can implement one or more protocols and/or interfaces"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:38
msgid ""
"deftype/defrecord can be written with a special reader syntax #my.thing[1 2 "
"3] where:"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:39
msgid ""
"each element in the vector form is passed to the deftype/defrecord's "
"constructor un-evaluated"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:40
msgid "the deftype/defrecord name must be fully qualified"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:41
#: en/content/reference/datatypes.adoc:62
msgid "only available in Clojure versions later than 1.3"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:42
msgid ""
"when a deftype/defrecord Foo is defined a corresponding function `pass:[-"
">Foo]` is defined that passes its arguments to the constructor (versions 1.3 "
"and later only)"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:44
msgid ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"deftype[deftype] and https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/defrecord[defrecord] differ in the following ways:"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:47
msgid ""
"deftype provides no functionality not specified by the user, other than a "
"constructor"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:48
msgid ""
"defrecord provides a complete implementation of a persistent map, including:"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:49
msgid "value-based equality and hashCode"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:50
msgid "metadata support"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:51
msgid "associative support"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:52
msgid "keyword accessors for fields"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:53
msgid ""
"extensible fields (you can assoc keys not supplied with the defrecord "
"definition)"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:54
msgid "etc"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:55
msgid "deftype supports mutable fields, defrecord does not"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:56
msgid ""
"defrecord supports an additional reader form of #my.record{:a 1, :b 2} "
"taking a map that initializes a defrecord according to:"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:57
msgid "the defrecord name must be fully qualified"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:58
msgid "the elements in the map are un-evaluated"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:59
msgid "existing defrecord fields take the keyed values"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:60
msgid ""
"defrecord fields without keyed values in the literal map are initialized to "
"nil"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:61
msgid "additional keyed values are allowed and added to the defrecord"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:63
msgid ""
"when a defrecord Bar is defined a corresponding function `pass:[map->Bar]` "
"is defined that takes a map and initializes a new record instance with its "
"contents (versions 1.3 and later only)"
msgstr ""

#. type: Title ==
#: en/content/reference/datatypes.adoc:64
#, no-wrap
msgid "Why have both deftype and defrecord?"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:67
msgid ""
"It ends up that classes in most OO programs fall into two distinct "
"categories: those classes that are artifacts of the implementation/"
"programming domain, e.g. String or collection classes, or Clojure's "
"reference types; and classes that represent application domain information, "
"e.g. Employee, PurchaseOrder etc. It has always been an unfortunate "
"characteristic of using classes for application domain information that it "
"resulted in information being hidden behind class-specific micro-languages, "
"e.g. even the seemingly harmless employee.getName() is a custom interface to "
"data. Putting information in such classes is a problem, much like having "
"every book being written in a different language would be a problem. You can "
"no longer take a generic approach to information processing. This results in "
"an explosion of needless specificity, and a dearth of reuse."
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:69
msgid ""
"This is why Clojure has always encouraged putting such information in maps, "
"and that advice doesn't change with datatypes. By using defrecord you get "
"generically manipulable information, plus the added benefits of type-driven "
"polymorphism, and the structural efficiencies of fields. OTOH, it makes no "
"sense for a datatype that defines a collection like vector to have a default "
"implementation of map, thus deftype is suitable for defining such "
"programming constructs."
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:71
msgid ""
"Overall, records will be better than structmaps for all information-bearing "
"purposes, and you should move such structmaps to defrecord. It is unlikely "
"much code was trying to use structmaps for programming constructs, but if "
"so, you will find deftype much more suitable."
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:73
msgid ""
"AOT-compiled deftype/defrecord may be suitable for some of the use cases of "
"*gen-class*, where their limitations are not prohibitive. In those cases, "
"they will have better performance than gen-class."
msgstr ""

#. type: Title ==
#: en/content/reference/datatypes.adoc:74
#, no-wrap
msgid "Datatypes and protocols are opinionated"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:77
msgid ""
"While datatypes and protocols have well-defined relationships with host "
"constructs, and make for a great way to expose Clojure functionality to Java "
"programs, they are not primarily interop constructs. That is, they make no "
"effort to completely mimic or adapt to all of the OO mechanisms of the host. "
"In particular, they reflect the following opinions:"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:79
msgid "Concrete derivation is bad"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:80
msgid "you cannot derive datatypes from concrete classes, only interfaces"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:81
msgid "You should always program to protocols or interfaces"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:82
msgid "datatypes cannot expose methods not in their protocols or interfaces"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:83
msgid "Immutability should be the default"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:84
msgid "and is the only option for records"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:85
msgid "Encapsulation of information is folly"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:86
msgid "fields are public, use protocols/interfaces to avoid dependencies"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:87
msgid "Tying polymorphism to inheritance is bad"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:88
msgid "protocols free you from that"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:90
msgid ""
"If you use datatypes and protocols you will have a clean, interface-based "
"API to offer your Java consumers. If you are dealing with a clean, interface-"
"based Java API, datatypes and protocols can be used to interoperate with and "
"extend it. If you have a 'bad' Java API, you will have to use gen-class. "
"Only in this way can the programming constructs you use to design and "
"implement your Clojure programs be free of the incidental complexities of OO."
msgstr ""

#. type: Title ==
#: en/content/reference/datatypes.adoc:91
#, no-wrap
msgid "reify"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:94
msgid ""
"While deftype and defrecord define named types, https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/reify[reify] defines both an "
"anonymous type and creates an instance of that type. The use case is where "
"you need a one-off implementation of one or more protocols or interfaces and "
"would like to take advantage of the local context. In this respect it is use "
"case similar to proxy, or anonymous inner classes in Java."
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:96
msgid ""
"The method bodies of reify are lexical closures, and can refer to the "
"surrounding local scope. *reify* differs from *proxy* in that:"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:99
msgid "Only protocols or interfaces are supported, no concrete superclass."
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:100
msgid ""
"The method bodies are true methods of the resulting class, not external fns."
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:101
msgid "Invocation of methods on the instance is direct, not using map lookup."
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:102
msgid "No support for dynamic swapping of methods in the method map."
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:104
msgid ""
"The result is better performance than proxy, both in construction and "
"invocation. *reify* is preferable to proxy in all cases where its "
"constraints are not prohibitive."
msgstr ""

#. type: Title ==
#: en/content/reference/datatypes.adoc:105
#, no-wrap
msgid "Java annotation support"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:108
msgid ""
"Types created with deftype, defrecord, and definterface, can emit classes "
"that include Java annotations for Java interop. Annotations are described as "
"meta on:"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:111
msgid "Type name (deftype/record/interface) - class annotations"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:112
msgid "Field names (deftype/record) - field annotations"
msgstr ""

#. type: Plain text
#: en/content/reference/datatypes.adoc:113
msgid "Method names (deftype/record) - method annotations"
msgstr ""

#. type: delimited block -
#: en/content/reference/datatypes.adoc:120
#, no-wrap
msgid ""
"(import [java.lang.annotation Retention RetentionPolicy Target ElementType]\n"
"        [javax.xml.ws WebServiceRef WebServiceRefs])\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/datatypes.adoc:122
#, no-wrap
msgid "(definterface Foo (foo []))\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/datatypes.adoc:148
#, no-wrap
msgid ""
";; annotation on type\n"
"(deftype ^{Deprecated true\n"
"           Retention RetentionPolicy/RUNTIME\n"
"           javax.annotation.processing.SupportedOptions [\"foo\" \"bar\" \"baz\"]\n"
"           javax.xml.ws.soap.Addressing {:enabled false :required true}\n"
"           WebServiceRefs [(WebServiceRef {:name \"fred\" :type String})\n"
"                           (WebServiceRef {:name \"ethel\" :mappedName \"lucy\"})]}\n"
"  Bar [^int a\n"
"       ;; on field\n"
"       ^{:tag int\n"
"         Deprecated true\n"
"         Retention RetentionPolicy/RUNTIME\n"
"         javax.annotation.processing.SupportedOptions [\"foo\" \"bar\" \"baz\"]\n"
"         javax.xml.ws.soap.Addressing {:enabled false :required true}\n"
"         WebServiceRefs [(WebServiceRef {:name \"fred\" :type String})\n"
"                         (WebServiceRef {:name \"ethel\" :mappedName \"lucy\"})]}\n"
"       b]\n"
"  ;; on method\n"
"  Foo (^{Deprecated true\n"
"         Retention RetentionPolicy/RUNTIME\n"
"         javax.annotation.processing.SupportedOptions [\"foo\" \"bar\" \"baz\"]\n"
"         javax.xml.ws.soap.Addressing {:enabled false :required true}\n"
"         WebServiceRefs [(WebServiceRef {:name \"fred\" :type String})\n"
"                         (WebServiceRef {:name \"ethel\" :mappedName \"lucy\"})]}\n"
"       foo [this] 42))\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/datatypes.adoc:152
#, no-wrap
msgid ""
"(seq (.getAnnotations Bar))\n"
"(seq (.getAnnotations (.getField Bar \"b\")))\n"
"(seq (.getAnnotations (.getMethod Bar \"foo\" nil)))\n"
msgstr ""
