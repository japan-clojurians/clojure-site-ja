# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: en/content/reference/special_forms.adoc:1
#, no-wrap
msgid "Special Forms"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:4
msgid "Rich Hickey 2016-02-09"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:17
msgid ""
"Special forms have evaluation rules that differ from standard Clojure "
"evaluation rules and are understood directly by the Clojure compiler."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:19
msgid ""
"Headings for the special forms informally describe the special form grammar "
"using regular expression syntax: ? (optional), * (0 or more), and + (1 or "
"more). Non-terminals are denoted by _italics_."
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:21
#, no-wrap
msgid "(`def` _symbol_ __doc-string__? __init__?)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:24
msgid ""
"Creates and interns or locates a global https://clojure.org/reference/"
"vars[var] with the name of _symbol_ and a namespace of the value of the "
"current namespace (`pass:[*ns*]`). If _init_ is supplied, it is evaluated, "
"and the root binding of the var is set to the resulting value. If _init_ is "
"not supplied, the root binding of the var is unaffected. `def` always "
"applies to the root binding, even if the var is thread-bound at the point "
"where `def` is called. `def` yields the var itself (not its value). Throws "
"an exception if _symbol_ is already in the namespace and not mapped to an "
"interned var. Support for _doc-string_ was added in Clojure 1.3."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:26
msgid ""
"Any metadata on the _symbol_ will be evaluated, and become metadata on the "
"var itself. There are several metadata keys that have special interpretation:"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:28
msgid "`:private`"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:30
msgid ""
"a boolean indicating the access control for the var. If this key is not "
"present, the default access is public (e.g. as if `:private false`)."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:31
msgid "`:doc`"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:33
msgid "a string containing short (1-3 line) documentation for the var contents"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:34
msgid "`:test`"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:36
msgid ""
"a fn of no args that uses `assert` to check various operations. The var "
"itself will be accessible during evaluation of a literal fn in the metadata "
"map."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:37
msgid "`:tag`"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:39
msgid ""
"a symbol naming a class or a Class object that indicates the Java type of "
"the object in the var, or its return value if the object is a fn."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:41
msgid ""
"In addition the compiler will place the following metadata keys on the var:"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:43
msgid "`:file` string"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:44
msgid "`:line` int"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:45
msgid "`:name` simple symbol"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:46
msgid "`:ns` namespace in which var is interned"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:47
msgid "`:macro` `true` if var names a macro"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:48
msgid ""
"`:arglists` a list of vector(s) of argument forms, as were supplied to `defn`"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:50
msgid ""
"The var metadata can be used for application-specific purposes as well. "
"Consider using namespace-qualified keys (e.g. `:myns/foo`) to avoid clashes."
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:63
#, no-wrap
msgid ""
"(defn\n"
" ^{:doc \"mymax [xs+] gets the maximum value in xs using > \"\n"
"   :test (fn []\n"
"             (assert (= 42  (mymax 2 42 5 4))))\n"
"   :user/comment \"this is the best fn ever!\"}\n"
"  mymax\n"
"  ([x] x)\n"
"  ([x y] (if (> x y) x y))\n"
"  ([x y & more]\n"
"   (reduce mymax (mymax x y) more)))\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:73
#, no-wrap
msgid ""
"user=> (meta #'mymax)\n"
"  {:name mymax,\n"
"   :user/comment \"this is the best fn ever!\",\n"
"   :doc \"mymax [xs+] gets the maximum value in xs using > \",\n"
"   :arglists ([x] [x y] [x y & more])\n"
"   :file \"repl-1\",\n"
"   :line 126,\n"
"   :ns #<Namespace user >,\n"
"   :test #<user$fn__289 user$fn__289@20f443 >}\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:76
msgid ""
"Many macros expand into `def` (e.g. `defn`, `defmacro`), and thus also "
"convey metadata for the resulting var from the _symbol_ used as the name."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:78
msgid ""
"Using `def` to modify the root value of a var at other than the top level is "
"usually an indication that you are using the var as a mutable global, and is "
"considered bad style. Consider either using binding to provide a thread-"
"local value for the var, or putting a https://clojure.org/reference/"
"refs[ref] or https://clojure.org/reference/agents[agent] in the var and "
"using transactions or actions for mutation."
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:80
#, no-wrap
msgid "(`if` _test_ _then_ __else__?)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:83
msgid ""
"Evaluates _test_. If not the singular values `nil` or `false`, evaluates and "
"yields _then_, otherwise, evaluates and yields _else_. If _else_ is not "
"supplied it defaults to `nil`. All of the other conditionals in Clojure are "
"based upon the same logic, that is, `nil` and `false` constitute logical "
"falsity, and everything else constitutes logical truth, and those meanings "
"apply throughout. `if` performs conditional tests of boolean Java method "
"return values without conversion to Boolean. Note that `if` does not test "
"for arbitrary values of java.lang.Boolean, only the singular value `false` "
"(Java's `Boolean.FALSE`), so if you are creating your own boxed Booleans "
"make sure to use `Boolean/valueOf` and not the Boolean constructors."
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:85
#, no-wrap
msgid "(`do` __expr__*)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:88
msgid ""
"Evaluates the expressions __expr__s in order and returns the value of the "
"last. If no expressions are supplied, returns `nil`."
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:90
#, no-wrap
msgid "(`let` [ __binding__* ] __expr__*)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:93
msgid "_binding_ => _binding-form_ _init-expr_"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:95
msgid ""
"Evaluates the expressions __expr__s in a lexical context in which the "
"symbols in the __binding-form__s are bound to their respective __init-"
"expr__s or parts therein. The bindings are sequential, so each _binding_ can "
"see the prior bindings. The __expr__s are contained in an implicit `do`. If "
"a _binding_ symbol is annotated with a metadata tag, the compiler will try "
"to resolve the tag to a class name and presume that type in subsequent "
"references to the _binding_. The simplest _binding-form_ is a symbol, which "
"is bound to the entire _init-expr_:"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:102
#, no-wrap
msgid ""
"(let [x 1\n"
"      y x]\n"
"  y)\n"
"-> 1\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:105
#: en/content/reference/special_forms.adoc:191
msgid ""
"See <<special_forms#binding-forms#,Binding Forms>> for more information "
"about binding forms."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:107
#, no-wrap
msgid "*Locals created with `let` are not variables. Once created their values never change!*\n"
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:109
#, no-wrap
msgid "(`quote` _form_)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:112
msgid "Yields the unevaluated _form_."
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:117
#, no-wrap
msgid ""
"user=> '(a b c)\n"
"(a b c)\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:120
msgid ""
"Note there is no attempt made to call the function `a`. The return value is "
"a list of 3 symbols."
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:122
#, no-wrap
msgid "(`var` _symbol_)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:125
msgid ""
"The _symbol_ must resolve to a var, and the Var object itself _(not its "
"value)_ is returned. The reader macro `#'x` expands to `(var x)`."
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:127
#, no-wrap
msgid "(`fn` __name__? [__params__* ] __expr__*)"
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:128
#, no-wrap
msgid "(`fn` __name__? ([__params__* ] __expr__*)+)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:134
msgid ""
"_params_ => __positional-param__* , or __positional-param__* & __rest-"
"param__ + _positional-param_ => _binding-form_ + _rest-param_ => _binding-"
"form_ + _name_ => _symbol_"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:136
msgid ""
"Defines a function (fn). Fns are first-class objects that implement the "
"https://clojure.github.io/clojure/javadoc/clojure/lang/IFn.html[IFn "
"interface]. The `IFn` interface defines an `invoke()` function that is "
"overloaded with arity ranging from 0-20. A single fn object can implement "
"one or more invoke methods, and thus be overloaded on arity. One and only "
"one overload can itself be variadic, by specifying the ampersand followed by "
"a single _rest-param_. Such a variadic entry point, when called with "
"arguments that exceed the positional params, will find them in a seq "
"contained in the rest param. If the supplied args do not exceed the "
"positional params, the rest param will be nil."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:138
msgid ""
"The first form defines a fn with a single invoke method. The second defines "
"a fn with one or more overloaded invoke methods. The arities of the "
"overloads must be distinct. In either case, the result of the expression is "
"a single fn object."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:140
msgid ""
"The expressions __expr__s are compiled in an environment in which the "
"_params_ are bound to the actual arguments. The __expr__s are enclosed in an "
"implicit `do`. If a name __symbol__ is provided, it is bound within the "
"function definition to the function object itself, allowing for self-"
"calling, even in anonymous functions. If a __param__ symbol is annotated "
"with a metadata tag, the compiler will try to resolve the tag to a class "
"name and presume that type in subsequent references to the binding."
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:149
#, no-wrap
msgid ""
"(def mult\n"
"  (fn this\n"
"      ([] 1)\n"
"      ([x] x)\n"
"      ([x y] (* x y))\n"
"      ([x y & more]\n"
"          (apply this (this x y) more))))\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:151
msgid ""
"Note that named fns such as `mult` are normally defined with `defn`, which "
"expands into something such as the above."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:153
msgid ""
"A fn (overload) defines a recursion point at the top of the function, with "
"arity equal to the number of __param__s _including the rest param, if "
"present_. See <<special_forms#recur#,`recur`>>."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:155
msgid ""
"fns implement the Java `Callable`, `Runnable` and `Comparator` interfaces."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:157
#, no-wrap
msgid "*__Since 1.1__*\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:159
msgid "Functions support specifying runtime pre- and post-conditions."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:161
msgid "The syntax for function definitions becomes the following:"
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:162
#, no-wrap
msgid "(`fn` __name__? [__param__* ] __condition-map__? __expr__*)"
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:163
#, no-wrap
msgid "(`fn` name? ([__param__* ] __condition-map__? __expr__*)+)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:166
msgid ""
"The syntax extension also applies to `defn` and other macros which expand to "
"`fn` forms."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:168
msgid ""
"Note: If the sole form following the parameter vector is a map, it is "
"treated as the function body, and not the condition map."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:170
msgid ""
"The __condition-map__ parameter may be used to specify pre- and post-"
"conditions for a function. It is of the following form:"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:175
#, no-wrap
msgid ""
"{:pre [pre-expr*]\n"
" :post [post-expr*]}\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:178
msgid ""
"where either key is optional. The condition map may also be provided as "
"metadata of the arglist."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:180
msgid ""
"_pre-expr_ and _post-expr_ are boolean expressions that may refer to the "
"parameters of the function. In addition, `%` may be used in a _post-expr_ to "
"refer to the function's return value. If any of the conditions evaluate to "
"`false` and `pass:[*assert*]` is true, an assertion failure exception is "
"thrown."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:182
#: en/content/reference/datatypes.adoc:115 en/content/guides/faq.adoc:184
msgid "Example:"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:188
#, no-wrap
msgid ""
"(defn constrained-sqr [x]\n"
"    {:pre  [(pos? x)]\n"
"     :post [(> % 16), (< % 225)]}\n"
"    (* x x))\n"
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:193
#, no-wrap
msgid "(`loop` [__binding__* ] __expr__*)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:196
msgid ""
"`loop` is exactly like `let`, except that it establishes a recursion point "
"at the top of the loop, with arity equal to the number of bindings. See "
"<<special_forms#recur#,`recur`>>."
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:198
#, no-wrap
msgid "(`recur` __expr__*)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:201
msgid ""
"Evaluates the expressions __expr__s in order, then, in parallel, rebinds the "
"bindings of the recursion point to the values of the __expr__s. If the "
"recursion point was a `fn` method, then it rebinds the params. If the "
"recursion point was a <<special_forms#loop#,`loop`>>, then it rebinds the "
"`loop` bindings. Execution then jumps back to the recursion point. The "
"`recur` expression must match the arity of the recursion point exactly. In "
"particular, if the recursion point was the top of a variadic fn method, "
"there is no gathering of `rest` args - a single seq (or null) should be "
"passed. `recur` in other than a tail position is an error."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:203
msgid ""
"Note that `recur` is the only non-stack-consuming looping construct in "
"Clojure. There is no tail-call optimization and the use of self-calls for "
"looping of unknown bounds is discouraged. `recur` is functional and its use "
"in tail-position is verified by the compiler."
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:212
#, no-wrap
msgid ""
"(def factorial\n"
"  (fn [n]\n"
"    (loop [cnt n acc 1]\n"
"       (if (zero? cnt)\n"
"            acc\n"
"          (recur (dec cnt) (* acc cnt))))))\n"
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:215
#, no-wrap
msgid "(`throw` _expr_)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:218
msgid ""
"The _expr_ is evaluated and thrown, therefore it should yield an instance of "
"some derivee of `Throwable`."
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:220
#, no-wrap
msgid "(`try` __expr__* __catch-clause__* __finally-clause__?)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:224
msgid ""
"_catch-clause_ -> (catch _classname_ _name_ __expr__*) + _finally-clause_ -> "
"(finally __expr__*)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:226
msgid ""
"The __expr__s are evaluated and, if no exceptions occur, the value of the "
"last expression is returned. If an exception occurs and __catch-clause__s "
"are provided, each is examined in turn and the first for which the thrown "
"exception is an instance of the _classname_ is considered a matching __catch-"
"clause__. If there is a matching _catch-clause_, its __expr__s are evaluated "
"in a context in which _name_ is bound to the thrown exception, and the value "
"of the last is the return value of the function. If there is no matching "
"__catch-clause__, the exception propagates out of the function. Before "
"returning, normally or abnormally, any _finally-clause_ __expr__s will be "
"evaluated for their side effects."
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:228
#, no-wrap
msgid "(`monitor-enter` _expr_)"
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:231
#, no-wrap
msgid "(`monitor-exit` _expr_)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:234
msgid ""
"These are synchronization primitives that should be avoided in user code. "
"Use the `locking` macro."
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:235
#, no-wrap
msgid "Other Special Forms"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:240
msgid ""
"anchor:.[] anchor:new[] The special forms <<java_interop#dot,dot ('.')>>, "
"<<java_interop#new,new>>, and <<java_interop#set,set!>> of fields are "
"described in the <<java_interop#,Java Interop>> section of the reference."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:243
msgid ""
"anchor:set![] <<vars#set%21,set!>> of vars is described in the <<vars#,"
"Vars>> section of the reference."
msgstr ""

#. type: Title ==
#: en/content/reference/special_forms.adoc:245
#, no-wrap
msgid "Binding Forms (Destructuring)"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:248
msgid ""
"Clojure supports abstract structural binding, often called destructuring, in "
"let binding lists, fn parameter lists, and any macro that expands into a "
"`let` or `fn`. A _binding-form_ can be a data structure literal containing "
"symbols that get bound to the respective parts of the __init-expr__. The "
"binding is abstract in that a vector literal can bind to anything that is "
"sequential, while a map literal can bind to anything that is associative."
msgstr ""

#. type: Title ===
#: en/content/reference/special_forms.adoc:249
#, no-wrap
msgid "Vector binding destructuring"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:252
msgid ""
"Vector __binding-expr__s allow you to bind names to parts of _sequential_ "
"things (not just vectors), like vectors, lists, seqs, strings, arrays, and "
"anything that supports https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/nth[`nth`]. The basic sequential form is a vector of "
"__binding-form__s, which will be bound to successive elements from the "
"__init-expr__, looked up via `nth`. In addition, and optionally, `&` "
"followed by a __binding-form__ will cause that __binding-form__ to be bound "
"to the remainder of the sequence, i.e. that part not yet bound, looked up "
"via https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"nthnext[`nthnext`]."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:254
msgid ""
"Finally, also optional, `:as` followed by a symbol will cause that symbol to "
"be bound to the entire __init-expr__:"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:259
#, no-wrap
msgid ""
"(let [[a b c & d :as e] [1 2 3 4 5 6 7]]\n"
"  [a b c d e])\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:261
#, no-wrap
msgid "->[1 2 3 (4 5 6 7) [1 2 3 4 5 6 7]]\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:264
msgid "These forms can be nested:"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:269
#, no-wrap
msgid ""
"(let [[[x1 y1][x2 y2]] [[1 2] [3 4]]]\n"
"  [x1 y1 x2 y2])\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:271
#, no-wrap
msgid "->[1 2 3 4]\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:274
msgid "Strings work too:"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:279
#, no-wrap
msgid ""
"(let [[a b & c :as str] \"asdjhhfdas\"]\n"
"  [a b c str])\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:281
#, no-wrap
msgid "->[\\a \\s (\\d \\j \\h \\h \\f \\d \\a \\s) \"asdjhhfdas\"]\n"
msgstr ""

#. type: Title ===
#: en/content/reference/special_forms.adoc:283
#, no-wrap
msgid "Map binding destructuring"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:286
msgid ""
"Map __binding-form__s allow you to bind names to parts of associative "
"things, like maps, vectors, strings, and arrays (the latter three have "
"integer keys). It consists of a map of __binding-form-key__ pairs, each "
"symbol being bound to the value in the _init-expr_ at the key. In addition, "
"and optionally, an `:as` key in the binding form followed by a symbol will "
"cause that symbol to be bound to the entire __init-expr__. Also optionally, "
"an `:or` key in the binding form followed by another map may be used to "
"supply default values for some or all of the keys if they are not found in "
"the __init-expr__:"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:291
#, no-wrap
msgid ""
"(let [{a :a, b :b, c :c, :as m :or {a 2 b 3}}  {:a 5 :c 6}]\n"
"  [a b c m])\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:293
#, no-wrap
msgid "->[5 3 6 {:c 6, :a 5}]\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:296
msgid ""
"It is often the case that you will want to bind same-named symbols to the "
"map keys. The `:keys` directive allows you to avoid the redundancy:"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:300
#, no-wrap
msgid "(let [{fred :fred ethel :ethel lucy :lucy} m] ...\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:303
msgid "can be written:"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:307
#, no-wrap
msgid "(let [{:keys [fred ethel lucy]} m] ...\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:310
msgid ""
"As of Clojure 1.6, you can also use prefixed map keys in the map "
"destructuring form:"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:316
#, no-wrap
msgid ""
"(let [m {:x/a 1, :y/b 2}\n"
"      {:keys [x/a y/b]} m]\n"
"  (+ a b))\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:318
#, no-wrap
msgid "-> 3\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:321
msgid ""
"In the case of using prefixed keys, the bound symbol name will be the same "
"as the right-hand side of the prefixed key. You can also use auto-resolved "
"keyword forms in the `:keys` directive:"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:327
#, no-wrap
msgid ""
"(let [m {::x 42}\n"
"      {:keys [::x]} m]\n"
"  x)\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:329
#, no-wrap
msgid "-> 42\n"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:332
msgid ""
"There are similar `:strs` and `:syms` directives for matching string and "
"symbol keys, the latter also allowing prefixed symbol keys since Clojure 1.6."
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:334
msgid ""
"Clojure 1.9 adds support for directly destructuring many keys (or symbols) "
"that share the same namespace using the following destructuring key forms:"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:336
msgid ""
"`:__ns__/keys` - _ns_ specifies the default namespace for the key to look up "
"in the input"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:337
msgid "keys elements should not specify a namespace"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:338
msgid "keys elements also define new local symbols, as with `:keys`"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:339
msgid ""
"`:__ns__/syms` - _ns_ specifies the default namespace for the symbol to look "
"up in the input"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:340
msgid "syms elements should not specify a namespace"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:341
msgid "syms elements also define new local symbols, as with `:syms`"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:347
#, no-wrap
msgid ""
"(let [m #:domain{:a 1, :b 2}\n"
"      {:domain/keys [a b]} m]\n"
"  [a b])\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:349
#, no-wrap
msgid "-> [1 2]\n"
msgstr ""

#. type: Title ===
#: en/content/reference/special_forms.adoc:352
#, no-wrap
msgid "Nested destructuring"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:355
msgid ""
"Since binding forms can be nested within one another arbitrarily, you can "
"pull apart just about anything:"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:361
#, no-wrap
msgid ""
"(let [m {:j 15 :k 16 :ivec [22 23 24 25]}\n"
"      {j :j, k :k, i :i, [r s & t :as v] :ivec, :or {i 12 j 13}} m]\n"
"  [i j k r s t v])\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/special_forms.adoc:363
#, no-wrap
msgid "-> [12 15 16 22 23 (24 25) [22 23 24 25]]\n"
msgstr ""
