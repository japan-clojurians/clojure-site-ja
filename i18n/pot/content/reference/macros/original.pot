# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/content/reference/metadata.adoc:4 en/content/reference/protocols.adoc:4
#: en/content/reference/sequences.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/reference/libs.adoc:4
#: en/content/reference/transients.adoc:4
#: en/content/reference/compilation.adoc:4
#: en/content/reference/other_libraries.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/macros.adoc:4
#: en/content/reference/transducers.adoc:4 en/content/reference/refs.adoc:4
#: en/content/reference/lazy.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/evaluation.adoc:4
#: en/content/reference/other_functions.adoc:4
#: en/content/reference/reducers.adoc:4
#: en/content/reference/data_structures.adoc:4
#: en/content/reference/atoms.adoc:4 en/content/reference/repl_and_main.adoc:4
#: en/content/reference/agents.adoc:4 en/content/reference/datatypes.adoc:4
#: en/content/community/libraries.adoc:4 en/content/community/license.adoc:4
#: en/content/community/downloads_older.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/swag.adoc:4
#: en/content/404.adoc:4 en/content/privacy.adoc:4 en/content/search.adoc:4
#: en/content/about/spec.adoc:4 en/content/about/concurrent_programming.adoc:4
#: en/content/about/lisp.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/about/dynamic.adoc:4
#: en/content/about/features.adoc:4 en/content/about/rationale.adoc:4
#: en/content/about/state.adoc:4 en/content/about/clojurescript.adoc:4
#: en/content/about/functional_programming.adoc:4
#: en/content/about/clojureclr.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr ""

#. type: Title ==
#: en/content/reference/macros.adoc:1 en/content/guides/spec.adoc:782
#: en/content/guides/destructuring.adoc:522
#, no-wrap
msgid "Macros"
msgstr ""

#. type: Plain text
#: en/content/reference/macros.adoc:17
msgid ""
"Clojure has a programmatic macro system which allows the compiler to be "
"extended by user code. Macros can be used to define syntactic constructs "
"which would require primitives or built-in support in other languages. Many "
"core constructs of Clojure are not, in fact, primitives, but are normal "
"macros."
msgstr ""

#. type: Plain text
#: en/content/reference/macros.adoc:19
msgid ""
"Some macros produce simple combinations of primitive forms. For example, "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"when[`when`] combines <<special_forms#if#,`if`>> and <<special_forms#do#,"
"`do`>>:"
msgstr ""

#. type: delimited block -
#: en/content/reference/macros.adoc:24
#, no-wrap
msgid ""
"user=> (macroexpand '(when (pos? a) (println \"positive\") (/ b a)))\n"
"(if (pos? a) (do (println \"positive\") (/ b a)))\n"
msgstr ""

#. type: Plain text
#: en/content/reference/macros.adoc:27
msgid ""
"Other macros re-arrange forms in useful ways, like the `pass:[->]` macro, "
"which recursively inserts each expression as the first argument of the next "
"expression:"
msgstr ""

#. type: delimited block -
#: en/content/reference/macros.adoc:34
#, no-wrap
msgid ""
"user=> (-> {} (assoc :a 1) (assoc :b 2))\n"
"{:b 2, :a 1}\n"
"user=> (macroexpand '(-> {} (assoc :a 1) (assoc :b 2)))\n"
"(assoc (clojure.core/-> {} (assoc :a 1)) :b 2)\n"
msgstr ""

#. type: Title ==
#: en/content/reference/macros.adoc:36
#, no-wrap
msgid "Special variables"
msgstr ""

#. type: Plain text
#: en/content/reference/macros.adoc:39
msgid ""
"Two special variables are available inside defmacro for more advanced usages:"
msgstr ""

#. type: Plain text
#: en/content/reference/macros.adoc:41
msgid "`&form` - the actual form (as data) that is being invoked"
msgstr ""

#. type: Plain text
#: en/content/reference/macros.adoc:42
msgid ""
"`&env` - a map of local bindings at the point of macro expansion. The env "
"map is from symbols to objects holding compiler information about that "
"binding."
msgstr ""

#. type: Plain text
#: en/content/reference/macros.adoc:44
msgid ""
"All of the following macros are documented on the https://clojure.github.io/"
"clojure/[API] page. Many are also discussed on topic pages as noted:"
msgstr ""

#. type: Plain text
#: en/content/reference/macros.adoc:56
msgid ""
"Creating macros: https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/defmacro[defmacro] https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/definline[definline] https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/"
"macroexpand-1[macroexpand-1] https://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/macroexpand[macroexpand] Branching: https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/and[and] https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/or[or] https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/when[when] "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/when-"
"not[when-not] https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/when-let[when-let] https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/when-first[when-first] https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/if-not[if-not] https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/if-let[if-let] "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"cond[cond] https://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/condp[condp] Looping (see also <<sequences#,Sequences>>): https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/for[for] "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"doseq[doseq] https://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/dotimes[dotimes] https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/while[while] Working with vars (see also <<vars#,Vars and "
"Environment>>): https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/ns[ns] https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/declare[declare] https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/defn[defn] https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/defmacro[defmacro] https://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/definline[definline] https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"defmethod[defmethod] https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/defmulti[defmulti] https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/defn-[defn-] https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/defonce[defonce] https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/defstruct[defstruct] "
"Arranging code differently: https://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/%2E%2E[..] https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/doto[doto] https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/-%3e[pass:[->]] Dynamic scopes (see also "
"<<vars#,Vars and Environment>>): https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/binding[binding] https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/locking[locking] https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/time[time] https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/with-in-"
"str[with-in-str] https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/with-local-vars[with-local-vars] https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/with-open[with-open] https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/with-out-"
"str[with-out-str] https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/with-precision[with-precision] Creating lazy things (see "
"also <<sequences#,Sequences>>): https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/lazy-cat[lazy-cat] https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/lazy-cons[lazy-cons] https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/delay[delay] "
"<<java_interop#,Java interop>> macros: https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/%2E%2E[..] https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/amap[amap] https://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/areduce[areduce] https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/gen-class[gen-"
"class] https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"gen-interface[gen-interface] https://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/proxy[proxy] https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/proxy-super[proxy-super] https://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/memfn[memfn] Documenting code: "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"assert[assert] https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/comment[comment] https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/doc[doc] Transactions: https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/dosync[dosync] https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/io![io!]"
msgstr ""

#. type: Plain text
#: en/content/reference/macros.adoc:57
msgid ""
"A few <<special_forms#,special forms>> are actually implemented as macros, "
"primarily to provide destructuring: fn let loop"
msgstr ""
