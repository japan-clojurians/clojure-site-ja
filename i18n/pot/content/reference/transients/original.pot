# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/content/reference/metadata.adoc:4 en/content/reference/protocols.adoc:4
#: en/content/reference/sequences.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/reference/libs.adoc:4
#: en/content/reference/transients.adoc:4
#: en/content/reference/compilation.adoc:4
#: en/content/reference/other_libraries.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/macros.adoc:4
#: en/content/reference/transducers.adoc:4 en/content/reference/refs.adoc:4
#: en/content/reference/lazy.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/evaluation.adoc:4
#: en/content/reference/other_functions.adoc:4
#: en/content/reference/reducers.adoc:4
#: en/content/reference/data_structures.adoc:4
#: en/content/reference/atoms.adoc:4 en/content/reference/repl_and_main.adoc:4
#: en/content/reference/agents.adoc:4 en/content/reference/datatypes.adoc:4
#: en/content/community/libraries.adoc:4 en/content/community/license.adoc:4
#: en/content/community/downloads_older.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/swag.adoc:4
#: en/content/404.adoc:4 en/content/privacy.adoc:4 en/content/search.adoc:4
#: en/content/about/spec.adoc:4 en/content/about/concurrent_programming.adoc:4
#: en/content/about/lisp.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/about/dynamic.adoc:4
#: en/content/about/features.adoc:4 en/content/about/rationale.adoc:4
#: en/content/about/state.adoc:4 en/content/about/clojurescript.adoc:4
#: en/content/about/functional_programming.adoc:4
#: en/content/about/clojureclr.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr ""

#. type: Title =
#: en/content/reference/deps_and_cli.adoc:14
#: en/content/reference/transients.adoc:17
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:10
#: en/content/about/rationale.adoc:1
#, no-wrap
msgid "Rationale"
msgstr ""

#. type: Title =
#: en/content/reference/transients.adoc:1
#, no-wrap
msgid "Transient Data Structures"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:21
msgid ""
"_If a tree falls in the woods, does it make a sound?_ + _If a pure function "
"mutates some local data in order to produce an immutable return value, is "
"that ok?_"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:23
msgid ""
"It's an interesting question. Clojure data structures use mutation every "
"time you call, e.g. *assoc*, creating one or more arrays and mutating them, "
"before returning them for immutable use thereafter. The reason is "
"performance - you simply can't get as fast using only pure functions and "
"immutable data. Once constructed and shared however, being immutable and "
"persistent is essential to robust programs. The things Clojure mutates "
"internally are small, newly allocated arrays that constitute the internal "
"nodes of its data structures. No one ever sees the arrays."
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:25
msgid ""
"You run into a similar scenario, at a higher level, when you want to "
"initialize or transform a large persistent data structure using multiple "
"steps, none of which will be seen by any code other than the constructing/"
"transforming code. The challenge here is that the source of a transformation "
"will be an existing persistent data structure, and the result of the "
"function _will_ be shared. Copying into a traditional mutable data structure "
"and back involves O(n) copying, and the internal code is an imperative mess "
"quite unlike the rest of your Clojure code. Furthermore, there are no guards "
"against accidentally sharing or aliasing the mutable data structure, "
"especially if you need to call helper functions to do the work. In short, it "
"would be a shame if you had to leave Clojure's model in order to speed up a "
"piece of code like this. Transient data structures are a solution to this "
"optimization problem that integrates with the Clojure model and provides the "
"same thread safety guarantees you expect of Clojure."
msgstr ""

#. type: Title ==
#: en/content/reference/transients.adoc:26
#, no-wrap
msgid "How they work"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:29
msgid ""
"Transient data structures are always created from an existing persistent "
"Clojure data structure. As of Clojure 1.1.0, vectors, hash-maps, and hash-"
"sets are supported. Note that not all Clojure data structures can support "
"this feature, but most will. Lists will not, as there is no benefit to be "
"had."
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:31
msgid ""
"You obtain a transient 'copy' of a data structure by calling *transient*. "
"This creates a new transient data structure that is a copy of the source, "
"and has the same performance characteristics. In fact, it mostly _is_ the "
"source data structure, and highlights the first feature of transients - "
"creating one is O(1). It shares structure with its source, just as "
"persistent copies share structure."
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:33
msgid ""
"The second feature of transients is that creating one does not modify the "
"source, and the source cannot be modified via use of the transient. Your "
"source data is immutable and persistent as always."
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:35
msgid ""
"Transients support the read-only interface of the source, i.e. you can call "
"*nth*, *get*, *count* and fn-call a transient vector, just like a persistent "
"vector."
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:37
msgid ""
"Transients _**do not**_ support the persistent interface of the source data "
"structure. *assoc*, *conj* etc will all throw exceptions, because transients "
"are not persistent. Thus you cannot accidentally leak a transient into a "
"context requiring a persistent."
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:39
msgid ""
"Transients support a parallel set of 'changing' operations, with similar "
"names followed by *!* - *assoc!*, *conj!* etc. These do the same things as "
"their persistent counterparts except the return values are themselves "
"transient. Note in particular that transients are not designed to be bashed "
"in-place. You must capture and use the return value in the next call. In "
"this way, they support the same code structure as the functional persistent "
"code they replace. As the example will show, this will allow you to easily "
"enhance the performance of a piece of code without structural change."
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:41
msgid ""
"When you are finished building up your results, you can create a persistent "
"data structure by calling *persistent!* on the transient. This operation is "
"also O(1). Subsequent to calling *persistent!*, the transient should not be "
"used, and all operations will throw exceptions. This will be true also for "
"any aliases you might have created."
msgstr ""

#. type: Title ==
#: en/content/reference/transients.adoc:42 en/content/reference/refs.adoc:35
#: en/content/reference/agents.adoc:39
#, no-wrap
msgid "Example"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:45
msgid ""
"Here's a very typical example, some code that builds up a vector for return, "
"all 'changes' being local to the function. Note how the transient-using "
"version has exactly the same structure, just:"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:47
msgid "Calling *transient* on the source vector"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:48
msgid "Using *conj!* instead of *conj*"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:49
msgid "Calling *persistent!* on return"
msgstr ""

#. type: delimited block -
#: en/content/reference/transients.adoc:56
#, no-wrap
msgid ""
"(defn vrange [n]\n"
"  (loop [i 0 v []]\n"
"    (if (< i n)\n"
"      (recur (inc i) (conj v i))\n"
"      v)))\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/transients.adoc:62
#, no-wrap
msgid ""
"(defn vrange2 [n]\n"
"  (loop [i 0 v (transient [])]\n"
"    (if (< i n)\n"
"      (recur (inc i) (conj! v i))\n"
"      (persistent! v))))\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/transients.adoc:66
#, no-wrap
msgid ""
";; benchmarked (Java 1.8, Clojure 1.7)\n"
"(def v (vrange 1000000))    ;; 73.7 ms\n"
"(def v2 (vrange2 1000000))  ;; 19.7 ms\n"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:68
msgid "Oh, yeah, _**transients are fast!**_"
msgstr ""

#. type: Title ==
#: en/content/reference/transients.adoc:69
#, no-wrap
msgid "Concurrent use"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:72
msgid ""
"That's all there is to using transients, but they have another important "
"constraint: *Transients require thread isolation.* Because each result of a "
"transient operation shares (mutable) structure with the previous, it is an "
"error if more than one thread manipulates a transient at once. Use of a "
"particular transient instance should be controlled either by using it in an "
"single-threaded scope, or in a framework that enforces this."
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:74
msgid ""
"In Clojure 1.6 and earlier, transients would detect any (read or write) use "
"from a thread other than the one that created them and throw an exception. "
"That check was removed in 1.7 to allow for more flexible use in frameworks "
"like core.async go blocks that enforce the single-threaded constraint via "
"other means."
msgstr ""

#. type: Title ==
#: en/content/reference/transients.adoc:75
#: en/content/guides/comparators.adoc:12 en/content/about/state.adoc:74
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:78
msgid ""
"Transients provide a high-performance optimization of functional data-"
"structure-building code that works with Clojure's data structures and "
"provides critical safety guarantees."
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:81
msgid "Single-path use"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:82
msgid "Thread isolation - enforced"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:83
msgid "O(1) creation from persistent data structures"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:84
msgid "Shares structure with persistent source"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:85
msgid ""
"O(1) creation of persistent data structure when editing session finished"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:86
msgid "Same code structure as functional version"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:87
msgid "Capture return value, use for next call"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:88
msgid "Don't bash in place"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:89
msgid "Not persistent, so you can't hang onto interim values or alias"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:90
msgid "Can't use after returning a persistent version"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:91
msgid "Fast"
msgstr ""

#. type: Plain text
#: en/content/reference/transients.adoc:92
msgid ""
"Transient persistent vectors, hash-maps, and hash-sets were added in Clojure "
"1.1."
msgstr ""
