# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/content/reference/metadata.adoc:4 en/content/reference/protocols.adoc:4
#: en/content/reference/sequences.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/reference/libs.adoc:4
#: en/content/reference/transients.adoc:4
#: en/content/reference/compilation.adoc:4
#: en/content/reference/other_libraries.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/macros.adoc:4
#: en/content/reference/transducers.adoc:4 en/content/reference/refs.adoc:4
#: en/content/reference/lazy.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/evaluation.adoc:4
#: en/content/reference/other_functions.adoc:4
#: en/content/reference/reducers.adoc:4
#: en/content/reference/data_structures.adoc:4
#: en/content/reference/atoms.adoc:4 en/content/reference/repl_and_main.adoc:4
#: en/content/reference/agents.adoc:4 en/content/reference/datatypes.adoc:4
#: en/content/community/libraries.adoc:4 en/content/community/license.adoc:4
#: en/content/community/downloads_older.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/swag.adoc:4
#: en/content/404.adoc:4 en/content/privacy.adoc:4 en/content/search.adoc:4
#: en/content/about/spec.adoc:4 en/content/about/concurrent_programming.adoc:4
#: en/content/about/lisp.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/about/dynamic.adoc:4
#: en/content/about/features.adoc:4 en/content/about/rationale.adoc:4
#: en/content/about/state.adoc:4 en/content/about/clojurescript.adoc:4
#: en/content/about/functional_programming.adoc:4
#: en/content/about/clojureclr.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr ""

#. type: Title =
#: en/content/reference/lazy.adoc:1
#, no-wrap
msgid "Making Clojure Lazier"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:14
msgid ""
"_(Note: this page describes the changes made in the last large update to "
"sequences, when Rich was also exploring an alternative called streams. Treat "
"this page as a useful historical record of these design decisions, rather "
"than as reference documentation.)_"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:16
msgid "In working on streams a few things became evident:"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:18
msgid "stream code is ugly and imperative"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:19
msgid "even when made safe, still ugly, stateful"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:20
msgid "streams support full laziness"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:21
msgid "this ends up being extremely nice"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:22
msgid ""
"Integrating streams transparently (i.e. not having both map and map-stream) "
"would require a change, to relax the contract of the core sequence functions "
"(map, filter etc)"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:23
msgid ""
"If I am going to do that, could I achieve the same full laziness while "
"keeping the beautiful recursive style of Clojure?"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:24
msgid "while being substantially compatible with existing code"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:25
msgid "Yes!"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:26
msgid "but - ideally some names should change"
msgstr ""

#. type: Title ===
#: en/content/reference/lazy.adoc:27
#, no-wrap
msgid "The current seq model"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:30
msgid "Originally modeled on Common Lisp's cons"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:31
msgid "Either you have a seq, with a valid first, or nothing (nil)"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:32
msgid "A seq is like a logical cursor"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:33
msgid "rest is fundamentally eager"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:34
msgid "returns another seq or nil"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:35
msgid ""
"needs to determine if there is any more in order to determine if return "
"value is nil"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:36
msgid ""
"lazy-cons can delay the calculation of first/rest, but not the determination "
"if there is a rest"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:37
msgid ""
"determining that often requires 'pulling' on an inner seq, reducing "
"effective laziness"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:38
msgid "sequence functions currently return a seq or nil"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:40
msgid ""
"The eagerness of *rest* means the sequence functions are not fully lazy, "
"they need to at least determine if there is a first."
msgstr ""

#. type: Title ===
#: en/content/reference/lazy.adoc:41
#, no-wrap
msgid "Enhancing the seq model - a third operation on seqs - 'next'"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:44
msgid ""
"_**Changed:**_ (*rest* aseq) - returns a possibly empty seq, _never nil_"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:45 en/content/reference/lazy.adoc:58
#: en/content/reference/lazy.adoc:63
msgid "calls seq on arg if not already a seq"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:46
msgid "the returned seq may be empty"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:47
msgid "will print (), but not a single sentinel object"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:48
msgid "never returns nil"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:49
msgid "currently not enforced on 3rd-party seqs"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:50
msgid "a (possibly) delayed path to the remaining items, if any"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:51
msgid "_**Changed**_: seqs can be empty"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:52
msgid "always an ISeq"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:53
msgid "_**Changed**_: the *seq* function - no longer an identity for ISeqs"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:54
msgid "still returns either a seq or nil"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:55
msgid ""
"(seq aseq) -> ___**no longer an identity, if aseq empty returns nil**___"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:56 en/content/reference/lazy.adoc:60
msgid "still works on nil"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:57
msgid "the *first* function doesn't change"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:59
msgid "returns first item"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:61
msgid "_**New**:_ the *next* function does what *rest* used to do"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:62
msgid "returns the next seq, if any, else nil"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:64
msgid "(next aseq) === (seq (rest aseq))"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:65
msgid "works on nil"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:66
msgid "_**Changed**_: seq?"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:67
msgid "(seq? ()) -> true"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:68
msgid "_**Changed:**_ Sequence fns (map, filter etc) return seqs, but not nil"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:69
msgid "You'll need to call seq on their return value in order to get a seq/nil"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:70
msgid "seq also serves as test for end, already idiomatic"
msgstr ""

#. type: delimited block -
#: en/content/reference/lazy.adoc:75
#, no-wrap
msgid ""
"(when (seq coll)\n"
"  ...)\n"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:77
msgid "allows full laziness"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:78
msgid "doesn't support nil punning"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:79
msgid "since sequence fns no longer return seq/nil"
msgstr ""

#. type: Title ===
#: en/content/reference/lazy.adoc:80
#, no-wrap
msgid "Recipe - How to write lazy sequence functions in new model"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:83
msgid "Goodbye lazy-cons, hello lazy-seq"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:84
msgid "lazy-cons is gone"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:85
msgid "new laziness macro - _**lazy-seq**_"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:86
msgid "takes a body that yields a seq, nil or anything seq-able"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:87
msgid "returns a logical collection that implements seq by calling the body"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:88
msgid "invokes the body only the first time seq is called on it, caches result"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:89
msgid "will call seq on the body's return value if not already a seq or nil"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:90
msgid ""
"The net effect is the creation of a virtual collection that does no work "
"until seq is called upon it - fully delayed"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:91
msgid "Supports all collection ops"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:92
msgid "Can be empty - e.g. calling seq on it can return nil"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:93
msgid "when empty will print as ()"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:94
msgid "lazy-seq goes at top level of lazy sequence function"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:95
msgid "instead of nested lazy-cons"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:96
msgid "inside, use a normal cons call"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:97
msgid "won't be created until needed"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:98
msgid "if consuming another seq, use rest instead of next"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:100
msgid "The old way:"
msgstr ""

#. type: delimited block -
#: en/content/reference/lazy.adoc:108
#, no-wrap
msgid ""
"(defn map\n"
"  ([f coll]\n"
"   (when (seq coll)\n"
"     (lazy-cons (f (first coll)) (map f (rest coll)))))\n"
"...\n"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:111
msgid "The new way:"
msgstr ""

#. type: delimited block -
#: en/content/reference/lazy.adoc:120
#, no-wrap
msgid ""
"(defn map\n"
"  ([f coll]\n"
"   (lazy-seq\n"
"    (when-let [s (seq coll)]\n"
"      (cons (f (first s)) (map f (rest s))))))\n"
"...\n"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:123
msgid ""
"Note the use of when-let, which grabs the seq once, for subsequent use in "
"first and rest, even though first/rest call seq on their argument. This has "
"a performance benefit in this new model."
msgstr ""

#. type: Title ===
#: en/content/reference/lazy.adoc:124
#, no-wrap
msgid "The victim - nil punning"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:127
msgid ""
"One of the nice things about CL's cons using nil for end-of-list is that, "
"when coupled with nil's testability in conditionals, cons-returning "
"functions could be used like predicates. Now only *seq* and *next* can be "
"used in that manner - map, filter etc cannot. Note that much of the economy "
"of the seq/nil dyad still applies, e.g. the use of when in map above."
msgstr ""

#. type: Title ===
#: en/content/reference/lazy.adoc:128
#, no-wrap
msgid "Extension ISeqs"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:131
msgid ""
"If you are extending ISeq you'll need to support *ISeq.more()* (the "
"underpinnings of rest). Fortunately, most ISeq extenders derive from ASeq, "
"which defines *more()* in terms of *next*. If you derive your seq from ASeq, "
"_don't define more()_, use the version supplied by ASeq. Just rename your "
"rest() method to next()."
msgstr ""

#. type: Title ===
#: en/content/reference/lazy.adoc:132
#, no-wrap
msgid "Recipe - Porting"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:135
msgid ""
"To move to the new model you'll need to take the following steps, in this "
"order:"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:137
msgid "Rename all your calls to *rest* to call *next*"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:138
msgid ""
"If you were defining your own lazy sequence functions, using *lazy-cons*, "
"switch them over to *lazy-seq* using the recipe above. Make sure to call "
"*rest* and not *next* in your recursive call."
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:139
msgid ""
"Audit your code for nil-punning. The lazy branch has supports compilation in "
"a debug mode that asserts if you try to test the truth value of a lazy "
"sequence in a conditional, and will throw an exception if you do. Just build "
"clojure like so:"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:140
msgid "ant -Dclojure.assert-if-lazy-seq=true"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:141
msgid "Then, nil puns like the following will throw exceptions:"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:142
msgid "(when (filter neg? [1 2]) :all-pos)"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:143
msgid "(not (concat))"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:144
msgid "(if (rest (seq [])) 1 2)"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:145
msgid ""
"In all cases you can fix a nil pun by wrapping the sequence with a seq call:"
msgstr ""

#. type: delimited block -
#: en/content/reference/lazy.adoc:150
#, no-wrap
msgid ""
"(when (seq (filter neg? [1 2])) :all-pos)\n"
"-> nil\n"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:152
msgid ""
"After you are done, rebuild without the flag, as it will slow things down."
msgstr ""

#. type: Title ===
#: en/content/reference/lazy.adoc:153
#, no-wrap
msgid "Don't hang (onto) your head"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:156
msgid ""
"Recursively defined lazy sequence functions are elegant and easy to "
"understand. They can be very memory efficient, allowing you to work with "
"data sources that might not fit in memory, because only the part of the data "
"structure in current use need be in memory. It could be tricky at times to "
"determine which parts were currently in use, as they might still be "
"referenced by local variables. Clojure does local-variable clearing on tail "
"calls to ensure that no lingering references remain on the stack, but there "
"was one remaining case - closed-over locals, that was difficult to control, "
"especially when using a macro like lazy-seq which creates a closure on your "
"behalf."
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:158
msgid "Consider the original, not fully lazy, definition of filter:"
msgstr ""

#. type: delimited block -
#: en/content/reference/lazy.adoc:169
#, no-wrap
msgid ""
"(defn filter\n"
"  \"Returns a lazy seq of the items in coll for which\n"
"  (pred item) returns true. pred must be free of side-effects.\"\n"
"  [pred coll]\n"
"    (when (seq coll)\n"
"      (if (pred (first coll))\n"
"        (lazy-cons (first coll) (filter pred (rest coll)))\n"
"        (recur pred (rest coll)))))\n"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:172
msgid ""
"By recurring to the fn itself, it is effectively erasing the coll argument "
"each iteration, so it looks like it wouldn't retain coll while skipping "
"elements not matching the predicate. The problem is that sometimes the call "
"to filter is in the lazy-cons, which expands into a closure that closes over "
"coll, thus retaining it while the looping occurs, and there is nothing the "
"called function can do about it. This means that expressions like:"
msgstr ""

#. type: delimited block -
#: en/content/reference/lazy.adoc:176
#, no-wrap
msgid "(filter #(= % 20) (map inc (range 10000000)))\n"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:178
msgid ""
"could cause out of memory exceptions. The only way to avoid it was to "
"rewrite filter using mutation. Bleh."
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:180
msgid "The new filter looks like this:"
msgstr ""

#. type: delimited block -
#: en/content/reference/lazy.adoc:193
#, no-wrap
msgid ""
"(defn filter\n"
"  \"Returns a lazy sequence of the items in coll for which\n"
"  (pred item) returns true. pred must be free of side-effects.\"\n"
"  [pred coll]\n"
"  (let [step (fn [p c]\n"
"                 (when-let [s (seq c)]\n"
"                   (if (p (first s))\n"
"                     (cons (first s) (filter p (rest s)))\n"
"                     (recur p (rest s)))))]\n"
"    (lazy-seq (step pred coll))))\n"
msgstr ""

#. type: Plain text
#: en/content/reference/lazy.adoc:195
msgid ""
"The body of the old filter has been put in a helper fn, and lazy-cons "
"replaced with cons, then the whole call is wrapped in a lazy-seq, following "
"the recipe above. However lazy-seq also creates a closure which closes over "
"coll. Without some enhancement, this filter, while lazier, will have the "
"same memory footprint as the old. The new lazy branch contains a compiler "
"enhancement for this and similar scenarios. *lazy-seq* and *delay* both "
"perform closed-over local clearing on the tail call of their body, ensuring "
"no references remain in the closure itself when the tail-call executes. They "
"can do this because they cache the results, and thus know the closure will "
"be invoked only once. Thus the lazy branch has no problems with the filter "
"expression above, and you can use similar techniques to control memory usage "
"in your own lazy functions."
msgstr ""
