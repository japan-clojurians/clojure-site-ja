# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/content/reference/libs.adoc:4 en/content/reference/data_structures.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/reference/agents.adoc:4
#: en/content/reference/lazy.adoc:4 en/content/reference/transients.adoc:4
#: en/content/reference/macros.adoc:4 en/content/reference/transducers.adoc:4
#: en/content/reference/atoms.adoc:4
#: en/content/reference/other_functions.adoc:4
#: en/content/reference/datatypes.adoc:4
#: en/content/reference/repl_and_main.adoc:4
#: en/content/reference/protocols.adoc:4
#: en/content/reference/other_libraries.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/refs.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/sequences.adoc:4 en/content/reference/reducers.adoc:4
#: en/content/reference/metadata.adoc:4 en/content/reference/evaluation.adoc:4
#: en/content/reference/compilation.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/license.adoc:4
#: en/content/community/downloads_older.adoc:4 en/content/community/swag.adoc:4
#: en/content/community/libraries.adoc:4 en/content/404.adoc:4
#: en/content/about/spec.adoc:4 en/content/about/clojureclr.adoc:4
#: en/content/about/dynamic.adoc:4
#: en/content/about/concurrent_programming.adoc:4
#: en/content/about/functional_programming.adoc:4 en/content/about/state.adoc:4
#: en/content/about/jvm_hosted.adoc:4 en/content/about/clojurescript.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/about/lisp.adoc:4
#: en/content/about/rationale.adoc:4 en/content/about/features.adoc:4
#: en/content/privacy.adoc:4 en/content/search.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr ""

#. type: Title =
#: en/content/reference/transients.adoc:17
#: en/content/reference/deps_and_cli.adoc:14
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:10
#: en/content/about/rationale.adoc:1
#, no-wrap
msgid "Rationale"
msgstr ""

#. type: Plain text
#: en/content/guides/guides.adoc:30 en/content/about/rationale.adoc:68
#, no-wrap
msgid "Libraries"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:15
msgid ""
"Customers and stakeholders have substantial investments in, and are "
"comfortable with the performance, security and stability of, industry-"
"standard platforms like the JVM. While Java developers may envy the "
"succinctness, flexibility and productivity of dynamic languages, they have "
"concerns about running on customer-approved infrastructure, access to their "
"existing code base and libraries, and performance. In addition, they face "
"ongoing problems dealing with concurrency using native threads and locking. "
"Clojure is an effort in pragmatic dynamic language design in this context. "
"It endeavors to be a general-purpose language suitable in those areas where "
"Java is suitable. It reflects the reality that, for the concurrent "
"programming future, pervasive, unmoderated mutation simply has to go."
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:17
msgid ""
"Clojure meets its goals by: embracing an industry-standard, open platform - "
"the JVM; modernizing a venerable language - Lisp; fostering functional "
"programming with immutable persistent data structures; and providing built-"
"in concurrency support via software transactional memory and asynchronous "
"agents. The result is robust, practical, and fast."
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:19
msgid "Clojure has a distinctive approach to <<state#,state and identity>>."
msgstr ""

#. type: Title ==
#: en/content/about/rationale.adoc:20
#, no-wrap
msgid "Why Clojure?"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:23
msgid ""
"Why did I write yet another programming language? Basically because I wanted:"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:25
msgid "A Lisp"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:26
msgid "for Functional Programming"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:27
msgid "symbiotic with an established Platform"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:28
msgid "designed for Concurrency"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:30
msgid ""
"and couldn't find one. Here's an outline of some of the motivating ideas "
"behind Clojure."
msgstr ""

#. type: Title ==
#: en/content/about/rationale.adoc:31
#, no-wrap
msgid "Lisp is a good thing"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:34
msgid "Often emulated/pillaged, still not duplicated"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:35
msgid "Lambda calculus yields an extremely small core"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:36
msgid "Almost no syntax"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:37
msgid "Core advantage still code-as-data and syntactic abstraction"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:38
msgid "What about the standard Lisps (Common Lisp and Scheme)?"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:39
msgid "Slow/no innovation post standardization"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:40
msgid "Core data structures mutable, not extensible"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:41
msgid "No concurrency in specs"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:42
msgid "Good implementations already exist for JVM (ABCL, Kawa, SISC et al)"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:43
msgid "Standard Lisps are their own platforms"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:44
msgid "Clojure is a Lisp not constrained by backwards compatibility"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:45
msgid "Extends the code-as-data paradigm to maps and vectors"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:46
msgid "Defaults to immutability"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:47
msgid "Core data structures are extensible abstractions"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:48
msgid "Embraces a platform (JVM)"
msgstr ""

#. type: Title ==
#: en/content/about/rationale.adoc:49
#, no-wrap
msgid "Functional programming is a good thing"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:52
msgid "Immutable data + first-class functions"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:53
msgid "Could always be done in Lisp, by discipline/convention"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:54
msgid ""
"But if a data structure _can_ be mutated, dangerous to presume it won't be"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:55
msgid ""
"In traditional Lisp, only the list data structure is structurally recursive"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:56
msgid "Pure functional languages tend to strongly static types"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:57
msgid "Not for everyone, or every task"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:58
msgid "Clojure is a functional language with a dynamic emphasis"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:59
msgid "All data structures immutable & persistent, supporting recursion"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:60
msgid "Heterogeneous collections, return types"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:61
msgid "Dynamic polymorphism"
msgstr ""

#. type: Title ==
#: en/content/about/rationale.adoc:62
#, no-wrap
msgid "Languages and Platforms"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:65
msgid "VMs, not OSes, are the platforms of the future, providing:"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:66
msgid "Type system"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:67
msgid "Dynamic enforcement and safety"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:69
msgid "Abstract away OSes"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:70
msgid "_Huge_ set of facilities"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:71
msgid "Built-in and 3rd-party"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:72
msgid "Memory and other resource management"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:73
msgid "GC is platform, not language, facility"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:74
msgid "Bytecode + JIT compilation"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:75
msgid "Abstracts away hardware"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:76
msgid "Language as platform vs. language + platform"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:77
msgid "Old way - each language defines its own runtime"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:78
msgid "GC, bytecode, type system, libraries etc"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:79
msgid "New way (JVM, .Net)"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:80
msgid "Common runtime independent of language"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:81
msgid "Language built for platform vs language ported-to platform"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:82
msgid "Many new languages still take 'Language as platform' approach"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:83
msgid "When ported, have platform-on-platform issues"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:84
msgid "Memory management, type-system, threading issues"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:85
msgid "Library duplication"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:86
msgid ""
"If original language based on C, some extension libraries written in C don't "
"come over"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:87
msgid "Platforms are dictated by clients"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:88
msgid "'Must run on JVM' or .Net vs 'must run on Unix' or Windows"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:89
msgid "JVM has established track record and trust level"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:90
msgid "Now also open source"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:91
msgid "Interop with other code required"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:92
msgid "C linkage insufficient these days"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:93
msgid "Java/JVM _is_ language + platform"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:94
msgid ""
"Not the original story, but other languages for JVM always existed, now "
"embraced by Sun"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:95
msgid "Java can be tedious, insufficiently expressive"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:96
msgid "Lack of first-class functions, no type inference, etc"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:97
msgid "Ability to call/consume Java is critical"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:98
msgid "Clojure is the language, JVM the platform"
msgstr ""

#. type: Title ==
#: en/content/about/rationale.adoc:99
#, no-wrap
msgid "Object Orientation is overrated"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:102
msgid "Born of simulation, now used for everything, even when inappropriate"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:103
msgid ""
"Encouraged by Java/C# in all situations, due to their lack of (idiomatic) "
"support for anything else"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:104
msgid "Mutable stateful objects are the new spaghetti code"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:105
msgid "Hard to understand, test, reason about"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:106
msgid "Concurrency disaster"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:107
msgid "Inheritance is _not_ the only way to do polymorphism"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:108
msgid ""
"\"It is better to have 100 functions operate on one data structure than to "
"have 10 functions operate on 10 data structures.\" - Alan J. Perlis"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:109
msgid ""
"Clojure models its data structures as immutable objects represented by "
"interfaces, and otherwise does not offer its own class system."
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:110
msgid ""
"Many functions defined on few primary data structures (seq, map, vector, "
"set)."
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:111
msgid "Write Java in Java, consume and extend Java from Clojure."
msgstr ""

#. type: Title ==
#: en/content/about/rationale.adoc:112
#, no-wrap
msgid "Polymorphism is a good thing"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:115
msgid "Switch statements, structural matching etc yield brittle systems"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:116
msgid "Polymorphism yields extensible, flexible systems"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:117
msgid "Clojure multimethods decouple polymorphism from OO and types"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:118
msgid "Supports multiple taxonomies"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:119
msgid "Dispatches via static, dynamic or external properties, metadata, etc"
msgstr ""

#. type: Title ==
#: en/content/about/rationale.adoc:120
#, no-wrap
msgid "Concurrency and the multi-core future"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:123
msgid "Immutability makes much of the problem go away"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:124
msgid "Share freely between threads"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:125
msgid ""
"But changing state a reality for simulations and for in-program proxies to "
"the outside world"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:126
msgid "Locking is too hard to get right over and over again"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:127
msgid ""
"Clojure's software transactional memory and agent systems do the hard part"
msgstr ""

#. type: Plain text
#: en/content/about/rationale.adoc:128
msgid ""
"In short, I think Clojure occupies a unique niche as a functional Lisp for "
"the JVM with strong concurrency support. Check out some of the <<features#,"
"features>> or <<xref/../../guides/getting_started#,get started with "
"Clojure>>."
msgstr ""
