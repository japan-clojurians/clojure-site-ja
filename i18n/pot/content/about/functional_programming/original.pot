# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/content/reference/metadata.adoc:4 en/content/reference/protocols.adoc:4
#: en/content/reference/sequences.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/reference/libs.adoc:4
#: en/content/reference/transients.adoc:4
#: en/content/reference/compilation.adoc:4
#: en/content/reference/other_libraries.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/macros.adoc:4
#: en/content/reference/transducers.adoc:4 en/content/reference/refs.adoc:4
#: en/content/reference/lazy.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/evaluation.adoc:4
#: en/content/reference/other_functions.adoc:4
#: en/content/reference/reducers.adoc:4
#: en/content/reference/data_structures.adoc:4
#: en/content/reference/atoms.adoc:4 en/content/reference/repl_and_main.adoc:4
#: en/content/reference/agents.adoc:4 en/content/reference/datatypes.adoc:4
#: en/content/community/libraries.adoc:4 en/content/community/license.adoc:4
#: en/content/community/downloads_older.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/swag.adoc:4
#: en/content/404.adoc:4 en/content/privacy.adoc:4 en/content/search.adoc:4
#: en/content/about/spec.adoc:4 en/content/about/concurrent_programming.adoc:4
#: en/content/about/lisp.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/about/dynamic.adoc:4
#: en/content/about/features.adoc:4 en/content/about/rationale.adoc:4
#: en/content/about/state.adoc:4 en/content/about/clojurescript.adoc:4
#: en/content/about/functional_programming.adoc:4
#: en/content/about/clojureclr.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr ""

#. type: Title =
#: en/content/about/functional_programming.adoc:1
#, no-wrap
msgid "Functional Programming"
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:17
msgid ""
"Clojure is a functional programming language. It provides the tools to avoid "
"mutable state, provides functions as first-class objects, and emphasizes "
"recursive iteration instead of side-effect based looping. Clojure is "
"_impure_, in that it doesn't force your program to be referentially "
"transparent, and doesn't strive for 'provable' programs. The philosophy "
"behind Clojure is that most parts of most programs should be functional, and "
"that programs that are more functional are more robust."
msgstr ""

#. type: Title ==
#: en/content/about/functional_programming.adoc:18
#, no-wrap
msgid "First-class functions"
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:21
msgid ""
"<<xref/../../reference/special_forms#fn#,fn>> creates a function object. It "
"yields a value like any other - you can store it in a var, pass it to "
"functions etc."
msgstr ""

#. type: delimited block -
#: en/content/about/functional_programming.adoc:27
#, no-wrap
msgid ""
"(def hello (fn [] \"Hello world\"))\n"
"-> #'user/hello\n"
"(hello)\n"
"-> \"Hello world\"\n"
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:30
msgid ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"defn[defn] is a macro that makes defining functions a little simpler.  "
"Clojure supports arity overloading in a _single_ function object, self-"
"reference, and variable-arity functions using *&*:"
msgstr ""

#. type: delimited block -
#: en/content/about/functional_programming.adoc:47
#, no-wrap
msgid ""
";trumped-up example\n"
"(defn argcount\n"
"  ([] 0)\n"
"  ([x] 1)\n"
"  ([x y] 2)\n"
"  ([x y & more] (+ (argcount x y) (count more))))\n"
"-> #'user/argcount\n"
"(argcount)\n"
"-> 0\n"
"(argcount 1)\n"
"-> 1\n"
"(argcount 1 2)\n"
"-> 2\n"
"(argcount 1 2 3 4 5)\n"
"-> 5\n"
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:49
msgid ""
"You can create local names for values inside a function using https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/let[let]. The "
"scope of any local names is lexical, so a function created in the scope of "
"local names will close over their values:"
msgstr ""

#. type: delimited block -
#: en/content/about/functional_programming.adoc:57
#, no-wrap
msgid ""
"(defn make-adder [x]\n"
"  (let [y x]\n"
"    (fn [z] (+ y z))))\n"
"(def add2 (make-adder 2))\n"
"(add2 4)\n"
"-> 6\n"
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:59
#, no-wrap
msgid "*Locals created with https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/let[let] are not variables. Once created their values never change!*\n"
msgstr ""

#. type: Title ==
#: en/content/about/functional_programming.adoc:61
#, no-wrap
msgid "Immutable Data Structures"
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:63
msgid ""
"The easiest way to avoid mutating state is to use immutable <<xref/../../"
"reference/data_structures#,data structures>>. Clojure provides a set of "
"immutable lists, vectors, sets and maps. Since they can't be changed, "
"'adding' or 'removing' something from an immutable collection means creating "
"a new collection just like the old one but with the needed change. "
"_Persistence_ is a term used to describe the property wherein the old "
"version of the collection is still available after the 'change', and that "
"the collection maintains its performance guarantees for most operations. "
"Specifically, this means that the new version can't be created using a full "
"copy, since that would require linear time. Inevitably, persistent "
"collections are implemented using linked data structures, so that the new "
"versions can share structure with the prior version. Singly-linked lists and "
"trees are the basic functional data structures, to which Clojure adds a hash "
"map, set and vector both based upon array mapped hash tries. The collections "
"have readable representations and common interfaces:"
msgstr ""

#. type: delimited block -
#: en/content/about/functional_programming.adoc:77
#, no-wrap
msgid ""
"(let [my-vector [1 2 3 4]\n"
"      my-map {:fred \"ethel\"}\n"
"      my-list (list 4 3 2 1)]\n"
"  (list\n"
"    (conj my-vector 5)\n"
"    (assoc my-map :ricky \"lucy\")\n"
"    (conj my-list 5)\n"
"    ;the originals are intact\n"
"    my-vector\n"
"    my-map\n"
"    my-list))\n"
"-> ([1 2 3 4 5] {:ricky \"lucy\", :fred \"ethel\"} (5 4 3 2 1) [1 2 3 4] {:fred \"ethel\"} (4 3 2 1))\n"
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:79
msgid ""
"Applications often need to associate attributes and other data about data "
"that is orthogonal to the logical value of the data. Clojure provides direct "
"support for this <<xref/../../reference/metadata#,metadata>>. Symbols, and "
"all of the collections, support a metadata map. It can be accessed with the "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"meta[meta] function. Metadata does _not_ impact equality semantics, nor will "
"metadata be seen in operations on the value of a collection. Metadata can be "
"read, and can be printed."
msgstr ""

#. type: delimited block -
#: en/content/about/functional_programming.adoc:87
#, no-wrap
msgid ""
"(def v [1 2 3])\n"
"(def attributed-v (with-meta v {:source :trusted}))\n"
"(:source (meta attributed-v))\n"
"-> :trusted\n"
"(= v attributed-v)\n"
"-> true\n"
msgstr ""

#. type: Title ==
#: en/content/about/functional_programming.adoc:89
#, no-wrap
msgid "Extensible Abstractions"
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:92
msgid ""
"Clojure uses Java interfaces to define its core data structures. This allows "
"for extensions of Clojure to new concrete implementations of these "
"interfaces, and the library functions will work with these extensions. This "
"is a big improvement vs. hardwiring a language to the concrete "
"implementations of its data types."
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:94
msgid ""
"A good example of this is the <<xref/../../reference/sequences#,seq>> "
"interface. By making the core Lisp list construct into an abstraction, a "
"wealth of library functions are extended to any data structure that can "
"provide a sequential interface to its contents. All of the Clojure data "
"structures can provide seqs. Seqs can be used like iterators or generators "
"in other languages, with the significant advantage that seqs are immutable "
"and persistent. Seqs are extremely simple, providing a *_first_* function, "
"which return the first item in the sequence, and a *_rest_* function which "
"returns the rest of the sequence, which is itself either a seq or nil."
msgstr ""

#. type: delimited block -
#: en/content/about/functional_programming.adoc:106
#, no-wrap
msgid ""
"(let [my-vector [1 2 3 4]\n"
"      my-map {:fred \"ethel\" :ricky \"lucy\"}\n"
"      my-list (list 4 3 2 1)]\n"
"  [(first my-vector)\n"
"   (rest my-vector)\n"
"   (keys my-map)\n"
"   (vals my-map)\n"
"   (first my-list)\n"
"   (rest my-list)])\n"
"-> [1 (2 3 4) (:ricky :fred) (\"lucy\" \"ethel\") 4 (3 2 1)]\n"
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:108
msgid ""
"Many of the Clojure library functions produce and consume seqs _lazily_:"
msgstr ""

#. type: delimited block -
#: en/content/about/functional_programming.adoc:113
#, no-wrap
msgid ""
";cycle produces an 'infinite' seq!\n"
"(take 15 (cycle [1 2 3 4]))\n"
"-> (1 2 3 4 1 2 3 4 1 2 3 4 1 2 3)\n"
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:115
msgid ""
"You can define your own lazy seq-producing functions using the https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/lazy-seq[lazy-"
"seq] macro, which takes a body of expressions that will be called on demand "
"to produce a list of 0 or more items. Here's a simplified https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/take[take]:"
msgstr ""

#. type: delimited block -
#: en/content/about/functional_programming.adoc:122
#, no-wrap
msgid ""
"(defn take [n coll]\n"
"  (lazy-seq\n"
"    (when (pos? n)\n"
"      (when-let [s (seq coll)]\n"
"       (cons (first s) (take (dec n) (rest s)))))))\n"
msgstr ""

#. type: Title ==
#: en/content/about/functional_programming.adoc:124
#, no-wrap
msgid "Recursive Looping"
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:127
msgid ""
"In the absence of mutable local variables, looping and iteration must take a "
"different form than in languages with built-in _for_ or _while_ constructs "
"that are controlled by changing state. In functional languages looping and "
"iteration are replaced/implemented via recursive function calls. Many such "
"languages guarantee that function calls made in tail position do not consume "
"stack space, and thus recursive loops utilize constant space. Since Clojure "
"uses the Java calling conventions, it cannot, and does not, make the same "
"tail call optimization guarantees. Instead, it provides the <<xref/../../"
"reference/special_forms#recur,recur special operator>>, which does constant-"
"space recursive looping by rebinding and jumping to the nearest enclosing "
"loop or function frame. While not as general as tail-call-optimization, it "
"allows most of the same elegant constructs, and offers the advantage of "
"checking that calls to recur can only happen in a tail position."
msgstr ""

#. type: delimited block -
#: en/content/about/functional_programming.adoc:140
#, no-wrap
msgid ""
"(defn my-zipmap [keys vals]\n"
"  (loop [my-map {}\n"
"         my-keys (seq keys)\n"
"         my-vals (seq vals)]\n"
"    (if (and my-keys my-vals)\n"
"      (recur (assoc my-map (first my-keys) (first my-vals))\n"
"             (next my-keys)\n"
"             (next my-vals))\n"
"      my-map)))\n"
"(my-zipmap [:a :b :c] [1 2 3])\n"
"-> {:b 2, :c 3, :a 1}\n"
msgstr ""

#. type: Plain text
#: en/content/about/functional_programming.adoc:141
msgid ""
"For situations where mutual recursion is called for, recur can't be used. "
"Instead, https://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/trampoline[trampoline] may be a good option."
msgstr ""
