# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/content/reference/libs.adoc:4 en/content/reference/data_structures.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/reference/agents.adoc:4
#: en/content/reference/lazy.adoc:4 en/content/reference/transients.adoc:4
#: en/content/reference/macros.adoc:4 en/content/reference/transducers.adoc:4
#: en/content/reference/atoms.adoc:4
#: en/content/reference/other_functions.adoc:4
#: en/content/reference/datatypes.adoc:4
#: en/content/reference/repl_and_main.adoc:4
#: en/content/reference/protocols.adoc:4
#: en/content/reference/other_libraries.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/refs.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/sequences.adoc:4 en/content/reference/reducers.adoc:4
#: en/content/reference/metadata.adoc:4 en/content/reference/evaluation.adoc:4
#: en/content/reference/compilation.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/license.adoc:4
#: en/content/community/downloads_older.adoc:4 en/content/community/swag.adoc:4
#: en/content/community/libraries.adoc:4 en/content/404.adoc:4
#: en/content/about/spec.adoc:4 en/content/about/clojureclr.adoc:4
#: en/content/about/dynamic.adoc:4
#: en/content/about/concurrent_programming.adoc:4
#: en/content/about/functional_programming.adoc:4 en/content/about/state.adoc:4
#: en/content/about/jvm_hosted.adoc:4 en/content/about/clojurescript.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/about/lisp.adoc:4
#: en/content/about/rationale.adoc:4 en/content/about/features.adoc:4
#: en/content/privacy.adoc:4 en/content/search.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr ""

#. type: Title =
#: en/content/about/concurrent_programming.adoc:1
#, no-wrap
msgid "Concurrent Programming"
msgstr ""

#. type: Plain text
#: en/content/about/concurrent_programming.adoc:16
msgid ""
"Today's systems have to deal with many simultaneous tasks and leverage the "
"power of multi-core CPUs. Doing so with threads can be very difficult due to "
"the complexities of synchronization. Clojure simplifies multi-threaded "
"programming in several ways. Because the core data structures are immutable, "
"they can be shared readily between threads. However, it is often necessary "
"to have state change in a program. Clojure, being a practical language, "
"allows state to change but provides mechanism to ensure that, when it does "
"so, it remains consistent, while alleviating developers from having to avoid "
"conflicts manually using locks etc. The <<xref/../../reference/refs#,"
"software transactional memory system>> (STM), exposed through https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/dosync[dosync], "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"ref[ref], https://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/ref-set[ref-set], https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/alter[alter], et al, supports _sharing_ changing state "
"between threads in a _synchronous_ and _coordinated_ manner. The "
"<<xref/../../reference/agents#,agent>> system supports sharing changing "
"state between threads in an _asynchronous_ and _independent_ manner. The "
"<<xref/../../reference/atoms#,atoms>> system supports sharing changing state "
"between threads in a _synchronous_ and _independent_ manner. The "
"<<xref/../../reference/vars#,dynamic var system>>, exposed through "
"<<xref/../../reference/special_forms#def,def>>, https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/binding[binding], et al, supports "
"isolating changing state within threads."
msgstr ""

#. type: Plain text
#: en/content/about/concurrent_programming.adoc:18
msgid ""
"In all cases, Clojure does not replace the Java thread system, rather it "
"works with it. Clojure functions are java.util.concurrent.Callable, "
"therefore they work with the Executor framework etc."
msgstr ""

#. type: Plain text
#: en/content/about/concurrent_programming.adoc:20
msgid ""
"Most of this is covered in more detail in the https://www.youtube.com/watch?"
"v=nDAfZK8m5_8[concurrency screencast]."
msgstr ""

#. type: Plain text
#: en/content/about/concurrent_programming.adoc:22
msgid ""
"<<xref/../../reference/refs#,Refs>> are mutable references to objects. They "
"can be https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"ref-set[ref-set] or https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/alter[alter]ed to refer to different objects during "
"transactions, which are delimited by https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/dosync[dosync] blocks. All ref "
"modifications within a transaction happen or none do. Also, reads of refs "
"within a transaction reflect a snapshot of the reference world at a "
"particular point in time, i.e. each transaction is isolated from other "
"transactions. If a conflict occurs between 2 transactions trying to modify "
"the same reference, one of them will be retried. All of this occurs without "
"explicit locking."
msgstr ""

#. type: Plain text
#: en/content/about/concurrent_programming.adoc:24
msgid ""
"In this example a vector of Refs containing integers is created _(+refs+)_, "
"then a set of threads are set up _(+pool+)_ to run a number of iterations of "
"incrementing every Ref _(+tasks+)_. This creates extreme contention, but "
"yields the correct result. No locks!"
msgstr ""

#. type: delimited block -
#: en/content/about/concurrent_programming.adoc:27
#, no-wrap
msgid "(import '(java.util.concurrent Executors))\n"
msgstr ""

#. type: delimited block -
#: en/content/about/concurrent_programming.adoc:42
#, no-wrap
msgid ""
"(defn test-stm [nitems nthreads niters]\n"
"  (let [refs  (map ref (repeat nitems 0))\n"
"        pool  (Executors/newFixedThreadPool nthreads)\n"
"        tasks (map (fn [t]\n"
"                      (fn []\n"
"                        (dotimes [n niters]\n"
"                          (dosync\n"
"                            (doseq [r refs]\n"
"                              (alter r + 1 t))))))\n"
"                   (range nthreads))]\n"
"    (doseq [future (.invokeAll pool tasks)]\n"
"      (.get future))\n"
"    (.shutdown pool)\n"
"    (map deref refs)))\n"
msgstr ""

#. type: delimited block -
#: en/content/about/concurrent_programming.adoc:45
#, no-wrap
msgid ""
"(test-stm 10 10 10000)\n"
"-> (550000 550000 550000 550000 550000 550000 550000 550000 550000 550000)\n"
msgstr ""

#. type: Plain text
#: en/content/about/concurrent_programming.adoc:47
msgid ""
"In typical use refs can refer to Clojure collections, which, being "
"persistent and immutable, efficiently support simultaneous speculative "
"'modifications' by multiple transactions. Mutable objects should not be put "
"in refs."
msgstr ""

#. type: Plain text
#: en/content/about/concurrent_programming.adoc:49
msgid ""
"By default Vars are static, but per-thread bindings for Vars defined with "
"<<xref/../../reference/metadata#,metadata>> mark them as dynamic. "
"<<xref/../../reference/vars#,Dynamic vars>> are also mutable references to "
"objects. They have a (thread-shared) root binding which can be established "
"by <<xref/../../reference/special_forms#def,def>>, and can be set using "
"_*set!*_, but only if they have been bound to a new storage location thread-"
"locally using https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/binding[binding]. Those bindings and any subsequent "
"modifications to those bindings will only be seen _within_ the thread by "
"code in the dynamic scope of the binding block. Nested bindings obey a stack "
"protocol and unwind as control exits the binding block."
msgstr ""

#. type: delimited block -
#: en/content/about/concurrent_programming.adoc:52
#, no-wrap
msgid "(def ^:dynamic *v*)\n"
msgstr ""

#. type: delimited block -
#: en/content/about/concurrent_programming.adoc:54
#, no-wrap
msgid "(defn incv [n] (set! *v* (+ *v* n)))\n"
msgstr ""

#. type: delimited block -
#: en/content/about/concurrent_programming.adoc:66
#, no-wrap
msgid ""
"(defn test-vars [nthreads niters]\n"
"  (let [pool (Executors/newFixedThreadPool nthreads)\n"
"        tasks (map (fn [t]\n"
"                     #(binding [*v* 0]\n"
"                        (dotimes [n niters]\n"
"                          (incv t))\n"
"                        *v*))\n"
"                   (range nthreads))]\n"
"      (let [ret (.invokeAll pool tasks)]\n"
"        (.shutdown pool)\n"
"        (map #(.get %) ret))))\n"
msgstr ""

#. type: delimited block -
#: en/content/about/concurrent_programming.adoc:71
#, no-wrap
msgid ""
"(test-vars 10 1000000)\n"
"-> (0 1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000)\n"
"(set! *v* 4)\n"
"-> java.lang.IllegalStateException: Can't change/establish root binding of: *v* with set\n"
msgstr ""

#. type: Plain text
#: en/content/about/concurrent_programming.adoc:73
msgid ""
"Dynamic vars provide a way to communicate between different points on the "
"call stack without polluting the argument lists and return values of the "
"intervening calls. In addition, dynamic vars support a flavor of context-"
"oriented programming. Because fns defined with https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/defn[defn] are stored in vars, "
"they too can be dynamically rebound:"
msgstr ""

#. type: delimited block -
#: en/content/about/concurrent_programming.adoc:77
#, no-wrap
msgid ""
"(defn ^:dynamic say [& args]\n"
"  (apply str args))\n"
msgstr ""

#. type: delimited block -
#: en/content/about/concurrent_programming.adoc:80
#, no-wrap
msgid ""
"(defn loves [x y]\n"
"  (say x \" loves \" y))\n"
msgstr ""

#. type: delimited block -
#: en/content/about/concurrent_programming.adoc:88
#, no-wrap
msgid ""
"(defn test-rebind []\n"
"  (println (loves \"ricky\" \"lucy\"))\n"
"  (let [say-orig say]\n"
"    (binding [say (fn [& args]\n"
"                      (println \"Logging say\")\n"
"                      (apply say-orig args))]\n"
"      (println (loves \"fred\" \"ethel\")))))\n"
msgstr ""

#. type: delimited block -
#: en/content/about/concurrent_programming.adoc:90
#, no-wrap
msgid "(test-rebind)\n"
msgstr ""

#. type: delimited block -
#: en/content/about/concurrent_programming.adoc:94
#, no-wrap
msgid ""
"ricky loves lucy\n"
"Logging say\n"
"fred loves ethel\n"
msgstr ""
