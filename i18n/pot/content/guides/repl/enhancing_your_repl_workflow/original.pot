# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/content/guides/repl/annex_community_resources.adoc:4
#: en/content/guides/repl/navigating_namespaces.adoc:4
#: en/content/guides/repl/annex_troubleshooting.adoc:4
#: en/content/guides/repl/basic_usage.adoc:4
#: en/content/guides/repl/introduction.adoc:4
#: en/content/guides/repl/data_visualization_at_the_repl.adoc:4
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:4
#: en/content/guides/repl/launching_a_basic_repl.adoc:4
msgid "Valentin Waeselynck 2018-02-10"
msgstr ""

#. type: Title =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:1
#, no-wrap
msgid "Programming at the REPL: Enhancing your REPL workflow"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:20
msgid ""
"At this point, you know enough to understand how the REPL works; we'll now "
"focus on giving you a more streamlined development experience with the REPL. "
"There are a variety of things you may want to improve:"
msgstr ""

#. type: delimited block _
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:24
#, no-wrap
msgid "**_Switching between my editor and the REPL is tedious._**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:30
msgid ""
"Most Clojure programmers don't use the terminal-based REPL for everyday "
"development: instead, they use a REPL integration in their editor, which "
"enables them to write expressions directly in their editor buffer and have "
"them evaluated in the REPL with one hotkey.  See the <<editor-integrations,"
"Editor integrations>> section below for more details."
msgstr ""

#. type: delimited block _
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:34
#, no-wrap
msgid "**_I want to do small experiments in Clojure, but it's painful to write code in the default CLI tool._**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:39
msgid ""
"As mentioned above, one solution could be to use an <<editor-integrations,"
"editor integration>>.  Note that some editors such as **https://sekao.net/"
"nightcode/[Nightcode]** are designed specifically to provide a 'batteries-"
"included' experience for Clojure."
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:41
msgid ""
"However, if setting up an editor is too heavy for your taste, there also "
"exist more ergonomic terminal REPL clients:"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:45
#, no-wrap
msgid ""
"**https://github.com/bhauman/rebel-readline[rebel-readline]** is a terminal readline library made by Bruce Hauman.\n"
"If you have already installed the <<xref/../../deps_and_cli#,Clojure CLI tools>>, you can launch it in https://github.com/bhauman/rebel-readline#quick-try[one line at the terminal]\n"
"without any additional installation steps.\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:46
#, no-wrap
msgid "**https://github.com/Unrepl/unravel[Unravel]** by Paulus Esterhazy is another option, based on the https://github.com/Unrepl/unrepl[unrepl] communication protocol.\n"
msgstr ""

#. type: delimited block _
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:50
#, no-wrap
msgid "**_I need to debug a program I'm running from the REPL._**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:53
msgid ""
"The REPL can definitely help you do that: see the <<debugging-tools-and-"
"techniques,Debugging Tools and Techniques>> section below."
msgstr ""

#. type: delimited block _
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:57
#, no-wrap
msgid "**_I find myself repeating a lot of manual steps at the REPL for running my development environment._**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:62
msgid ""
"Consider creating a 'dev' namespace in your project (e.g `myproject.dev`) in "
"which you define functions for automating common development tasks (for "
"example: starting a local web server, running a database query, turning on/"
"off email sending, etc.)"
msgstr ""

#. type: delimited block _
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:67
#, no-wrap
msgid ""
"**_When I make changes to my code, it's often difficult to reflect that change in my running program:\n"
"I have to do a lot of manual work in the REPL to make it happen.._**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:71
msgid ""
"Depending on the choices you make when writing your programs, interacting "
"with them at the REPL will become more or less practical. See the <<writing-"
"repl-friendly-programs,Writing REPL-friendly programs>> section below."
msgstr ""

#. type: delimited block _
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:75
#, no-wrap
msgid "**_I would like to save my REPL sessions in a 'notebook' format._**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:78
msgid "http://gorilla-repl.org/[Gorilla REPL] was made for this very purpose."
msgstr ""

#. type: delimited block _
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:82
#, no-wrap
msgid "**_I want better data visualization than what the REPL provides._**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:86
#, no-wrap
msgid ""
"You may get improved visualization features from a specialized Clojure editor:\n"
" see the <<editor-integrations,Editor Integrations>> section below.\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:90
msgid ""
"Having said that, keep in mind that the REPL is a full-feature execution "
"environment: in particular, you can use it to launch special-purpose "
"visualization tools (including ones that you develop yourself).  For "
"instance:"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:92
#, no-wrap
msgid "**https://github.com/metasoarous/oz[oz]** is a Clojure library for displaying numerical charts\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:94
#, no-wrap
msgid ""
"**https://github.com/eggsyntax/datawalk[datawalk]** is a Clojure library for interactively exploring complex\n"
"Clojure data structures\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:96
#, no-wrap
msgid ""
"**https://github.com/walmartlabs/system-viz[system-viz]** is a Clojure library for visualizing the components of a running\n"
"Clojure system\n"
msgstr ""

#. type: delimited block _
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:100
#, no-wrap
msgid "**_I want to customize my REPL._**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:104
msgid ""
"You can usually customize how your REPL reads, evaluates and prints, but the "
"method to do it depends on your toolchain. For instance:"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:107
msgid ""
"when using a REPL started from <<xref/../../../reference/repl_and_main#,"
"clojure.main>> (as is the case when using the `clj` tool)  you can customize "
"the REPL by launching a 'sub-REPL': see https://clojure.github.io/clojure/"
"clojure.main-api.html#clojure.main/repl[clojure.main/repl]."
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:110
msgid ""
"when using https://nrepl.org[nREPL].footnote:[ At the time of writing (March "
"2018), https://nrepl.org[nREPL] is the most popular toolchain for REPL-"
"editor integration], this can be done by writing custom https://nrepl.org/"
"nrepl/design/middleware.html[middleware]."
msgstr ""

#. type: delimited block _
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:114
#, no-wrap
msgid "**_I want to use the REPL to connect to a live production system._**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:119
msgid ""
"The Clojure <<xref/../../../reference/"
"repl_and_main#launching_a_socket_server,socket server>> feature can be used "
"to that end. Tools like **https://nrepl.org[nREPL]** and **https://github."
"com/Unrepl/unrepl[unrepl]** can be used to provide a richer experience."
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:123
#, no-wrap
msgid "**_NOTE: You may not need all of this!_**\n"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:126
msgid ""
"Depending on your projects and personal taste, you will most likely use only "
"a fraction of the tools and techniques presented in this section.  It's "
"important to know that these options exist, but don't try to adopt all of "
"them at once!"
msgstr ""

#. type: Title ==
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:129
#, no-wrap
msgid "Editor integrations"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:134
msgid ""
"All <<xref/../../../community/resources#_clojure_tools,major Clojure "
"editors>> support a way of evaluating code in the REPL without leaving the "
"current code buffer, which reduces the amount of context switching a "
"programmer has to do.  Here's what it looks like (the editor used in this "
"example is https://cursive-ide.com/userguide/repl.html[Cursive]):"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:136
msgid ""
"image:/images/content/guides/repl/cursive-repl-demo.gif[\"Editor REPL "
"integration\"]"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:141
#, no-wrap
msgid ""
"**TIP:** You can wrap some expressions in a `(https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/comment[comment] ...)`\n"
"block so that they don't get evaluated by accident when the file is loaded:\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:148
#, no-wrap
msgid ""
";; you would NOT want this function to get called by accident.\n"
"(defn transfer-money!\n"
"  [from-accnt to-accnt amount]\n"
"  ...)\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:152
#, no-wrap
msgid ""
"(comment\n"
"  (transfer-money! \"accnt243251\" \"accnt324222\" 12000)\n"
"  )\n"
msgstr ""

#. type: Title ===
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:155
#, no-wrap
msgid "What to expect from an in-editor REPL integration?"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:159
msgid ""
"Here are some common editor commands provided by REPL integrations. All "
"major Clojure editors support a majority of them:"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:162
#, no-wrap
msgid ""
"**Send form before caret to REPL:** evaluate the expression before the cursor in the REPL,\n"
"in the namespace of the current file. Useful for experimenting in the context of the current namespace.\n"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:165
#, no-wrap
msgid ""
"**Send top-level form to REPL:** evaluate the biggest expression in which the cursor is currently contained\n"
"-typically a `(defn ...)` or `(def ...)` expression-in the namespace of the current file.\n"
"Useful for defining or re-defining Vars in a namespace.\n"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:166
#, no-wrap
msgid "**Load the current file in the REPL.** Useful to avoid <<_working_with_libs,loading libs manually>>.\n"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:167
#, no-wrap
msgid "**Switch the REPL's namespace to current file:** useful to avoid typing `(in-ns '...)`.\n"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:168
#, no-wrap
msgid "**Show evaluation inline:** displays the evaluation of the current expression next to it.\n"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:169
#, no-wrap
msgid "**Replace expression with its evaluation:** replaces the current expression in the editor with its evaluation (as printed by the REPL).\n"
msgstr ""

#. type: Title ==
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:171
#, no-wrap
msgid "Debugging tools and techniques"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:176
msgid ""
"While traditional debuggers can be used with Clojure, the REPL itself is a "
"powerful debugging environment, because it lets you inspect and alter the "
"flow of a running program. In this section, we'll study some tools and "
"techniques to leverage the REPL for debugging."
msgstr ""

#. type: Title ===
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:177
#, no-wrap
msgid "Printing in-flight values with `prn`"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:180
msgid ""
"`(https://clojuredocs.org/clojure.core/prn[prn] ...)` expressions can be "
"added in strategic places in your code to print intermediary values:"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:194
#, no-wrap
msgid ""
"(defn average\n"
"  \"a buggy function for computing the average of some numbers.\"\n"
"  [numbers]\n"
"  (let [sum (first numbers)\n"
"        n (count numbers)]\n"
"    (prn sum) ;; HERE printing an intermediary value\n"
"    (/ sum n)))\n"
"#'user/average\n"
"user=> (average [12 14])\n"
"12 ## HERE\n"
"6\n"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:200
#, no-wrap
msgid ""
"**TIP:** you can combine prn with the `(https://clojuredocs.org/clojure.core/doto[doto] ...)` macro, i.e `(doto MY-EXPR prn)`,\n"
"to make adding `prn` calls less invasive:\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:211
#, no-wrap
msgid ""
"(defn average\n"
"  \"a buggy function for computing the average of some numbers.\"\n"
"  [numbers]\n"
"  (let [sum (first numbers)\n"
"        n (count numbers)]\n"
"    (/\n"
"      (doto sum prn) ;; HERE\n"
"      n)))\n"
msgstr ""

#. type: Title ====
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:214
#, no-wrap
msgid "Going further: 'spying' macros"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:218
msgid ""
"Some Clojure libraries provide 'enhanced' versions of `prn` that are more "
"informative, by also printing information about the wrapped expression. For "
"example:"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:222
msgid ""
"the **https://github.com/clojure/tools.logging[tools.logging]** logging "
"library provides a http://clojure.github.io/tools.logging/#clojure.tools."
"logging/spy[spy] macro to log an expression's code along with its value"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:224
msgid ""
"the **https://github.com/dgrnbrg/spyscope[spyscope]** library lets you to "
"insert these printing calls with very lightweight syntax."
msgstr ""

#. type: Title ====
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:225
#, no-wrap
msgid "Going further: tracing libraries"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:230
msgid ""
"_Tracing_ libraries such as **https://github.com/clojure/tools.trace[tools."
"trace]** and **http://clojure-emacs.github.io/sayid/[Sayid]** can help you "
"instrument larger portions of your code, for example by automatically "
"printing all the function calls in a given namespace, or all intermediary "
"values in a given expression."
msgstr ""

#. type: Title ===
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:231
#, no-wrap
msgid "Intercepting and saving values on-the-fly"
msgstr ""

#. type: delimited block =
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:236
msgid ""
"Sometimes you want to do more with intermediary values than just print them: "
"you want to save them to conduct further experiments on them at the REPL.  "
"This can be done by inserting a `(def ...)` call inside the expression where "
"the value appears:"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:245
#, no-wrap
msgid ""
"(defn average\n"
"  [numbers]\n"
"  (let [sum (apply + numbers)\n"
"        n (count numbers)]\n"
"    (def n n) ;; FIXME remove when you're done debugging\n"
"    (/ sum n)))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:252
#, no-wrap
msgid ""
"user=> (average [1 2 3])\n"
"2\n"
"user=> n\n"
"3\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:255
msgid ""
"This 'inline-def' technique is described in more depth in https://blog."
"michielborkent.nl/2017/05/25/inline-def-debugging/[this blog post by Michiel "
"Borkent]."
msgstr ""

#. type: Title ===
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:256
#, no-wrap
msgid "Reproducing the context of an expression"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:262
msgid ""
"When debugging at the REPL, we often want to reproduce manually something "
"that our program did automatically, that is evaluating some expressions "
"inside a function body. To do that, we need to recreate the context of the "
"expressions of interest: one trick to achieve that is to define Vars (using "
"`def`) with the same names and values as the locals used by the expressions. "
"The 'physics' example below illustrates this approach:"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:268
#, no-wrap
msgid ""
"(def G 6.67408e-11)\n"
"(def earth-radius 6.371e6)\n"
"(def earth-mass 5.972e24)\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:283
#, no-wrap
msgid ""
"(defn earth-gravitational-force\n"
"  \"Computes (an approximation of) the gravitational force between Earth and an object\n"
"  of mass `m`, at distance `r` of Earth's center.\"\n"
"  [m r]\n"
"  (/\n"
"    (*\n"
"      G\n"
"      m\n"
"      (if (>= r earth-radius)\n"
"        earth-mass\n"
"        (*\n"
"          earth-mass\n"
"          (Math/pow (/ r earth-radius) 3.0))))\n"
"    (* r r)))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:286
#, no-wrap
msgid ""
";;;; calling our function for an object of 80kg at distance 5000km.\n"
"(earth-gravitational-force 80 5e6) ; => 616.5217226636292\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:291
#, no-wrap
msgid ""
";;;; recreating the context of our call\n"
"(def m 80)\n"
"(def r 5e6)\n"
";; note: the same effect could be achieved using the 'inline-def' technique described in the previous section.\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:296
#, no-wrap
msgid ""
";;;; we can now directly evaluate any expression in the function body:\n"
"(* r r) ; => 2.5E13\n"
"(>= r earth-radius) ; => false\n"
"(Math/pow (/ r earth-radius) 3.0) ; => 0.48337835316173317\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:302
msgid ""
"This technique is described in more depth in Stuart Halloway's article "
"http://blog.cognitect.com/blog/2017/6/5/repl-debugging-no-stacktrace-"
"required[REPL Debugging: No Stacktrace Required].  The **https://github.com/"
"vvvvalvalval/scope-capture[scope-capture]** library was made to automate the "
"manual task of saving and re-creating the context of an expression."
msgstr ""

#. type: Title ===
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:303
#, no-wrap
msgid "Community resources about REPL debugging"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:306
msgid ""
"https://www.clojure-toolbox.com/[The Clojure Toolbox] provides a list a "
"Clojure libraries for debugging."
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:308
msgid ""
"https://cambium.consulting/articles/2018/2/8/the-power-of-clojure-"
"debugging[The Power of Clojure: debugging] is an article by Cambium "
"Consulting which provides a list of techniques for debugging at the REPL."
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:310
msgid ""
"_Clojure From the Ground Up_ by Aphyr contains a https://aphyr.com/posts/319-"
"clojure-from-the-ground-up-debugging[chapter about debugging], presenting "
"techniques for debugging Clojure in particular and a principled approach to "
"debugging in general."
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:313
msgid ""
"In his article http://blog.cognitect.com/blog/2017/6/5/repl-debugging-no-"
"stacktrace-required[REPL Debugging: No Stacktrace Required], Stuart Halloway "
"demonstrates how the quick feedback loop at the REPL can be used to narrow "
"down the cause of a bug without using error information at all."
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:314
msgid ""
"Eli Bendersky has written some https://eli.thegreenplace.net/2017/notes-on-"
"debugging-clojure-code/#id3[Notes on debugging Clojure code]."
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:316
msgid ""
"https://www.youtube.com/watch?v=FihU5JxmnBg[Debugging with the Scientific "
"Method] is a conference talk by Stuart Halloway promoting a scientific "
"approach to debugging in general."
msgstr ""

#. type: Title ==
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:318
#, no-wrap
msgid "Writing REPL-friendly programs"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:326
msgid ""
"While interactive development at the REPL gives a lot of power to "
"programmers, it also adds new challenges: programs must be designed so that "
"they lend themselves well to REPL interaction, which is a new constraint to "
"be vigilant of when writing code.footnote:[ A similar phenomenon happens "
"with the well-known technique of https://en.wikipedia.org/wiki/"
"Software_testing[automated testing]: while testing can bring a lot of value "
"to programmers, it requires extra care to write code that is 'testable'.  "
"Just like tests, the REPL should not be an afterthought when writing Clojure "
"code.]"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:329
msgid ""
"Covering this topic extensively would take us too far for the scope of this "
"guide, so we will merely provide some tips and resources to guide your own "
"research and problem-solving."
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:333
#, no-wrap
msgid ""
"**_REPL-friendly code can be re-defined._** Code is more easily redefined when it is called via a Var\n"
"(defined e.g via `(def ...)` or `(defn ...)`), because a Var can be redefined without touching the code that calls it.\n"
"This is illustrated in the following example, which prints some numbers at a regular time interval:\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:338
#, no-wrap
msgid ""
";; Each of these 4 code examples start a loop in another thread\n"
";; which prints numbers at a regular time interval.\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:347
#, no-wrap
msgid ""
";;;; 1. NOT REPL-friendly\n"
";; We won't be able to change the way numbers are printed without restarting the REPL.\n"
"(future\n"
"  (run!\n"
"    (fn [i]\n"
"      (println i \"green bottles, standing on the wall. ♫\")\n"
"      (Thread/sleep 1000))\n"
"    (range)))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:355
#, no-wrap
msgid ""
";;;; 2. REPL-friendly\n"
";; We can easily change the way numbers are printed by re-defining print-number-and-wait.\n"
";; We can even stop the loop by having print-number-and-wait throw an Exception.\n"
"(defn print-number-and-wait\n"
"  [i]\n"
"  (println i \"green bottles, standing on the wall. ♫\")\n"
"  (Thread/sleep 1000))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:360
#, no-wrap
msgid ""
"(future\n"
"  (run!\n"
"    (fn [i] (print-number-and-wait i))\n"
"    (range)))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:368
#, no-wrap
msgid ""
";;;; 3. NOT REPL-friendly\n"
";; Unlike the above example, the loop can't be altered by re-defining print-number-and-wait,\n"
";; because the loop uses the value of print-number-and-wait, not the #'print-number-and-wait Var.\n"
"(defn print-number-and-wait\n"
"  [i]\n"
"  (println i \"green bottles, standing on the wall. ♫\")\n"
"  (Thread/sleep 1000))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:373
#, no-wrap
msgid ""
"(future\n"
"  (run!\n"
"    print-number-and-wait\n"
"    (range)))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:381
#, no-wrap
msgid ""
";;;; 4. REPL-friendly\n"
";; The following works because a Clojure Var is (conveniently) also a function,\n"
";; which consist of looking up its value (presumably a function) and calling it.\n"
"(defn print-number-and-wait\n"
"  [i]\n"
"  (println i \"green bottles, standing on the wall. ♫\")\n"
"  (Thread/sleep 1000))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:386
#, no-wrap
msgid ""
"(future\n"
"  (run!\n"
"    #'print-number-and-wait ;; mind the #' - the expression evaluates to the #'print-number-and-wait Var, not its value.\n"
"    (range)))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:391
#, no-wrap
msgid ""
"**_Beware of derived Vars._** If Var `b` is defined in terms of the value of Var `a`,\n"
"then you will need to re-define `b` each time you re-define `a`; it may be better to define\n"
"`b` as a 0-arity function which uses `a`. Example:\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:399
#, no-wrap
msgid ""
";;; NOT REPL-friendly\n"
";; if you re-define `solar-system-planets`, you have to think of re-defining `n-planets` too.\n"
"(def solar-system-planets\n"
"  \"The set of planets which orbit the Sun.\"\n"
"  #{\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"})\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:403
#, no-wrap
msgid ""
"(def n-planets\n"
"  \"The number of planets in the solar system\"\n"
"  (count solar-system-planets))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:410
#, no-wrap
msgid ""
";;;; REPL-friendly\n"
";; if you re-define `solar-system-planets`, the behaviour of `n-planets` will change accordingly.\n"
"(def solar-system-planets\n"
"  \"The set of planets which orbit the Sun.\"\n"
"  #{\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"})\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:415
#, no-wrap
msgid ""
"(defn n-planets\n"
"  \"The number of planets in the solar system\"\n"
"  []\n"
"  (count solar-system-planets))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:420
#, no-wrap
msgid ""
"**_REPL-friendly code can be reloaded._** Make sure that reloading a namespace will not alter the\n"
"behaviour of the running program. If a Var needs to be defined exactly once (which should be very rare),\n"
"consider defining it with `https://clojuredocs.org/clojure.core/defonce[defonce]`.\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:424
msgid ""
"When dealing with a codebase with many namespaces, reloading the appropriate "
"namespaces in the correct order can become difficult: the **https://github."
"com/clojure/tools.namespace[tools.namespace]** library was made to assist "
"the programmer in this task."
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:430
#, no-wrap
msgid ""
"**_Program state and source code should be kept in sync._** You usually want to make sure\n"
"that your program state reflects your source code and vice-versa, but this is not automatic.\n"
"Reloading the code is often not enough: you also need to transform the program state accordingly.\n"
"Stuart Sierra has expounded on this problem in his article http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded[My Clojure Workflow, Reloaded]\n"
"and his talk https://www.youtube.com/watch?v=13cmHf_kt-Q[Components Just Enough Structure].\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:432
msgid "This has motivated the creation of **_state management libraries:_**"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:435
#, no-wrap
msgid ""
"**https://github.com/stuartsierra/component[Component]**, which promotes a representation of program state\n"
"as a managed map of Clojure records called a *system*.\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:437
#, no-wrap
msgid ""
"**https://github.com/danielsz/system[System]** is a library on top of https://github.com/stuartsierra/component[Component]\n"
"which provides a set of ready-made components.\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:440
#, no-wrap
msgid ""
"**https://github.com/tolitius/mount[Mount]** takes a radically different approach as Component, choosing to\n"
"use Vars and namespaces as the supporting infrastructure for state.footnote:[At the time of writing,\n"
"there is controversy in the Clojure community regarding the relative merits of both approaches.]\n"
msgstr ""

#. type: Plain text
#: en/content/guides/repl/enhancing_your_repl_workflow.adoc:441
#, no-wrap
msgid ""
"**https://github.com/weavejester/integrant[Integrant]** is a more recent library which shares Component's approach\n"
"while addressing some of its perceived limitations.\n"
msgstr ""
