# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: en/content/guides/threading_macros.adoc:1
#, no-wrap
msgid "Threading Macros Guide"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:4
msgid "Paulus Esterhazy 2016-02-21"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:10
msgid ""
"Threading macros, also known as arrow macros, convert nested function calls "
"into a linear flow of function calls, improving readability."
msgstr ""

#. type: Title ===
#: en/content/guides/threading_macros.adoc:12
#, no-wrap
msgid "The thread-first macro (+++->+++)"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:18
msgid ""
"In idiomatic Clojure, pure functions transform immutable data structures "
"into a desired output format. Consider a function that applies two "
"transformations to a map:"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:23
#, no-wrap
msgid ""
"(defn transform [person]\n"
"   (update (assoc person :hair-color :gray) :age inc))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:26
#, no-wrap
msgid ""
"(transform {:name \"Socrates\", :age 39})\n"
";; => {:name \"Socrates\", :age 40, :hair-color :gray}\n"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:32
msgid ""
"`transform` is an example of a common pattern: it takes a value and applies "
"multiple transformations with each step in the pipeline taking the result of "
"the previous step as its input. It is often possible to improve code of this "
"type by rewriting it to use the thread-first macro `+++->+++`:"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:39
#, no-wrap
msgid ""
"(defn transform* [person]\n"
"   (-> person\n"
"      (assoc :hair-color :gray)\n"
"      (update :age inc)))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:44
msgid ""
"Taking an initial value as its first argument, https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/+++->+++[`+++->+++`] threads it "
"through one or more expressions."
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:46
msgid ""
"_Note: The word \"thread\" in this context (meaning passing a value through "
"a pipeline of functions) is unrelated to the concept of concurrent threads "
"of execution._"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:53
msgid ""
"Starting with the second form, the macro inserts the first value as its "
"first argument. This is repeated at each subsequent step with the result of "
"the previous computation inserted as the first argument of the next form.  "
"What looks like a function call with two arguments is in fact a call with "
"three arguments, as the threaded value is inserted just after the function "
"name. It may be helpful to mark the insertion point with three commas for "
"illustration:"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:60
#, no-wrap
msgid ""
"(defn transform* [person]\n"
"   (-> person\n"
"      (assoc ,,, :hair-color :gray)\n"
"      (update ,,, :age inc)))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:64
msgid ""
"Though not often seen in practice, this visual aid is valid Clojure syntax, "
"as commas are whitespace in Clojure."
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:72
msgid ""
"Semantically, `transform*` is equivalent to `transform`: the arrow macro "
"expands at compile time into the original code. In each case, the return "
"value of the function is the result of the last computation, the call to "
"`update`. The re-written function reads like a description of the "
"transformation: \"Take a person, increase their age, give them gray hair, "
"and return the result\". Of course in the context of immutable values, no "
"actual mutation takes place. Instead, the function simply returns a new "
"value with updated attributes."
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:75
msgid ""
"Syntactically, the threading macro also allows the reader to read the "
"functions in left to right order of application, rather than reading from "
"the innermost expression out."
msgstr ""

#. type: Title ===
#: en/content/guides/threading_macros.adoc:77
#, no-wrap
msgid "thread-last (+++->>+++) and thread-as (+++as->+++) macros"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:86
msgid ""
"The `+++->+++` macro follows a purely syntactic transformation rule: for "
"each expression, insert the threaded value between the function name and the "
"first argument. Note that the threading expressions are function calls of "
"the form `(f arg1 arg2 ...)`. A bare symbol or keyword without parentheses "
"is interpreted as a simple function invocation with a single argument. This "
"allows for a succinct chain of unary functions:"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:90
#, no-wrap
msgid "(-> person :hair-color name clojure.string/upper-case)\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:92
#: en/content/guides/threading_macros.adoc:209
#, no-wrap
msgid ";; equivalent to\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:94
#, no-wrap
msgid "(-> person (:hair-color) (name) (clojure.string/upper-case))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:100
msgid ""
"However, `+++->+++` is not universally applicable, as we do not always want "
"to insert the threaded argument in the initial position.  Consider a "
"function that computes the sum of the squares of all odd positive integers "
"below ten:"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:105
#, no-wrap
msgid ""
"(defn calculate []\n"
"   (reduce + (map #(* % %) (filter odd? (range 10)))))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:110
msgid ""
"Like `transform`, `calculate` is a pipeline of transformations, but unlike "
"the former, the threaded value appears in each function call in the final "
"position in the argument list. Instead of the thread-first macro we need to "
"use the thread-last macro https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/+++->>+++[`+++->>+++`] instead:"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:118
#, no-wrap
msgid ""
"(defn calculate* []\n"
"   (->> (range 10)\n"
"        (filter odd? ,,,)\n"
"        (map #(* % %) ,,,)\n"
"        (reduce + ,,,)))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:124
msgid ""
"Again, though usually omitted, three commas mark the place where the "
"argument will be inserted. As you can see, in forms threaded using `+++->>++"
"+` the threaded value is inserted at the end rather than the beginning of "
"the argument list."
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:129
msgid ""
"Thread-first and thread-last are used in different circumstances. Which one "
"is appropriate depends on the signature of the transformation functions. "
"Ultimately you'll need to consult the documentation of the functions used, "
"but there are a few rules of thumb:"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:133
msgid ""
"By convention, core functions that operate on sequences expect the sequence "
"as their last argument. Accordingly, pipelines containing `map`, `filter`, "
"`remove`, `reduce`, `into`, etc usually call for the `+++->>+++` macro."
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:142
msgid ""
"Core functions that operate on data structures, on the other hand, expect "
"the value they work on as their first argument. These include https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/assoc[`assoc`], "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"update[`update`], https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/dissoc[`dissoc`], https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/get[`get`] and their https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/assoc-in[`-in`] "
"variants.  Pipelines that transform maps using these functions often require "
"the `+++->+++` macro."
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:146
msgid ""
"When calling methods through <<xref/../../reference/java_interop#,Java "
"interop>>, the Java object is passed in as the first argument. In such "
"cases, `+++->+++` is useful, for example, to check a string for a prefix:"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:150
#, no-wrap
msgid "(-> a-string clojure.string/lower-case (.startsWith \"prefix\"))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:156
msgid ""
"Note also the more specialized interop macros https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/+++..+++[`..`] and https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/doto[`doto`]."
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:165
msgid ""
"Finally, there are cases where neither `+++->+++` nor `+++->>+++` are "
"applicable. A pipeline may consist of function calls with varying insertion "
"points. In these cases, you'll need to use https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/+++as->+++[`+++as->+++`], the more "
"flexible alternative. `+++as->+++` expects two fixed arguments and a "
"variable number of expressions. As with `+++->+++`, the first argument is a "
"value to be threaded through the following forms. The second argument is the "
"name of a binding. In each of the subsequent forms, the bound name can be "
"used for the prior expression's result.  This allows a value to thread into "
"any argument position, not just first or last."
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:172
#, no-wrap
msgid ""
"(as-> [:foo :bar] v\n"
"  (map name v)\n"
"  (first v)\n"
"  (.substring v 1))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:174
#, no-wrap
msgid ";; => \"oo\"\n"
msgstr ""

#. type: Title ===
#: en/content/guides/threading_macros.adoc:176
#, no-wrap
msgid "+++some->+++, +++some->>+++ and +++cond->+++"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:186
msgid ""
"Two of Clojure's more specialized threading macros, https://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/+++some->+++[`+++some->+++`] "
"and https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/++"
"+some->>+++[`+++some->>+++`], are used most commonly when interfacing with "
"Java methods. `+++some->+++` resembles `+++->+++` in that it threads a value "
"through a number of expressions. However, it also short-circuits execution "
"when an expression evaluates as `nil` at any point in the chain. One common "
"problem with arrow macros in the context of <<xref/../../reference/"
"java_interop#,Java interop>> is that Java methods do not expect to be passed "
"`nil` (`null`). One way to avoid a `NullPointerException` in these cases is "
"to add an explicit guard:"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:191
#, no-wrap
msgid ""
"(when-let [counter (:counter a-map)]\n"
"  (inc (Long/parseLong counter)))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:194
msgid "`+++some->+++` achieves the same effect more succinctly:"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:198
#, no-wrap
msgid "(some-> a-map :counter Long/parseLong inc)\n"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:203
msgid ""
"If `a-map` lacks the key `:counter`, the entire expression will evaluate to "
"`nil` rather than raising an exception. In fact, this behavior is so useful "
"that it is common to see `+++some->+++` used when threading is not required:"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:207
#, no-wrap
msgid "(some-> (compute) Long/parseLong)\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:212
#, no-wrap
msgid ""
"(when-let [a-str (compute)]\n"
"  (Long/parseLong a-str))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:223
msgid ""
"Like `+++->+++`, the macro https://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/+++cond->+++[`+++cond->+++`] takes an initial value, "
"but unlike the former, it interprets its argument list as a series of `test, "
"expr` pairs. `+++cond->+++` threads a value through the expressions but "
"skips those with failing tests. For each pair, `test` is evaluated. If the "
"result is truthy, the expression is evaluated with the threaded value "
"inserted as its first argument; otherwise evaluation proceeds with the next "
"`test, expr` pair. Note that unlike its relatives, https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/+++some->+++[`+++some->+++`] or "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"cond[`cond`], `+++cond->+++` never short-circuits evaluation, even if a test "
"evaluates to `false` or `nil`:"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:232
#, no-wrap
msgid ""
"(defn describe-number [n]\n"
"  (cond-> []\n"
"    (odd? n) (conj \"odd\")\n"
"    (even? n) (conj \"even\")\n"
"    (zero? n) (conj \"zero\")\n"
"    (pos? n) (conj \"positive\")))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/threading_macros.adoc:235
#, no-wrap
msgid ""
"(describe-number 3) ;; => [\"odd\" \"positive\"]\n"
"(describe-number 4) ;; => [\"even\" \"positive\"]\n"
msgstr ""

#. type: Plain text
#: en/content/guides/threading_macros.adoc:238
msgid ""
"`+++cond->>+++` inserts the threaded value as the last argument of each form "
"but works analogously otherwise."
msgstr ""
