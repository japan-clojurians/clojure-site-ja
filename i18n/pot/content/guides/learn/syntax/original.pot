# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ==
#: en/content/reference/reader.adoc:31 en/content/guides/learn/syntax.adoc:15
#, no-wrap
msgid "Literals"
msgstr ""

#. type: Title ==
#: en/content/reference/evaluation.adoc:1
#: en/content/guides/learn/syntax.adoc:59
#, no-wrap
msgid "Evaluation"
msgstr ""

#. type: Title ===
#: en/content/reference/other_functions.adoc:37
#: en/content/guides/learn/syntax.adoc:310
#, no-wrap
msgid "Printing"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/hashed_colls.adoc:4
#: en/content/guides/learn/syntax.adoc:4 en/content/guides/learn/flow.adoc:4
#: en/content/guides/learn/sequential_colls.adoc:4
#: en/content/guides/learn/functions.adoc:4
msgid "Alex Miller 2017-09-02"
msgstr ""

#. type: Title =
#: en/content/guides/learn/syntax.adoc:1
#, no-wrap
msgid "Learn Clojure - Syntax"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:18
msgid ""
"Below are some examples of literal representations of common primitives in "
"Clojure."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:20
msgid ""
"The `;` creates a comment to the end of the line. Sometimes multiple "
"semicolons are used to indicate header lines."
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:29
#, no-wrap
msgid ""
";; Numeric types\n"
"42              ; Long - 64-bit integer (from -2^63 to 2^63-1)\n"
"6.022e23        ; Double - double-precision 64-bit floating point\n"
"42N             ; BigInt - arbitrary precision integer\n"
"1.0M            ; BigDecimal - arbitrary precision fixed-point decimal\n"
"22/7            ; Ratio\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:33
#, no-wrap
msgid ""
";; Character types\n"
"\"hello\"         ; String\n"
"\\e              ; Character\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:43
#, no-wrap
msgid ""
";; Other types\n"
"nil             ; null value\n"
"true            ; Boolean (also, false)\n"
"#\"[0-9]+\"       ; Regular expression\n"
":alpha          ; Keyword\n"
":release/alpha  ; Keyword with namespace\n"
"map             ; Symbol\n"
"+               ; Symbol - most punctuation allowed\n"
"clojure.core/+  ; Namespaced symbol\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:46
msgid "All of the literals above are valid Clojure expressions."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:48
msgid "Clojure also includes literal syntax for four collection types:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:55
#, no-wrap
msgid ""
"'(1 2 3)     ; list \n"
"[1 2 3]      ; vector\n"
"#{1 2 3}     ; set\n"
"{:a 1, :b 2} ; map\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:58
msgid ""
"We'll talk about these in much greater detail later - for now it's enough to "
"know that these four data structures can be used to create composite data."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:62
msgid "Next we will consider how Clojure reads and evaluates expressions."
msgstr ""

#. type: Title ===
#: en/content/guides/learn/syntax.adoc:63
#, no-wrap
msgid "Traditional Evaluation (Java)"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:66
msgid ""
"image:/images/content/guides/learn/syntax/traditional-evaluation.png[\"Java "
"evaluation\"]"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:68
msgid ""
"In Java, source code (.java files) are read as characters by the compiler "
"(javac), which produces bytecode (.class files) which can be loaded by the "
"JVM."
msgstr ""

#. type: Title ===
#: en/content/guides/learn/syntax.adoc:69
#, no-wrap
msgid "Clojure Evaluation"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:72
msgid ""
"image:/images/content/guides/learn/syntax/clojure-evaluation.png[\"Clojure "
"evaluation\"]"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:74
msgid ""
"In Clojure, source code is read as characters by the <<xref/../../../"
"reference/reader#,Reader>>. The Reader may read the source either from .clj "
"files or be given a series of expressions interactively. The Reader produces "
"Clojure data. The Clojure compiler then produces the bytecode for the JVM."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:76
msgid "There are two important points here:"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:78
msgid ""
"The unit of source code is a *Clojure expression*, not a Clojure source "
"file. Source files are read as a series of expressions, just as if you typed "
"those expressions interactively at the REPL."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:79
msgid ""
"Separating the Reader and the Compiler is a key separation that makes room "
"for macros. Macros are special functions that take code (as data), and emit "
"code (as data). Can you see where a loop for macro expansion could be "
"inserted in the evaluation model?"
msgstr ""

#. type: Title ===
#: en/content/guides/learn/syntax.adoc:80
#, no-wrap
msgid "Structure vs Semantics"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:83
msgid "Consider a Clojure expression:"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:85
msgid ""
"image:/images/content/guides/learn/syntax/structure-and-semantics."
"png[\"Structure and semantics\"]"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:87
msgid ""
"This diagram illustrates the difference between syntax in green (the Clojure "
"data structure produced by the Reader) and semantics in blue (how that data "
"is understood by the Clojure runtime)."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:89
msgid ""
"Most literal Clojure forms evaluate to themselves, *except* symbols and "
"lists. Symbols are used to refer to something else and when evaluated, "
"return what they refer to. Lists (as in the diagram) are evaluated as "
"invocation."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:91
msgid ""
"In the diagram, (+ 3 4) is read as a list containing the symbol (+) and two "
"numbers (3 and 4). The first element (where + is found) can be called "
"\"function position\", that is, a place to find the thing to invoke. While "
"functions are an obvious thing to invoke, there are also a few special "
"operators known to the runtime, macros, and a handful of other invokable "
"things."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:93
msgid "Considering the evaluation of the expression above:"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:95
msgid "3 and 4 evaluate to themselves (longs)"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:96
msgid "+ evaluates to a function that implements `+`"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:97
msgid ""
"evaluating the list will invoke the `+` function with 3 and 4 as arguments"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:99
msgid ""
"Many languages have both statements and expressions, where statements have "
"some stateful effect but do not return a value. In Clojure, everything is an "
"expression that evaluates to a value. Some expressions (but not most) also "
"have side effects."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:101
msgid ""
"Now let's consider how we can interactively evaluate expressions in Clojure."
msgstr ""

#. type: Title ===
#: en/content/guides/learn/syntax.adoc:102
#, no-wrap
msgid "Delaying evaluation with quoting"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:105
msgid ""
"Sometimes it's useful to suspend evaluation, in particular for symbols and "
"lists. Sometimes a symbol should just be a symbol without looking up what it "
"refers to:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:110
#, no-wrap
msgid ""
"user=> 'x\n"
"x\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:113
msgid ""
"And sometimes a list should just be a list of data values (not code to "
"evaluate):"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:118
#, no-wrap
msgid ""
"user=> '(1 2 3)\n"
"(1 2 3)\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:121
msgid ""
"One confusing error you might see is the result of accidentally trying to "
"evaluate a list of data as if it were code:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:126
#, no-wrap
msgid ""
"user=> (1 2 3)\n"
"ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:129
msgid ""
"For now, don't worry too much about quote but you will see it occasionally "
"in these materials to avoid evaluation of symbols or lists."
msgstr ""

#. type: Title ==
#: en/content/guides/learn/syntax.adoc:130
#, no-wrap
msgid "REPL"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:133
msgid ""
"Most of the time when you are using Clojure, you will do so in an editor or "
"a REPL (Read-Eval-Print-Loop). The REPL has the following parts:"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:135
msgid "Read an expression (a string of characters) to produce Clojure data."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:136
msgid ""
"Evaluate the data returned from #1 to yield a result (also Clojure data)."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:137
msgid "Print the result by converting it from data back to characters."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:138
msgid "Loop back to the beginning."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:140
msgid ""
"One important aspect of #2 is that Clojure always compiles the expression "
"before executing it; Clojure is **always** compiled to JVM bytecode. There "
"is no Clojure interpreter."
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:145
#, no-wrap
msgid ""
"user=> (+ 3 4)\n"
"7\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:148
msgid ""
"The box above demonstrates evaluating an expression (+ 3 4) and receiving a "
"result."
msgstr ""

#. type: Title ===
#: en/content/guides/learn/syntax.adoc:149
#, no-wrap
msgid "Exploring at the REPL"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:152
msgid ""
"Most REPL environments support a few tricks to help with interactive use. "
"For example, some special symbols remember the results of evaluating the "
"last three expressions:"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:154
msgid "`*1` (the last result)"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:155
msgid "`*2` (the result two expressions ago)"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:156
msgid "`*3` (the result three expressions ago)"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:165
#, no-wrap
msgid ""
"user=> (+ 3 4)\n"
"7\n"
"user=> (+ 10 *1)\n"
"17\n"
"user=> (+ *1 *2)\n"
"24\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:168
msgid ""
"In addition, there is a namespace `clojure.repl` that is included in the "
"standard Clojure library that provides a number of helpful functions. To "
"load that library and make it's functions available in our current context, "
"call:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:172
#, no-wrap
msgid "(require '[clojure.repl :refer :all])\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:175
msgid ""
"For now, you can treat that as a magic incantation. Poof! We'll unpack it "
"when we get to namespaces."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:177
msgid ""
"We now have access to some additional functions that are useful at the REPL: "
"`doc`, `find-doc`, `apropos`, `source`, and `dir`."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:179
msgid ""
"The `doc` function displays the documentation for any function. Let's call "
"it on `+`:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:183
#, no-wrap
msgid "user=> (doc +)\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:188
#, no-wrap
msgid ""
"clojure.core/+\n"
"([] [x] [x y] [x y & more])\n"
"  Returns the sum of nums. (+) returns 0. Does not auto-promote\n"
"  longs, will throw on overflow. See also: +'\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:191
msgid ""
"The `doc` function prints the documentation for `+`, including the valid "
"signatures."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:193
msgid ""
"The doc function prints the documentation, then returns nil as the result - "
"you will see both in the evaluation output."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:195
msgid "We can invoke `doc` on itself too:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:199
#, no-wrap
msgid "user=> (doc doc)\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:204
#, no-wrap
msgid ""
"clojure.repl/doc\n"
"([name])\n"
"Macro\n"
"  Prints documentation for a var or special form given its name\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:207
msgid ""
"Not sure what something is called? You can use the `apropos` command to find "
"functions that match a particular string or regular expression."
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:212
#, no-wrap
msgid ""
"user=> (apropos \"+\")\n"
"(clojure.core/+ clojure.core/+')\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:215
msgid ""
"You can also widen your search to include the docstrings themselves with "
"`find-doc`:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:219
#, no-wrap
msgid "user=> (find-doc \"trim\")\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:227
#, no-wrap
msgid ""
"clojure.core/subvec\n"
"([v start] [v start end])\n"
"  Returns a persistent vector of the items in vector from\n"
"  start (inclusive) to end (exclusive).  If end is not supplied,\n"
"  defaults to (count vector). This operation is O(1) and very fast, as\n"
"  the resulting vector shares structure with the original and no\n"
"  trimming is done.\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:231
#, no-wrap
msgid ""
"clojure.string/trim\n"
"([s])\n"
"  Removes whitespace from both ends of string.\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:236
#, no-wrap
msgid ""
"clojure.string/trim-newline\n"
"([s])\n"
"  Removes all trailing newline \\n or return \\r characters from\n"
"  string.  Similar to Perl's chomp.\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:240
#, no-wrap
msgid ""
"clojure.string/triml\n"
"([s])\n"
"  Removes whitespace from the left side of string.\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:244
#, no-wrap
msgid ""
"clojure.string/trimr\n"
"([s])\n"
"  Removes whitespace from the right side of string.\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:247
msgid ""
"If you'd like to see a full listing of the functions in a particular "
"namespace, you can use the `dir` function. Here we can use it on the "
"`clojure.repl` namespace:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:251
#, no-wrap
msgid "user=> (dir clojure.repl)\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:265
#, no-wrap
msgid ""
"apropos\n"
"demunge\n"
"dir\n"
"dir-fn\n"
"doc\n"
"find-doc\n"
"pst\n"
"root-cause\n"
"set-break-handler!\n"
"source\n"
"source-fn\n"
"stack-element-str\n"
"thread-stopper\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:268
msgid ""
"And finally, we can see not only the documentation but the underlying source "
"for any function accessible by the runtime:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:272
#, no-wrap
msgid "user=> (source dir)\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:278
#, no-wrap
msgid ""
"(defmacro dir\n"
"  \"Prints a sorted directory of public vars in a namespace\"\n"
"  [nsname]\n"
"  `(doseq [v# (dir-fn '~nsname)]\n"
"     (println v#)))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:281
msgid ""
"As you go through this workshop, please feel free to examine the docstring "
"and source for the functions you are using. Exploring the implementation of "
"the Clojure library itself is an excellent way to learn more about the "
"language and how it is used."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:283
msgid ""
"It is also an excellent idea to keep a copy of the [Clojure Cheatsheet]"
"(https://clojure.org/api/cheatsheet) open while you are learning Clojure. "
"The cheatsheet categorizes the functions available in the standard library "
"and is an invaluable reference."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:285
msgid "Now let's consider some Clojure basics to get you going...."
msgstr ""

#. type: Title ==
#: en/content/guides/learn/syntax.adoc:286
#, no-wrap
msgid "Clojure basics"
msgstr ""

#. type: Title ===
#: en/content/guides/learn/syntax.adoc:288
#, no-wrap
msgid "`def`"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:291
msgid ""
"When you are evaluating things at a REPL, it can be useful to save a piece "
"of data for later. We can do this with `def`:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:296
#, no-wrap
msgid ""
"user=> (def x 7)\n"
"#'user/x\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:299
msgid ""
"`def` is a special form that associates a symbol (x) in the current "
"namespace with a value (7). This linkage is called a `var`. In most actual "
"Clojure code, vars should refer to either a constant value or a function, "
"but it's common to define and re-define them for convenience when working at "
"the REPL."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:301
msgid ""
"Note the return value above is `pass:[#'user/x]` - that's the literal "
"representation for a var: `#'` followed by the namespaced symbol. `user` is "
"the default namespace."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:303
msgid ""
"Recall that symbols are evaluated by looking up what they refer to, so we "
"can get the value back by just using the symbol:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:308
#, no-wrap
msgid ""
"user=> (+ x x)\n"
"14\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:313
msgid ""
"One of the most common things you do when learning a language is to print "
"out values. Clojure provides several functions for printing values:"
msgstr ""

#. type: Table
#: en/content/guides/learn/syntax.adoc:319
#, no-wrap
msgid ""
"| | Human-Readable | Machine-Readable |\n"
"|With newline| println | prn | \n"
"|Without newline | print | pr |\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:322
msgid ""
"The human-readable forms will translate special print characters (like "
"newlines and tabs) to their expected form and print strings without quotes. "
"We often use `println` to debug functions or print a value at the REPL. "
"`println` takes any number of arguments and interposes a space between each "
"argument's printed value:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:327
#, no-wrap
msgid ""
"user=> (println \"What is this:\" (+ 1 2))\n"
"What is this: 3\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:330
msgid ""
"The println function has side-effects (printing) and returns nil as a result."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:332
msgid ""
"Note that \"What is this:\" above did not print the surrouding quotes and is "
"not a string that the Reader could read again in the same way. For that "
"purpose, use the machine-readable version prn:"
msgstr ""

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:337
#, no-wrap
msgid ""
"user=> (prn \"one\\n\\ttwo\")\n"
"\"one\\n\\ttwo\"\n"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:340
msgid ""
"Note that the printed result is a valid form that the Reader could read "
"again. Both human- and readable- printing functions are useful in different "
"contexts."
msgstr ""

#. type: Title ==
#: en/content/guides/learn/syntax.adoc:341
#: en/content/guides/learn/functions.adoc:299
#, no-wrap
msgid "Test your knowledge"
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:344
msgid "Using the REPL, compute the sum of 7654 and 1234."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:345
msgid ""
"Rewrite the following algebraic expression as a Clojure expression: `( 7 + 3 "
"* 4 + 5 ) / 10`."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:346
msgid ""
"Using REPL documentation functions, find the documentation for the `rem` and "
"`mod` functions. Compare the results of the provided expressions based on "
"the documentation."
msgstr ""

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:347
msgid ""
"Using `find-doc`, find the function that prints the stack trace of the most "
"recent REPL exception."
msgstr ""
