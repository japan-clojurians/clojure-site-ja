# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ==
#: en/content/reference/deps_and_cli.adoc:1 en/content/guides/faq.adoc:203
#, no-wrap
msgid "Deps and CLI"
msgstr ""

#. type: Plain text
#: en/content/reference/special_forms.adoc:182
#: en/content/reference/datatypes.adoc:115 en/content/guides/faq.adoc:184
msgid "Example:"
msgstr ""

#. type: Plain text
#: en/content/reference/namespaces.adoc:1
#: en/content/guides/reader_conditionals.adoc:87 en/content/guides/faq.adoc:133
#: en/content/news/2011/07/22/introducing-clojurescript.adoc:28
#, no-wrap
msgid "Namespaces"
msgstr ""

#. type: Title =
#: en/content/guides/faq.adoc:1
#, no-wrap
msgid "Frequently Asked Questions"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:4
msgid "Alex Miller 2016-03-08"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:13
msgid ""
"These questions and answers are adapted from mailing lists and other Clojure "
"community forums."
msgstr ""

#. type: Title ==
#: en/content/guides/faq.adoc:14
#, no-wrap
msgid "Reader and Syntax"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:18
#, no-wrap
msgid "**<<faq#why_keywords,What's the advantage of representing text tokens as keywords (instead of as strings)?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:20
msgid ""
"Keywords are cached and interned. This means that a keyword is reused "
"(reducing memory) everywhere in your program and that checks for equality "
"really become checks for identity (which are fast). Additionally, keywords "
"are invokable to look themselves up in a map and thus this enables the "
"common pattern of extracting a particular field from a collection of maps "
"possible."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:23
#, no-wrap
msgid "**<<faq#unreadable_keywords,Why is it possible to create keywords that can't be read by the reader?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:25
msgid ""
"The https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"keyword[`keyword`] function can be used to programmatically create keywords "
"based on user data or other sources of input. Similarly, the https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/namespace[`namespace`] "
"and https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"name[`name`] functions can be used to pull a keyword back apart into "
"components. It is common for programs to use this functionality to create "
"keywords to be used as identifiers or map keys without ever printing and "
"reading that data back."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:27
msgid ""
"Because of this use case (and also for general performance), no validation "
"check is performed on the inputs to `keyword` (or `symbol`), which makes it "
"possible to create keywords that, when printed, cannot be read back into a "
"keyword (due to spaces or other non-allowed characters). If this is "
"important to you, you should validate the keyword inputs first, before "
"creating the keyword."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:30
#, no-wrap
msgid "**<<faq#reader_macros,Why does Clojure not have user-extensible reader macros?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:32
msgid ""
"The reader takes text (Clojure source) and returns Clojure data, which is "
"subsequently compiled and evaluated. Reader macros tell the Clojure reader "
"how to read something that is not a typical s-expression (examples are "
"things like quoting `'` and anonymous functions `#()`). Reader macros can be "
"used to define entirely new syntaxes read by the reader (for example: JSON, "
"XML, or other formats) - this is a more powerful syntactic capability than "
"regular macros (which come into play later at compile time)."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:34
msgid ""
"However, unlike Lisp, Clojure does not allow the user to extend this set of "
"reader macros. This avoids the possibility of creating code that another "
"user cannot read (because they do not have the proper reader macros). "
"Clojure gives back some of the power of reader macros with tagged literals, "
"allowing you to create generically readable _data_, that is still extensible."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:37
#, no-wrap
msgid "**<<faq#underscore,What does an _ mean in a let binding or parameter?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:39
msgid ""
"_ has no special meaning in Clojure as a symbol. However, it is a convention "
"to use _ (or a leading _) to denote a binding that will not be used in the "
"expression."
msgstr ""

#. type: delimited block -
#: en/content/guides/faq.adoc:45
#, no-wrap
msgid ""
"(defn get-x [point]\n"
"  (let [[x _] point]   ;; y-value of point is unused, so mark it with _\n"
"    x))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:49
#, no-wrap
msgid "**<<faq#anon_vector,Why doesn't the anonymous function `#([%1])` work to construct a vector?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:51
msgid ""
"`++#()++` always expands to include parens around the expression you give "
"it, thus in this case it yields `(fn [x] ([x]))` which fails when the vector "
"is invoked. Instead, use the vector function `++#(vector %)++` or just "
"`vector`, which is the function being described."
msgstr ""

#. type: Title ==
#: en/content/guides/faq.adoc:52
#, no-wrap
msgid "Collections, Sequences, and Transducers"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:56
#, no-wrap
msgid "**<<faq#conj,Why does `conj` add to the front of a list, but the back of a vector?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:58
msgid ""
"Most Clojure data structure operations, including `conj` (conjoin), are "
"designed to give the user a performance expectation. With `conj`, the "
"expectation is that insertion should happen at the place where this "
"operation is efficient. Lists (as linked lists) can make a constant time "
"insertion only at the front. Vectors (indexed) are designed to expand at the "
"back. As the user, you should consider this when you choose which data "
"structure to use. In Clojure, vectors are used with much greater frequency."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:60
msgid ""
"If your goal is specifically to \"add to the front of the collection\", then "
"the appropriate function to use is `cons`, which will always add to the "
"front. Note however that this will produce a sequence, not an instance of "
"the original collection type."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:63
#, no-wrap
msgid "**<<faq#seqs_vs_colls,I keep forgetting that after calling sequence functions on vectors/sets, the return value is no longer a vector or a set.>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:65
msgid ""
"Generally you should divide the Clojure core functions into these two "
"categories:"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:67
msgid ""
"Data structure functions - take a data structure and return a modified "
"versions of that data structure (conj, disj, assoc, dissoc, etc). These "
"functions always take the data structure _first_."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:68
msgid ""
"Sequence functions - take a \"seqable\" and return a seqable. [Generally we "
"try to avoid committing to the return values actually being an instance of "
"ISeq - this allows for performance optimizations in some cases.] Examples "
"are map, filter, remove, etc. All of these functions take the seqable _last_."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:70
msgid ""
"It sounds like you are using the latter but expecting the semantics of the "
"former (which is a common issue for new Clojurists!). If you want to apply "
"sequence functions but have more control over the output data structure, "
"there are a number of ways to do that."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:72
msgid ""
"Use data-structure equivalents like mapv or filterv, etc - this is a very "
"limited set that lets you perform these ops but return a data structure "
"rather than a seqable. `(mapv inc (filterv odd? [1 2 3]))`"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:73
msgid ""
"Pour the results of your sequence transformations back into a data structure "
"with into: `(into [] (map inc (filter odd? [1 2 3])))`"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:74
msgid ""
"Use transducers (likely with `into`) - this has much the same effect as #2, "
"but combinations of transformations can be applied more efficiently without "
"creating any sequences - only the final result is built: `(into [] (comp "
"(filter odd?) (map inc)) [1 2 3])`. As you work with larger sequences or "
"more transformations, this makes a significant difference in performance."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:76
msgid ""
"Note that all of these are eager transformations - they produce the output "
"vector when you invoke them. The original sequence version `(map inc (filter "
"odd? [1 2 3]))` is lazy and will only produce values as needed (with "
"chunking under the hood for greater performance). Neither of these is right "
"or wrong, but they are both useful in different circumstances."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:79
#, no-wrap
msgid "**<<faq#transducers_vs_seqs,What are good use cases for transducers?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:81
msgid ""
"When performing a series of transformations, sequences will create an "
"intermediate (cached) sequence between each transformation. Transducers "
"create a single compound transformation that is executed in one eager pass "
"over the input. These are different models, which are both useful."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:83
msgid "Performance benefits of transducers:"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:85
msgid ""
"Source collection iteration - when used on reducible inputs (collections and "
"other things), avoid creating an unnecessary input collection sequence - "
"helps memory and time."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:86
msgid ""
"Intermediate sequences and cached values - as the transformation happens in "
"a single pass, you remove all intermediate sequence and cached value "
"creation - again, helps memory and time. The combination of the prior item "
"and this one will start to win big as the size of the input collection or "
"number of transformations goes up (but for small numbers of either, chunked "
"sequences can be surprisingly fast and will compete)."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:88
msgid "Design / usage benefits of transducers:"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:90
msgid ""
"Transformation composition - some use cases will have a cleaner design if "
"they separate transformation composition from transformation application. "
"Transducers support this."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:91
msgid ""
"Eagerness - transducers are great for cases where eagerly processing a "
"transformation (and potentially encountering any errors) is more important "
"than laziness"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:92
msgid ""
"Resource control - because you have more control over when the input "
"collection is traversed, you also know when processing is complete. It's "
"thus easier to release or clean up input resources because you know when "
"that happens."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:94
msgid "Performance benefits of sequences:"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:96
msgid ""
"Laziness - if you will only need some of the outputs (for example a user is "
"deciding how many to use), then lazy sequences can often be more efficient "
"in deferring processing. In particular, sequences can be lazy with "
"intermediate results, but transducers use a pull model that will eagerly "
"produce all intermediate values."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:97
msgid ""
"Infinite streams - because transducers are typically eagerly consumed, they "
"don't match well with infinite streams of values"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:99
msgid "Design benefits of sequences:"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:101
msgid ""
"Consumer control - returning a seq from an API lets you combine input + "
"transformation into something that gives the consumer control. Transducers "
"don't work as well for this (but will work better for cases where input and "
"transformation are separated)."
msgstr ""

#. type: Title ==
#: en/content/guides/faq.adoc:102
#, no-wrap
msgid "Spec"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:106
#, no-wrap
msgid "**<<faq#spec_alpha,Why is spec alpha?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:108
msgid ""
"spec is in alpha to indicate that the API may still change. spec was broken "
"out of Clojure core so that spec can be updated independently from the main "
"Clojure version. At some point spec's API will be considered stable and at "
"that point the alpha will be removed."
msgstr ""

#. type: Title ==
#: en/content/guides/faq.adoc:109
#, no-wrap
msgid "State and Concurrency"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:113
#, no-wrap
msgid "**<<faq#concurrency_features,What are the trade-offs between reducers, core.async, futures, and pmap?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:115
msgid "Each of these really addresses a different use case."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:117
msgid ""
"Reducers are best for fine-grained data parallelism when computing a "
"transformation over existing in-memory data (in a map or vector). Generally "
"it's best when you have thousands of small data items to compute over and "
"many cores to do the work. Anything described as \"embarrassingly parallel\"."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:118
msgid ""
"Futures are best for pushing work onto a background thread and picking it up "
"later (or for doing I/O waits in parallel). It's better for big chunky tasks "
"(go fetch a bunch of data in the background)."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:119
msgid ""
"core.async is primarily used to organize the subsystems or internal "
"structure of your application. It has channels (queues) to convey values "
"from one \"subprocess\" (go block) to another. So you're really getting "
"concurrency and architectural benefits in how you break up your program. The "
"killer feature you can really only get in core.async is the ability to wait "
"on I/O events from multiple channels for the first response on any of them "
"(via alt/alts). Promises can also be used to convey single values between "
"independent threads/subprocesses but they are single delivery only."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:120
msgid ""
"Tools like pmap, java.util queues and executors, and libraries like "
"claypoole are doing coarse-level \"task\" concurrency. There is some overlap "
"with core.async here which has a very useful transducer-friendly pipeline "
"functionality."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:123
#, no-wrap
msgid "**<<faq#agent_shutdown,Why does Clojure \"hang\" for 1 minute when my program ends?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:125
msgid ""
"This is most commonly asked in the context of programs that use `future`, "
"`pmap`, `agent-send`, or other functions that invoke those functions. When a "
"program like this finishes, there will be a 60 second pause before exit. To "
"fix this problem, call https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/shutdown-agents[shutdown-agents] as the program exits."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:127
msgid ""
"Clojure uses two internal thread pools to service futures and agent function "
"executions. Both pools use non-daemon threads and the JVM will not exit "
"while any non-daemon thread is alive. In particular, the pool that services "
"futures and agent send-off calls uses an Executor cached thread pool with a "
"60 second timeout. In the scenario above, the program will wait until the "
"background threads have completed their work and the threads expire before "
"it can exit."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:130
#, no-wrap
msgid "**<<faq#write_skew,Why does the Clojure STM does not guarantee serializability but only snapshot isolation?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:132
msgid ""
"If reads were included by default, then STM would be slower (as more "
"transactions would require serializability). However, in many cases, reads "
"do not need to be included. Thus, users can choose to accept the performance "
"penalty when it is necessary and get faster performance when it is not."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:137
#, no-wrap
msgid "**<<faq#ns_file,Do namespaces map 1-to-1 with files?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:139
msgid ""
"No (although that is typical). One namespace can be split across multiple "
"files by using `load` to load secondary files and `in-ns` in those files to "
"retain the namespace (clojure.core is defined in this way). Also, it is "
"possible to declare multiple namespaces in a single file (although this is "
"very unusual)."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:142
#, no-wrap
msgid "**<<faq#ns_as_fn,Do namespaces work like regular functions? Looking at the syntax, it seems ns could be returning a function that makes a namespace, and then if you just stick parens around the contents of the file, that would be a regular S expression too. Does that imply you can put more than one in a file?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:144
msgid "ns is a macro that does a number of things:"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:146
msgid "creates a new internal Namespace object (if it does not yet exist)"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:147
msgid "makes that namespace the new current namespace (*ns*)"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:148
msgid ""
"auto-refers all vars from clojure.core and imports all classes from java.lang"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:149
msgid "requires/refers other namespaces and vars as specified"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:150
msgid "(and other optional things)"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:152
msgid "ns does not return a function or anything invokable as you suggest."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:154
msgid ""
"While ns is typically placed at the top of a clj file, it is actually just a "
"normal macro and can be invoked at the repl just the same. It could also be "
"used more than once in a single file (although this would be surprising to "
"most clj programmers and would likely not work as desired in AOT)."
msgstr ""

#. type: Title ==
#: en/content/guides/faq.adoc:155
#, no-wrap
msgid "Compiler"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:159
#, no-wrap
msgid "**<<faq#direct_linking_repl,How does direct linking affect the REPL experience?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:161
msgid ""
"Anything that has been direct linked will not see redefinitions to vars. For "
"example, if you redefine something in clojure.core, other parts of core that "
"use that var will not see the redefinition (however anything that you newly "
"compile at the REPL will). In practice, this is not typically a problem."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:163
msgid ""
"For parts of your own app, you may wish to only enable direct linking when "
"you build and deploy for production, rather than using it when you "
"developing at the REPL. Or you may need to mark parts of your app with ^:"
"redef if you want to always allow redefinition or ^:dynamic for dynamic vars."
msgstr ""

#. type: Title ==
#: en/content/guides/faq.adoc:164
#, no-wrap
msgid "Java and Interop"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:168
#, no-wrap
msgid "**<<faq#inner,How do you refer to a nested or inner class?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:170
msgid ""
"Use a $ to separate outer from inner class name. For example: `java.util.Map"
"$Entry` is the Entry inner class inside Map."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:173
#, no-wrap
msgid "**<<faq#primitive_type,How do you refer to the class representing a primitive?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:175
msgid ""
"Primitive types can be found as the static TYPE field on the boxed class, "
"for example: `Integer/TYPE`."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:178
#, no-wrap
msgid "**<<faq#varargs,How do you invoke a Java method with a vararg signature?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:180
msgid ""
"Java treats a trailing varargs parameter as an array and it can be invoked "
"from Clojure. Example:"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:182
msgid "`(.method object fixed-args... (into-array type variable-args...))`"
msgstr ""

#. type: delimited block -
#: en/content/guides/faq.adoc:189
#, no-wrap
msgid ""
";; asList takes an Object vararg parameter\n"
"(java.util.Arrays/asList (object-array [0 1 2]))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/faq.adoc:192
#, no-wrap
msgid ""
";; format takes one fixed parameter and a varargs\n"
"(String/format \"%s %s, %s\" (object-array [\"March\" 1 2016]))\n"
msgstr ""

#. type: Title ==
#: en/content/guides/faq.adoc:194
#, no-wrap
msgid "Design and Use"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:198
#, no-wrap
msgid "**<<faq#encapsulation,How do you achieve encapsulation with Clojure?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:200
msgid ""
"Because of its focus on immutable data, there is generally not a high value "
"placed on data encapsulation. Because data is immutable, there is no need to "
"worry about someone else modifying a value. Likewise, because Clojure data "
"is designed to be manipulated directly, there is significant value in "
"providing direct access to data, rather than wrapping it in APIs."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:202
msgid ""
"All Clojure vars are globally available so again there is not much in the "
"way of encapsulation of functions within namespaces. However, the ability to "
"mark vars private (either using `defn-` for functions or `def` with `^:"
"private` for values) is a convenience for a developer to indicate which "
"parts of an API should be considered public for use vs part of the "
"implementation."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:207
#, no-wrap
msgid "**<<faq#clj_alpha,Are these scripts and tools.deps.alpha done?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:209
msgid ""
"No. There are lots of known gaps and ideas still to implement. But it is "
"useful now. :)"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:212
#, no-wrap
msgid "**<<faq#clj_replace,Is clj a replacement for lein and boot?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:214
msgid ""
"No. The clojure scripts are focused on a) building classpaths and b) "
"launching clojure programs. They do not (and will not) create artifacts, "
"deploy artifacts, etc."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:216
msgid ""
"tools.deps.alpha aims to provide programmatic building blocks for dependency "
"resolution and classpath construction. clj/clojure wraps these into a "
"command-line form that can be used to run Clojure programs. You can compose "
"these pieces to do many other things."
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:219
#, no-wrap
msgid "**<<faq#clj_dynamic,Do these scripts allow you to dynamically add dependencies to a running repl?>>**\n"
msgstr ""

#. type: Plain text
#: en/content/guides/faq.adoc:220
msgid ""
"No. Other tools exist to do this now or could be added on top of the "
"existing functionality but this was not part of the initial goal."
msgstr ""
