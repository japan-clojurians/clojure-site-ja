# Japanese translations for clojure-site-ja package
# Copyright (C) 2019 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: 2019-07-25 20:54+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: en/content/dev/creating_tickets.adoc:4 en/content/dev/developing_patches.adoc:4
#, fuzzy
msgid "Alex Miller 2018-12-05"
msgstr "Alex Miller 2015-11-25"

#. type: Title =
#: en/content/dev/developing_patches.adoc:1
#, no-wrap
msgid "Developing Patches"
msgstr ""

#. type: Title ==
#: en/content/dev/developing_patches.adoc:10
#, no-wrap
msgid "Before You Code"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:13
msgid ""
"If you consider the following items before you begin coding, you will produce a patch that is easier to assess and "
"more likely to be accepted:"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:15
msgid ""
"What problem are you trying to solve? Prior to any patch you should have a problem statement, and it should be "
"included in the description of the patch."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:16
msgid ""
"What is your solution approach? Please make this clear in the description, so that it does not have to be inferred "
"from the code."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:17
msgid ""
"Have you vetted your idea with the community? Please discuss in Slack or mailing list with members of the core team "
"if you can. (Not necessary for everything, like typos.)"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:18
msgid ""
"Make a table of considered alternatives, and their tradeoffs. Describe why the chosen solution is the best choice."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:19
msgid ""
"How will you prove to others your patch works? Plan to include tests. Example-based tests are ok, but generative "
"tests are preferred."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:20
msgid ""
"Document the changes in the patch in the ticket. Anything that can help a screener understand what changes you made "
"and why will make their job easier."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:21
msgid ""
"Don't do too much! Submit small patches that address specific problems, don't add anything extra, even (especially!) "
"\"cleanup\" of nearby code. This only serves to confuse the intent of the patch."
msgstr ""

#. type: Title ==
#: en/content/dev/developing_patches.adoc:22
#, no-wrap
msgid "While Your Patch is Being Considered"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:25
msgid ""
"Keep the description up-to-date as comments come in. It is very time-consuming to reconstruct the current state of a "
"ticket by reading the comment thread."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:26
msgid "Rally support. Votes are good, and comments from other users reviewing the ticket are even better."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:27
msgid ""
"As tickets grow, make sure you document clearly which patch(es) are active.  Don't do this by deleting old patches, "
"just refer to patches by name in the comments."
msgstr ""

#. type: Title ==
#: en/content/dev/developing_patches.adoc:28
#, no-wrap
msgid "Coding"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:31
msgid ""
"Once you're ready to craft your code, the first thing you'll need is a clone of the Clojure or appropriate "
"repository. The examples below are for the Clojure project -- for submissions to Clojure itself:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:36
#, fuzzy, no-wrap
#| msgid ""
#| "git clone https://github.com/clojure/clojure.git\n"
#| "cd clojure\n"
#| "./antsetup.sh\n"
#| "ant local\n"
msgid ""
"$ git clone git://github.com/clojure/clojure.git\n"
"$ cd clojure\n"
msgstr ""
"git clone https://github.com/clojure/clojure.git\n"
"cd clojure\n"
"./antsetup.sh\n"
"ant local\n"

#. type: Plain text
#: en/content/dev/developing_patches.adoc:39
msgid "Next, create a new branch for yourself:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:44
#, no-wrap
msgid ""
"$ git checkout -b fixbug42\n"
"Switched to a new branch \"fixbug42\"\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:47
msgid ""
"Now you're ready to get hacking. Before you start working, make sure all existing regression tests still pass e.g. "
"For Clojure, use Maven:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:60
#, no-wrap
msgid ""
"$ mvn clean test\n"
"...lots of output...\n"
"test:\n"
"[INFO] Executed tasks\n"
"[INFO] ------------------------------------------------------------------------\n"
"[INFO] BUILD SUCCESS\n"
"[INFO] ------------------------------------------------------------------------\n"
"[INFO] Total time: 01:26 min\n"
"[INFO] Finished at: 2018-12-05T14:36:54-06:00\n"
"[INFO] ------------------------------------------------------------------------\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:63
msgid ""
"Once you've finished making your changes you need to commit them. Please use a commit message that begins with the "
"JIRA number (CLJ-xyz)!"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:69
#, no-wrap
msgid ""
"$ git commit -a -m \"CLJ-932 fixed annoying bug\"\n"
"Created commit 8f7c712: fixed annoying bug\n"
"1 files changed, 0 insertions(+), 1 deletions(-)\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:72
msgid ""
"Now that you've made your changes it's time to get them into a patch. You need to update the repo and fix any "
"conflicts you had."
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:82
#, no-wrap
msgid ""
"$ git checkout master\n"
"Switched to branch \"master\"\n"
"$ git pull\n"
"...\n"
"$ git checkout fixbug42\n"
"Switched to branch \"fixbug42\"\n"
"$ git rebase master\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:85
msgid "Once you've fixed any conflicts, you're ready to create a patch:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:89
#, no-wrap
msgid "$ git format-patch master --stdout -U8 > clj-932-1.patch\n"
msgstr ""

#. type: Title ==
#: en/content/dev/developing_patches.adoc:91
#, fuzzy, no-wrap
#| msgid "Adding to a set"
msgid "Adding patches"
msgstr "セットに追加する"

#. type: Plain text
#: en/content/dev/developing_patches.adoc:94
msgid ""
"Now you can attach that patch file to the JIRA ticket.  In the More Actions menu near the top of the page, select "
"Attach Files.  Please read and follow the recommendations below when writing comments about your attached patch.  "
"Screeners have limited time available for screening.  You are more likely to get your patch approved if you can be as "
"clear as you can, and as efficient with their time as possible."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:96
msgid "Please use .patch or .diff (not .txt) as a suffix for patch files."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:97
msgid ""
"Read your patch file before attaching it.  If you see things like white space changes unrelated to the portion of "
"code you are modifying, please edit and remove those changes and regenerate the patch.  Also, while it is nice when "
"developing to do multiple commits in a sequence, with explanations of each commit, patch reviewers usually prefer to "
"have all changes squashed to a single commit for review."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:98
msgid "Using 'git add --patch' to stage your changes will make it easier to avoid committing extraneous changes."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:99
msgid ""
"Please use a name different from all existing attachments on the ticket.  JIRA allows you to add multiple attachments "
"with the same name, but later ones do not replace earlier ones.  This can lead to confusion when referring to patches "
"by name."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:100
msgid ""
"Include the file name and date of the patch in any comments referring to it.  It is possible to match up comments "
"with patches based on the date and time, but it is tedious and error prone."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:101
msgid ""
"To get email whenever the ticket is updated, click on the word \"Watch\" in the top right area of the page.  This can "
"help you know when someone else comments on your patch or creates a new one, etc.  Click \"Watching\" if you want to "
"stop the update emails for a ticket.  You may want to verify that the automated emails get through your spam filter.  "
"Emails will be sent to the address associated with your JIRA account, and will come from the address jira@dev.clojure."
"org."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:102
msgid ""
"If you create a new patch that incorporates one or more earlier ones, please combine them all into one patch file, "
"and indicate in your comments that you have done this (with file names and dates of the patches you are superseding). "
"One exception to this is when there are significant largely independent contributions from multiple people (for "
"example, one made a code change and the other wrote the tests) and both want credit. In that case, a single patch "
"file with multiple commits is fine. However, we'd like to avoid multiple patches that repeatedly modify the same code."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:104
msgid ""
"Mark the ticket as having a patch ready for screening by editing the Patch field.  Click the Edit button near the top "
"left of the page for the ticket.  In the next page find the heading \"Patch\" with a popup menu next to it.  Select "
"\"Code\" or \"Code and Test\" from that menu, then click the Update button at the bottom of the page.  If you do not "
"see an Edit button on the page for the ticket, and you have signed a CA, ask on the developer's email list or on "
"#clojure-dev in Clojurians Slack to be given permission to edit Jira tickets."
msgstr ""

#. type: Title ==
#: en/content/dev/developing_patches.adoc:105
#, fuzzy, no-wrap
#| msgid "Removing a field"
msgid "Removing patches"
msgstr "フィールドを取り除く"

#. type: Plain text
#: en/content/dev/developing_patches.adoc:108
msgid ""
"To remove a patch (e.g. because it is no longer relevant), go to the page for the ticket and look for the "
"\"Attachments\" heading beneath the Description text.  Far to the right is a plus sign and a triangle.  Click on the "
"triangle and select \"Manage Attachments\" from the menu.  Think carefully on which one you want to delete, and click "
"the trash can icon next to it.  Note: most people have permission to remove their own attachments, but not those "
"added by someone else."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:110
msgid ""
"In general, you don't need to remove old patches. Just let them accumulate and track the most relevant in the ticket "
"description."
msgstr ""

#. type: Title ==
#: en/content/dev/developing_patches.adoc:111
#, no-wrap
msgid "Updating stale patches"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:114
msgid ""
"A stale patch means one that used to apply cleanly to the latest Clojure master version, but due to commits made "
"since the patch was created, it no longer does.  In particular, the output of this command:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:118
#, no-wrap
msgid "$ git am --keep-cr -s --ignore-whitespace < patch_file.patch\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:121
msgid ""
"includes 'Patch failed' and 'To restore the original branch and stop patching, run \"git am --abort\"'.  You should "
"do the \"git am --abort\" to get rid of state of the failed patch attempt left behind by the command above."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:123
msgid ""
"\"git am\" is very \"fragile\", meaning that if the patch_file was created with one version of the source code, all "
"it takes for the command to fail is a change in any of the lines of context present in the patch file, even if it is "
"not one of the lines being changed by the patch.  This is especially common for files containing unit tests, because "
"people usually add new tests at the end of such a file, and so the lines of context before the new test change if two "
"different patches add a new test to the end of the same file."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:125
msgid "To apply such a patch, use the --reject flag:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:129
#, no-wrap
msgid "$ git apply --reject patch_file.patch\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:132
msgid ""
"The output will give you some hints of whether each \"hunk\" of the patch file succeeded or failed.  If they all "
"succeed, then likely the only thing wrong with the patch file is that a few context lines were changed.  If any hunks "
"fail, patch creates files ending with \".rej\" containing rejected hunks that it did not apply, and you can focus on "
"those as places where the source code likely changed more significantly.  A command like this will find them all:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:136
#, no-wrap
msgid "$ find . -name '*.rej'\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:139
msgid ""
"You will need to look at those rejected hunks, perhaps think about them for a bit to see if and how they still apply, "
"and apply them by hand-editing the source code yourself."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:141
msgid "When creating a new git patch with:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:145
#, no-wrap
msgid "$ git format-patch master --stdout -U8 > patch_file.patch\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:148
msgid ""
"it puts your name and the current date near the top of the file.  If the only changes that you have made are in the "
"context lines, please keep the original author's credit intact by copying the name and date from the original patch "
"that you started from, then upload that."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:150
msgid ""
"If you write unit tests where there were none in the original patch, but didn't otherwise modify the original patch, "
"and you would like your name in the commit log for your work, create a separate patch of test additions with your "
"name on it, leaving the original author's name on the updated patch."
msgstr ""

#. type: Title ==
#: en/content/dev/developing_patches.adoc:151
#, no-wrap
msgid "Screening a patch"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:154
msgid "If you are a screener testing a patch, you can create a new branch and apply the patch to start working with it:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:159
#, no-wrap
msgid ""
"$ git checkout -b testxyz\n"
"$ git am --keep-cr -s --ignore-whitespace < patch_file.patch\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:162
msgid "And you can throw that branch away when you're done with:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:167
#, no-wrap
msgid ""
"$ git checkout master\n"
"$ git branch -D testxyz\n"
msgstr ""

#. type: Title ==
#: en/content/dev/developing_patches.adoc:169
#, no-wrap
msgid "How To Run All Clojure Tests"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:174
#, no-wrap
msgid "$ mvn clean test\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:177
msgid ""
"To reduce the duration of the pseudo-randomly generated generative tests from 60 sec down to 1 sec (for example), "
"edit the file src/script/run_test_generative.clj and change the 60000 number.  Just be careful not to include such "
"changes in any patches you submit.  (The file was called src/scripts/run_tests.clj in Clojure 1.6.0 and earlier)"
msgstr ""

#. type: Title ==
#: en/content/dev/developing_patches.adoc:178
#, no-wrap
msgid "Run An Individual Test"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:181
msgid "First, build the latest Clojure without running any tests:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:186
#, no-wrap
msgid ""
"$ mvn -Dmaven.test.skip=true clean package\n"
"# If no compilation errors, mvn command above creates target/clojure-VERSION-master-SNAPSHOT.jar\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:189
msgid "The commands above build a Clojure jar file, but neither compile nor run the tests."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:191
msgid "Create a deps.edn file describing dependencies you might need:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:202
#, no-wrap
msgid ""
"{:paths [\"test\"]\n"
" :deps\n"
" {org.clojure/clojure {:mvn/version \"RELEASE\"}\n"
"  org.clojure/test.check {:mvn/version \"0.9.0\"}\n"
"  org.clojure/test.generative {:mvn/version \"0.5.2\"}}\n"
" :aliases\n"
" {:dbg {:classpath-overrides {org.clojure/clojure \"target/classes\"}\n"
"        :extra-deps {criterium {:mvn/version \"0.4.4\"}}}}}\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:205
msgid "Start a repl using clj and run individual tests from it:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:218
#, no-wrap
msgid ""
"$ clj -A:dbg\n"
"Clojure ...\n"
";; We're testing with clojure.test \n"
"=> (require 'clojure.test)\n"
"nil\n"
";; Load a test file \n"
"user=> (require 'clojure.test-clojure.data)\n"
"nil\n"
";; Run it \n"
"user=> (clojure.test/run-tests 'clojure.test-clojure.data)\n"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:223
#, no-wrap
msgid ""
"Testing clojure.test-clojure.data\n"
"Ran 1 tests containing 17 assertions.\n"
"0 failures, 0 errors.\n"
"{:type :summary, :pass 17, :test 1, :error 0, :fail 0}\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:226
msgid "Start a repl and run a generative test from it:"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:228
msgid ""
"Generative tests use additional testing jars (installed when you run ./antsetup.sh). Thus, you'll need to have some "
"additional classpath which antsetup.sh will leave in the maven-classpath file. If you are on *nix, the easiest way to "
"leverage this file is:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:246
#, no-wrap
msgid ""
"$ clj -A:dbg\n"
"Clojure ...\n"
";; Install some clojure.test extensions\n"
"user=> (require 'clojure.test-helper)\n"
"nil\n"
";; Load a test file that uses test.generative\n"
"user=> (require 'clojure.test-clojure.reader)\n"
"nil\n"
";; Load the test.generative runner ns \n"
"user=> (use 'clojure.test.generative.runner)\n"
"nil\n"
";; Test a specification on 1 thread for 200 ms\n"
"user=> (run 1 200 #'clojure.test-clojure.reader/types-that-should-roundtrip)\n"
"{:iter 60, :seed 1255541066, :test clojure.test-clojure.reader/types-that-should-roundtrip}\n"
"nil\n"
msgstr ""

#. type: Title ==
#: en/content/dev/developing_patches.adoc:248
#, fuzzy, no-wrap
#| msgid "Other ways to run Clojure"
msgid "Other options for building Clojure"
msgstr "その他のClojureの実行方法"

#. type: Title ===
#: en/content/dev/developing_patches.adoc:250
#, no-wrap
msgid "Building Clojure without direct linking"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:253
msgid ""
"By default, Clojure is built with direct linking enabled.  While this improves performance, it means that if a "
"function A calls a function B, both within Clojure, then using spec to instrument B will leave A still calling the "
"original function B, not the instrumented version.  If you wish to instrument B and have other functions in Clojure "
"call the instrumented version, one way is to build Clojure with direct linking disabled."
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:255
msgid ""
"Edit the file build.xml to replace \"true\" with \"false\" in the following line, which is inside of the section "
"beginning with 'target name=\"compile-clojure\"':"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:259
#, no-wrap
msgid "<sysproperty key=\"clojure.compiler.direct-linking\" value=\"true\"/>\n"
msgstr ""

#. type: Plain text
#: en/content/dev/developing_patches.adoc:262
msgid "Then use your preferred method of building Clojure from source, e.g.:"
msgstr ""

#. type: delimited block -
#: en/content/dev/developing_patches.adoc:266
#, no-wrap
msgid "$ mvn -Dmaven.test.skip=true clean install\n"
msgstr ""
