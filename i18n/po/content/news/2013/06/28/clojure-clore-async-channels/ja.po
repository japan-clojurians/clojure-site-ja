# Japanese translations for clojure-site-ja package
# Copyright (C) 2016 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: 2016-06-27 08:47+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: en/content/dev/contributor_agreement.adoc:36 en/content/news/2015/06/30/clojure-17.adoc:54
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:106
msgid "Alex Miller"
msgstr ""

#. type: Plain text
#: en/content/dev/contributor_agreement.adoc:39 en/content/news/2013/06/28/clojure-clore-async-channels.adoc:107
msgid "Alex Redington"
msgstr ""

#. type: Plain text
#: en/content/dev/contributor_agreement.adoc:100 en/content/news/2015/06/30/clojure-17.adoc:58
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:105
msgid "Ghadi Shayban"
msgstr ""

#. type: Plain text
#: en/content/dev/contributor_agreement.adoc:179 en/content/news/2015/06/30/clojure-17.adoc:39
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:104
msgid "Timothy Baldridge"
msgstr ""

#. type: Title =
#: en/content/reference/transients.adoc:17 en/content/reference/deps_and_cli.adoc:14
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:10 en/content/about/rationale.adoc:1
#, no-wrap
msgid "Rationale"
msgstr "論理的根拠"

#. type: Title ==
#: en/content/community/contrib_libs.adoc:99 en/content/news/2013/06/28/clojure-clore-async-channels.adoc:28
#, no-wrap
msgid "History"
msgstr ""

#. type: Title =
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:1
#, no-wrap
msgid "Clojure core.async Channels "
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:4
msgid "Rich Hickey 2013-06-28"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:9
msgid ""
"https://github.com/clojure/core.async[core.async] is a new contrib library for Clojure that adds support for "
"asynchronous programming using channels."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:13
msgid ""
"There comes a time in all good programs when components or subsystems must stop communicating directly with one "
"another. This is often achieved via the introduction of queues between the producers of data and the consumers/"
"processors of that data. This architectural indirection ensures that important decisions can be made with some degree "
"of independence, and leads to systems that are easier to understand, manage, monitor and change, and make better use "
"of computational resources, etc."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:15
msgid ""
"On the JVM, the http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/package-summary.html[java.util."
"concurrent] package provides some good concurrent blocking queues, and they are a viable and popular choice for "
"Clojure programs. However, in order to use the queues one must dedicate one or more actual threads to their "
"consumption. Per-thread stack allocation and task-switching overheads limit the number of threads that can be used in "
"practice. Another limitation of j.u.c. queues is there is no way to block waiting on a set of alternatives."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:17
msgid "On JavaScript engines, there are no threads and no queues."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:19
msgid ""
"Thread overheads or lack of threads often cause people to move to systems based upon events/callbacks, in the pursuit "
"of greater efficiency (often under the misnomer 'scalability', which doesn't apply since you can't scale a single "
"machine). Events complect communication and flow of control. While there are various mechanisms to make events/"
"callbacks cleaner (FRP, Rx/Observables) they don't change their fundamental nature, which is that upon an event an "
"arbitrary amount of other code is run, possibly on the same thread, leading to admonitions such as \"don't do too "
"much work in your handler\", and phrases like \"callback hell\"."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:21
msgid "The objectives of core.async are:"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:23
msgid "To provide facilities for independent threads of activity, communicating via queue-like _channels_"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:24
msgid ""
"To support both real threads and shared use of thread pools (in any combination), as well as ClojureScript on JS "
"engines"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:25
msgid "To build upon the work done on CSP and its derivatives"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:27
msgid ""
"It is our hope that async channels will greatly simplify efficient server-side Clojure programs, and offer simpler "
"and more robust techniques for front-end programming in ClojureScript."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:31
msgid ""
"The roots of this style go back at least as far as http://en.wikipedia.org/wiki/"
"Communicating_sequential_processes[Hoare's Communicating Sequential Processes (CSP)], followed by realizations and "
"extensions in e.g. http://en.wikipedia.org/wiki/Occam_programming_language[occam], http://www.cs.kent.ac.uk/projects/"
"ofa/jcsp/[Java CSP] and the http://golang.org/[Go programming language]."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:33
msgid ""
"In modern incarnations, the notion of a channel becomes first class, and in doing so provides us the indirection and "
"independence we seek."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:35
msgid ""
"A key characteristic of channels is that they are blocking. In the most primitive form, an unbuffered channel acts as "
"a rendezvous, any reader will await a writer and vice-versa. Buffering can be introduced, but unbounded buffering is "
"discouraged, as bounded buffering with blocking can be an important tool coordinating pacing and back pressure, "
"ensuring a system doesn't take on more work than it can achieve."
msgstr ""

#. type: Title ==
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:36
#, no-wrap
msgid "Details"
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:38
#, no-wrap
msgid "Just a library"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:41
#, no-wrap
msgid "*core.async* is a library. It doesn't modify Clojure. It is designed to support Clojure 1.5+.\n"
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:42
#, no-wrap
msgid "Creating channels"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:45
msgid ""
"You can create a channel with the http://clojure.github.io/core.async/#clojure.core.async/chan[chan] function. This "
"will return a channel that supports multiple writers and readers. By default, the channel is unbuffered, but you can "
"supply a number to indicate a buffer size, or supply a buffer object created via http://clojure.github.io/core.async/"
"#clojure.core.async/buffer[buffer], http://clojure.github.io/core.async/#clojure.core.async/dropping-buffer[dropping-"
"buffer] or http://clojure.github.io/core.async/#clojure.core.async/sliding-buffer[sliding-buffer]."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:47
msgid ""
"The fundamental operations on channels are putting and taking values. Both of those operations potentially block, but "
"the nature of the blocking depends on the nature of the thread of control in which the operation is performed. core."
"async supports two kinds of threads of control - ordinary threads and IOC (inversion of control) 'threads'. Ordinary "
"threads can be created in any manner, but IOC threads are created via http://clojure.github.io/core.async/#clojure."
"core.async/go[go blocks]. Because JS does not have threads, only `go` blocks and IOC threads are supported in "
"ClojureScript."
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:48
#, no-wrap
msgid "go blocks and IOC 'threads'"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:51
msgid ""
"`go` is a macro that takes its body and examines it for any channel operations. It will turn the body into a state "
"machine. Upon reaching any blocking operation, the state machine will be 'parked' and the actual thread of control "
"will be released. This approach is similar to that used in http://msdn.microsoft.com/en-us/library/vstudio/hh191443."
"aspx[C# async]. When the blocking operation completes, the code will be resumed (on a thread-pool thread, or the sole "
"thread in a JS VM). In this way the inversion of control that normally leaks into the program itself with event/"
"callback systems is encapsulated by the mechanism, and you are left with straightforward sequential code. It will "
"also provide the illusion of threads, and more important, separable sequential subsystems, to ClojureScript."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:53
msgid ""
"The primary channel operations within go blocks are http://clojure.github.io/core.async/#clojure.core.async/%3E![>!] "
"(_put_) and http://clojure.github.io/core.async/#clojure.core.async/<![<!] (_take_). The go block itself immediately "
"returns a channel, on which it will eventually put the value of the last expression of the body (if non-nil), and "
"then close."
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:54
#, no-wrap
msgid "Channel on ordinary threads"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:57
msgid ""
"There are analogous operations for use on ordinary threads - http://clojure.github.io/core.async/#clojure.core.async/"
"%3E!![>!!] (_put blocking_) and http://clojure.github.io/core.async/#clojure.core.async/<!![<!!] (_take blocking_), "
"which will block the thread on which they are called, until complete. While you can use these operations on threads "
"created with e.g. future, there is also a macro, http://clojure.github.io/core.async/#clojure.core.async/"
"thread[thread], analogous to `go`, that will launch a first-class thread and similarly return a channel, and should "
"be preferred over `future` for channel work."
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:58
#, no-wrap
msgid "Mixing modes"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:61
msgid ""
"You can put on a channel from either flavor of `>!`/`>!!` and similarly take with either of `<!`/`<<!` in any "
"combination, i.e. the channel is oblivious to the nature of the threads which use it."
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:62
#, no-wrap
msgid "alt"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:65
msgid ""
"It is often desirable to be able to wait for any one (and only one) of a set of channel operations to complete. This "
"powerful facility is made available through the http://clojure.github.io/core.async/#clojure.core.async/alts![alts!] "
"function (for use in `go` blocks), and the analogous http://clojure.github.io/core.async/#clojure.core.async/alts!!"
"[alts!!] (_alts blocking_). If more than one operation is available to complete, one can be chosen at random or by "
"priority (i.e. in the order they are supplied). There are corresponding http://clojure.github.io/core.async/#clojure."
"core.async/alt![alt!] and http://clojure.github.io/core.async/#clojure.core.async/alt!![alt!!] macros that combine "
"the choice with conditional evaluation of expressions."
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:66
#, no-wrap
msgid "Timeouts"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:69
msgid ""
"Timeouts are just channels that automatically close after a period of time. You can create one with the http://"
"clojure.github.io/core.async/#clojure.core.async/timeout[timeout] function, then just include the timeout in an `alt` "
"variant. A nice aspect of this is that timeouts can be shared between threads of control, e.g. in order to have a set "
"of activities share a bound."
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:70
#, no-wrap
msgid "The value of values"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:73
msgid ""
"As with STM, the pervasive use of persistent data structures offers particular benefits for CSP-style channels. In "
"particular, it is always safe and efficient to put a Clojure data structure on a channel, without fear of its "
"subsequent use by either the producer or consumer."
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:74
#, no-wrap
msgid "Contrasting Go language channels"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:77
msgid "core.async has obvious similarities to Go channels. Some differences with Go are:"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:79
msgid "All of the operations are expressions (not statements)"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:80
msgid "This is a library, not syntax"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:81
msgid "`alts!` is a function (and supports a runtime-variable number of operations)"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:82
msgid "Priority is supported in `alt`"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:84
msgid ""
"Finally, Clojure is hosted, i.e. we are bringing these facilities to existing platforms, not needing a custom "
"runtime. The flip-side is we don't have the underpinnings we would with a custom runtime. Reaching existing platforms "
"remains a core Clojure value proposition."
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:85
#, no-wrap
msgid "Whither actors?"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:88
msgid ""
"I remain unenthusiastic about actors. They still couple the producer with the consumer. Yes, one can emulate or "
"implement certain kinds of queues with actors (and, notably, people often do), but since any actor mechanism already "
"incorporates a queue, it seems evident that queues are more primitive. It should be noted that Clojure's mechanisms "
"for concurrent use of state remain viable, and channels are oriented towards the flow aspects of a system."
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:89
#, no-wrap
msgid "Deadlocks"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:92
msgid ""
"Note that, unlike other Clojure concurrency constructs, channels, like all communications, are subject to deadlocks, "
"the simplest being waiting for a message that will never arrive, which must be dealt with manually via timeouts etc. "
"CSP proper is amenable to certain kinds of automated correctness analysis. No work has been done on that front for "
"core.async as yet."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:94
msgid ""
"Also note that async channels are not intended for fine-grained computational parallelism, though you might see "
"examples in that vein."
msgstr ""

#. type: Title ==
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:95
#, no-wrap
msgid "Future directions"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:98
msgid ""
"Networks channels and distribution are interesting areas for attention. We will also being doing performance tuning "
"and refining the APIs."
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:99
#, no-wrap
msgid "Team"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:102
msgid "I'd like to thank the team that helped bring core.async to life:"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:108
msgid "Sam Umbach"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:110
msgid "And once again, Tom Faulhaber for his work on autodoc."
msgstr ""

#. type: Title ===
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:111
#, no-wrap
msgid "Status"
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:114
msgid ""
"While the library is still in an early state , we are ready for people to start trying it out and giving us feedback. "
"The CLJS port is still work in progress. Please have a look at the https://github.com/clojure/core.async/tree/master/"
"examples[examples], which we will expand over time."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:116
msgid ""
"It should be noted that the protocols behind the implementation should still be considered an implementation detail "
"for the time being, until we finish our exploratory work around network channels, which might impact their design."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:118
msgid "I hope that these async channels will help you build simpler and more robust programs."
msgstr ""

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:119
#: en/content/news/2014/08/06/transducers-are-coming.adoc:121
#: en/content/news/2016/05/23/introducing-clojure-spec.adoc:30 en/content/news/2012/05/08/reducers.adoc:172
#: en/content/news/2012/05/15/anatomy-of-reducer.adoc:198
msgid "Rich"
msgstr ""
