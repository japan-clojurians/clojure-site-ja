# Japanese translations for clojure-site-ja package
# Copyright (C) 2019 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: 2019-07-25 20:54+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title ==
#: en/content/reference/transients.adoc:75 en/content/guides/equality.adoc:14 en/content/guides/comparators.adoc:12
#: en/content/news/2017/01/31/state-of-clojure-2016.adoc:83 en/content/news/2012/05/08/reducers.adoc:164
#: en/content/news/2012/05/15/anatomy-of-reducer.adoc:194 en/content/about/state.adoc:74
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Title ==
#: en/content/reference/datatypes.adoc:21 en/content/reference/protocols.adoc:36
#: en/content/news/2012/05/08/reducers.adoc:21 en/content/about/dynamic.adoc:42
#, no-wrap
msgid "Basics"
msgstr "基本"

#. type: Plain text
#: en/content/news/2013/06/28/clojure-clore-async-channels.adoc:119
#: en/content/news/2014/08/06/transducers-are-coming.adoc:121
#: en/content/news/2016/05/23/introducing-clojure-spec.adoc:30 en/content/news/2012/05/08/reducers.adoc:172
#: en/content/news/2012/05/15/anatomy-of-reducer.adoc:198
msgid "Rich"
msgstr ""

#. type: Title =
#: en/content/news/2012/05/08/reducers.adoc:1
#, no-wrap
msgid "Reducers - A Library and Model for Collection Processing"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:4
#, fuzzy
#| msgid "Rich Hickey 2015-01-01"
msgid "Rich Hickey 2012-05-08"
msgstr "Rich Hickey 2015-01-01"

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:9
msgid ""
"I'm happy to have https://github.com/clojure/clojure/commit/89e5dce0fdfec4bc09fa956512af08d8b14004f6[pushed] today "
"the beginnings of a new Clojure library for higher-order manipulation of collections, based upon _reduce_ and _fold_. "
"Of course, Clojure already has Lisp's _reduce_, which corresponds to the traditional _foldl_ of functional "
"programming. _reduce_ is based upon sequences, as are many of the core functions of Clojure, like _map_, _filter_ "
"etc. So, what could be better? It's a long story, so I'll give you the ending first:"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:11
msgid "There is a new namespace: clojure.core.reducers"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:12
msgid "It contains new versions of `map`, `filter` etc based upon transforming reducing functions - reducers"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:13
msgid "It contains a new function, `fold`, which is a parallel reduce+combine"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:14
msgid "`fold` uses fork/join when working with (the existing!) Clojure vectors and maps"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:15
msgid "Your new parallel code has exactly the same shape as your existing seq-based code"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:16
msgid "The reducers are composable"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:17
msgid "Reducer implementations are primarily functional - no iterators"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:18
msgid "The model uses regular data structures, not 'parallel collections' or other OO malarkey"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:19
msgid "It's fast, and can become faster still"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:20
msgid "This is work-in-progress"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:24
msgid "The story starts best at the bottom."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:26
msgid "Clojure and other functional languages have a function called _map_ that takes a function and a collection/list."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:28
msgid "What does it mean to map a function on a collection?"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:29
msgid "What are the common signatures?"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:30
msgid "Do they http://www.infoq.com/presentations/Simple-Made-Easy[complect] what to do with how to do it?"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:32
msgid ""
"The classic recursive functional definition of _map_ is to apply _f_ to the first thing in the collection, then "
"_cons_ the result onto the result of mapping _f_ on the _rest_ of the collection. This definition includes plenty of "
"'how':"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:34
msgid "How: mechanism - recursion"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:35
msgid "How: order - sequentially"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:36
msgid "How: laziness - (often) lazily"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:37
msgid "How: representation - making a list/seq, or other concrete collection"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:39
msgid ""
"Newer OO frameworks will often remove some of these problems by having map be a function of `fn * Coll -> Coll` for "
"any type of Coll, removing the sequentiality but also losing the laziness, and they still specify a concrete "
"collection result."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:41
msgid ""
"Semantically, and minimally, _map_ means \"apply-to-all\" e.g. `(map inc coll)` means give me a (logical) collection "
"where every item is one greater than it was in _coll_. But, _map_ doesn't know how to navigate around every "
"collection - the use of seqs/lists/iterators/streams etc forces a shared known representation. Nor does `inc` (or any "
"function) know how to apply itself to every collection representation, else we could just say `(inc coll)`."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:43
msgid "The only thing that knows how to apply a function to a collection is the collection itself."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:45
msgid "What is the generic gateway to a collection applying things to itself? In Clojure, it is (internal) _reduce_."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:47
msgid ""
"We now have a new super-generalized and minimal abstraction for collections - a collection is some set of things "
"that, when given a function to apply to its contents, can do so and give you the result, i.e. __a collection is (at "
"minimum) **reducible**__. In other words, you can call _reduce_ on it."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:49
msgid ""
"Thus, `core.reducers/map` is a function of `fn * reducible -> reducible`. (Whereas `core/map` is a function of `fn * "
"seqable -> seqable`.)"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:51
msgid ""
"Now, how? If someone is going to ask the result of `(map inc coll)` to reduce itself with some function _f_, _map_ "
"must ultimately ask _coll_ to do the job. Rather than pass __coll f__, _map_ passes _coll_ a new, transformed, "
"reducing function that takes what _coll_ supplies, calls `inc` on it, and then calls _f_ on that."
msgstr ""

#. type: delimited block -
#: en/content/news/2012/05/08/reducers.adoc:55
#, no-wrap
msgid "(reduce + (r/map inc [1 2 3])) === (reduce (fn [ret x] (+ ret (inc x))) (+) [1 2 3])\n"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:58
msgid "i.e. the core work of __map f__ looks like this:"
msgstr ""

#. type: delimited block -
#: en/content/news/2012/05/08/reducers.adoc:64
#, no-wrap
msgid ""
"(fn [f1]\n"
"  (fn [ret v]\n"
"    (f1 ret (f v))))\n"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:67
msgid ""
"It takes a reducing function f1, and returns a new reducing function that calls f1 after applying f to its input."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:69
msgid ""
"Thus you can define _map_ as a function of `fn * reducible -> reducible` by merely transforming the reducing "
"function. Mapping is semantically a function of the function of __**one step**__ of a reduction. This transformation "
"is decomplected from both representation and order. We call functions such as this _map_, that take a reducible, and "
"in turn return something reducible via transformation of the reducing function, reducers."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:71
msgid "Now let's revisit the hows above..."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:73
msgid "How: mechanism - functional transformation of reducing function"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:74
msgid "How: order - doesn't know"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:75
msgid "How: laziness - doesn't know"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:76
msgid "How: representation - doesn't build anything"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:78
msgid ""
"It is important to note that now, when `(map f coll)` is called nothing happens except the creation of a recipe for a "
"new collection, a recipe that is itself reducible. No work is done yet to the contained elements and no concrete "
"collection is produced."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:80
msgid ""
"The beautiful thing is that this 'transformation of reducing function' mechanism also works for many of the "
"traditional seq functions, like _filter_, _take_, _flatten_ etc. Note the fact that _filter_ is (potentially) "
"contractive, and _flatten_ is (potentially) expansive per step - the mechanism is general and not limited to 1:1 "
"transformations. And other reducer definitions are as pretty as map's - none of the imperativeness of iterators, or "
"generators with yield."
msgstr ""

#. type: Title ==
#: en/content/news/2012/05/08/reducers.adoc:81
#, no-wrap
msgid "Ok, So Where's My Cake?"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:84
msgid ""
"If map doesn't do the work of mapping, but merely creates a recipe, when does the work get done? When you reduce its "
"result:"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:90
#, fuzzy
#| msgid ""
#| "(require '[clojure.core.reducers :as r])\n"
#| "(r/fold + (r/filter even? (r/map inc [1 1 1 2])))\n"
#| ";=> 6\n"
msgid "  (require '[clojure.core.reducers :as r])  (reduce + (r/filter even? (r/map inc [1 1 1 2])))  ;=> 6"
msgstr ""
"(require '[clojure.core.reducers :as r])\n"
"(r/fold + (r/filter even? (r/map inc [1 1 1 2])))\n"
";=> 6\n"

#. type: delimited block -
#: en/content/news/2012/05/08/reducers.adoc:93
#, no-wrap
msgid "That should look familiar - it's the same named functions, applied in the same order, with the same arguments, producing the same result as the Clojure's seq-based fns. The difference is that, reduce being eager, and these reducers fns being out of the seq game, there's no per-step allocation overhead, so it's faster. Laziness is great when you need it, but when you don't you shouldn't have to pay for it.\n"
msgstr ""

#. type: delimited block -
#: en/content/news/2012/05/08/reducers.adoc:95
#, no-wrap
msgid "The reducer fns are curried, and they can be easily composed:\n"
msgstr ""

#. type: delimited block -
#: en/content/news/2012/05/08/reducers.adoc:102
#, fuzzy, no-wrap
#| msgid ""
#| "(require '[clojure.core.reducers :as r])\n"
#| "(r/fold + (r/filter even? (r/map inc [1 1 1 2])))\n"
#| ";=> 6\n"
msgid ""
"[source,clojure]\n"
"----  \n"
";;red is a reducer awaiting a collection\n"
"(def red (comp (r/filter even?) (r/map inc)))\n"
"(reduce + (red [1 1 1 2]))\n"
";=> 6\n"
msgstr ""
"(require '[clojure.core.reducers :as r])\n"
"(r/fold + (r/filter even? (r/map inc [1 1 1 2])))\n"
";=> 6\n"

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:105
msgid "Thus reduction 'recipes' (reducers) are first class."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:107
msgid "What if we _want_ a collection result? It's good to know that into uses reduce:"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:112
#, fuzzy
#| msgid "(into [] (r/filter even? (r/map inc (range 100000))))\n"
msgid "  (into [] (r/filter even? (r/map inc [1 1 1 2])))  ;=> [2 2 2]"
msgstr "(into [] (r/filter even? (r/map inc (range 100000))))\n"

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:115
msgid "Note there are no intermediate collections produced."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:117
msgid "And, of course, you don't always want a result of the same collection type:"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:122
#, fuzzy
#| msgid "(into [] (r/filter even? (r/map inc (range 100000))))\n"
msgid "  (into #{} (r/filter even? (r/map inc [1 1 1 2])))  ;=> #{2}"
msgstr "(into [] (r/filter even? (r/map inc (range 100000))))\n"

#. type: Title ==
#: en/content/news/2012/05/08/reducers.adoc:124
#, no-wrap
msgid "Simplicity is Opportunity"
msgstr ""

#. type: delimited block -
#: en/content/news/2012/05/08/reducers.adoc:127
msgid ""
"Decomplecting the core operations from representation and laziness has given us some speed, but what about the "
"elimination of order? It should open the door to parallelism, but we are stuck with the semantics of _reduce_ being "
"_foldl_, i.e. it uses an accumulator and is http://vimeo.com/6624203[fundamentally serial]. We can parallelize "
"reduction by using independent sub-reductions and combining their results, and the library defines a function that "
"does just that: __**fold**__."
msgstr ""

#. type: delimited block -
#: en/content/news/2012/05/08/reducers.adoc:129
msgid ""
"The primary signature of fold takes a combining function, a reducing function, and a collection and returns the "
"result of combining the results of reducing subsegments of the collection, potentially in parallel. Obviously if the "
"work is to occur in parallel, the functions must be associative, but they need not be commutative - _fold_ preserves "
"order. Note that there is no initial 'seed' or 'accumulator' value, as there may be with reduce and foldl. But, since "
"the subsegments are themselves reduced (with _reduce_), it raises the question as to what supplies the seed values "
"for those reductions?"
msgstr ""

#. type: delimited block -
#: en/content/news/2012/05/08/reducers.adoc:131
msgid ""
"The combining function (an associative binary fn) must have some 'identity' value, a value that, when combined with "
"some X, yields X. 0 is an identity value for +, as is 1 for *. The combining fn must supply an identity value when "
"called with no arguments (as do + and *). It will be called with no arguments to supply a seed for each leaf "
"reduction. There is a fn (called _monoid_, shh!) to help you build such combining functions."
msgstr ""

#. type: delimited block -
#: en/content/news/2012/05/08/reducers.adoc:133
msgid "If no combining fn is supplied, the reducing fn is used. Simple folds look like reduces:"
msgstr ""

#. type: delimited block -
#: en/content/news/2012/05/08/reducers.adoc:138
msgid "[source,clojure] ---- (r/fold + [1 2 3 4])  ;=> 10"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:141
msgid ""
"But by promising less (i.e. not promising stepwise reduction from left or right) _fold_ can do more - run in "
"parallel. It does this when the collection is amenable to parallel subdivision. Ideal candidates are data structures "
"built from trees. Clojure vectors and maps are trees, and have parallel implementations of _fold_ based upon the "
"https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html[ForkJoin framework]."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:143
msgid ""
"What if the underlying collection is not amenable (e.g. is a sequence)? _fold_ just devolves into _reduce_, producing "
"the same semantic, if not physical, result."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:145
msgid ""
"There's a tremendous amount you can accomplish with this reduce+combine strategy, especially when you consider that "
"the map, filter etc reducers will not constitute independent layers of parallel jobs - they just transform the "
"reducing fn working on the leaves."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:147
msgid ""
"You can have a look at the `cat` function included in the library for an interesting example of a combining fn. cat "
"quickly gathers up the fold results, forming a binary tree with the reductions as leaves. It returns a highly "
"abstract, yet now quite useful 'collection' that is just counted, reducible, foldable and seqable."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:149
msgid "Oh yeah, perf. Don't be surprised to see things become 2-3X faster, or more with more cores."
msgstr ""

#. type: Title ==
#: en/content/news/2012/05/08/reducers.adoc:150
#, no-wrap
msgid "More Opportunity (i.e. Work)"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:153
msgid "As much fun as this is, there's still more fun to be had by those so inclined:"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:155
msgid "There are more seq fns that could become reducer fns"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:156
msgid ""
"Given multiple iterable sources, we should be able to build a multi-reducible, recovering the multi-input "
"capabilities of map."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:157
msgid "Arrays, arraylists, strings etc are all amenable to parallel fold."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:158
msgid "fork/join-based vector fold is 14 lines, so these are not difficult."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:159
msgid "Those IFn.LLL, DDD etc primitive-taking function interfaces can now spring to life."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:160
msgid "We should be able to build primitive-transmitting reducer function pipelines."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:161
msgid "We'd then need to look for and use them in the reductions of arrays and vectors of primitives"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:162
msgid ""
"Internal reduce solves the lazily dangling open resource problem, a problem solved similarly by http://www.haskell."
"org/haskellwiki/Enumerator_and_iteratee[Haskell's enumerators and iteratees]. (Note that unlike iteratees, reducers "
"do not allocate wrappers per step)"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:163
msgid "We need reducible I/O sources."
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:167
msgid ""
"By adopting an alternative view of collections as reducible, rather than seqable things, we can get a complementary "
"set of fundamental operations that tradeoff laziness for parallelism, while retaining the same high-level, functional "
"programming model. Because the two models retain the same shape, we can easily choose whichever is appropriate for "
"the task at hand."
msgstr ""

#. type: Title ==
#: en/content/news/2012/05/08/reducers.adoc:168
#, no-wrap
msgid "Follow Up"
msgstr ""

#. type: Plain text
#: en/content/news/2012/05/08/reducers.adoc:171
msgid ""
"See the follow up <<xref/../../../05/15/anatomy-of-reducer#,blog post>> for more details about what constitutes a "
"reducer, as well as some background about the library."
msgstr ""
