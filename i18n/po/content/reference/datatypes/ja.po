# Japanese translations for clojure-site-ja package
# Copyright (C) 2016 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: 2019-06-15 17:50+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: en/content/dev/creating_tickets.adoc:46 en/content/reference/datatypes.adoc:115
#: en/content/reference/special_forms.adoc:182
msgid "Example:"
msgstr "例:"

#. type: Plain text
#: en/content/reference/libs.adoc:4 en/content/reference/data_structures.adoc:4 en/content/reference/multimethods.adoc:4
#: en/content/reference/agents.adoc:4 en/content/reference/lazy.adoc:4 en/content/reference/transients.adoc:4
#: en/content/reference/macros.adoc:4 en/content/reference/transducers.adoc:4 en/content/reference/atoms.adoc:4
#: en/content/reference/other_functions.adoc:4 en/content/reference/datatypes.adoc:4
#: en/content/reference/repl_and_main.adoc:4 en/content/reference/protocols.adoc:4
#: en/content/reference/other_libraries.adoc:4 en/content/reference/documentation.adoc:4
#: en/content/reference/refs.adoc:4 en/content/reference/lisps.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/sequences.adoc:4 en/content/reference/reducers.adoc:4 en/content/reference/metadata.adoc:4
#: en/content/reference/evaluation.adoc:4 en/content/reference/compilation.adoc:4 en/content/community/downloads.adoc:4
#: en/content/community/license.adoc:4 en/content/community/downloads_older.adoc:4 en/content/community/swag.adoc:4
#: en/content/community/libraries.adoc:4 en/content/404.adoc:4 en/content/about/spec.adoc:4
#: en/content/about/clojureclr.adoc:4 en/content/about/dynamic.adoc:4 en/content/about/concurrent_programming.adoc:4
#: en/content/about/functional_programming.adoc:4 en/content/about/state.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/clojurescript.adoc:4 en/content/about/runtime_polymorphism.adoc:4 en/content/about/lisp.adoc:4
#: en/content/about/rationale.adoc:4 en/content/about/features.adoc:4 en/content/privacy.adoc:4 en/content/search.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr "Rich Hickey 2015-01-01"

#. type: Title =
#: en/content/reference/datatypes.adoc:1
#, no-wrap
msgid "Datatypes: deftype, defrecord and reify"
msgstr "データ型: deftypeとdefrecordとreify"

#. type: Title ==
#: en/content/reference/datatypes.adoc:17 en/content/reference/protocols.adoc:16
#, no-wrap
msgid "Motivation"
msgstr "動機"

#. type: Plain text
#: en/content/reference/datatypes.adoc:20 en/content/reference/protocols.adoc:19
msgid ""
"Clojure is written in terms of abstractions. There are abstractions for sequences, collections, callability, etc. In "
"addition, Clojure supplies many implementations of these abstractions. The abstractions are specified by host "
"interfaces, and the implementations by host classes. While this was sufficient for bootstrapping the language, it "
"left Clojure without similar abstraction and low-level implementation facilities. The <<protocols#,protocols>> and "
"<<datatypes#,datatypes>> features add powerful and flexible mechanisms for abstraction and data structure definition "
"with no compromises vs the facilities of the host platform."
msgstr ""
"Clojureは抽象に基づいて記述されている。シーケンス、コレクション、コーラビリティなどの抽象が存在する。加えてClojureはこ"
"れらの抽象の複数の実装を提供している。これらの抽象はホストのインターフェース、実装はホストのクラスで定義されている。こ"
"れは言語自身のブートストラップには十分だったものの、Clojureが同様の抽象化と低レベルの実装の機構を欠く原因になってい"
"た。 <<protocols#,プロトコル>> と <<datatypes#,データ型>> という機能は、強力で柔軟な抽象化とデータ構造定義のメカニズム"
"をホストプラットフォームの機構に対して妥協することなく提供する。"

#. type: Title ==
#: en/content/reference/datatypes.adoc:21 en/content/reference/protocols.adoc:36
#: en/content/news/2012/05/08/reducers.adoc:21 en/content/about/dynamic.adoc:42
#, no-wrap
msgid "Basics"
msgstr "基本"

#. type: Plain text
#: en/content/reference/datatypes.adoc:24
msgid ""
"The datatype features - https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/deftype[deftype] , "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/defrecord[defrecord] and https://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/reify[reify] , provide the mechanism for defining implementations of "
"abstractions, and in the case of reify, instances of those implementations. The abstractions themselves are defined "
"by either <<protocols#,protocols>> or interfaces. A datatype provides a host type, (named in the case of deftype and "
"defrecord, anonymous in the case of reify), with some structure (explicit fields in the case of deftype and "
"defrecord, implicit closure in the case of reify), and optional in-type implementations of abstraction methods. They "
"support, in a relatively clean manner, access to the highest-performance primitive representation and polymorphism "
"mechanisms of the host. N.B. that they are not merely host-in-parens constructs. They support only a circumscribed "
"subset of the host facilities, often with more dynamism than the host itself. The intent is that, unless interop "
"forces one to go beyond their circumscribed scope, one need not leave Clojure to get the highest-performing data "
"structures possible on the platform."
msgstr ""
"データ型機能 - http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/deftype[deftype]と http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/defrecord[defrecord]と http://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/reify[reify]は抽象の実装を定義するメカニズムを提供し、reifyについてはそれらの実装のインスタ"
"ンスを提供する。抽象自体は <<protocols#,プロトコル>>もしくはインターフェースによって定義される。データ型はホストの型"
"(deftypeとdefrecordについては名前付き、reifyの場合は匿名)と何らかの構造(deftypeとdefrecordについては明示的なフィール"
"ド、reifyの場合は暗黙的なクロージャー)および任意の型の抽象メソッドの実装を提供する。これらは比較的綺麗な方法でホストの"
"最もパフォーマンスの良いプリミティブへのアクセスとポリモーフィズム機構をサポートする。これらはただホストを括弧の中に記"
"述するメカニズムではなく、ホストの機能の制限されたサブセットのみをサポートしており、多くの場合ホスト自身よりも動的であ"
"る点に注意する必要がある。意図としては、ホストとの連携のために制限されたスコープの外に出る必要がない限り、プラット"
"フォーム上で最もパフォーマンスの良いデータ構造を手にするためにClojureを離れる必要はない。"

#. type: Title ==
#: en/content/reference/datatypes.adoc:25
#, no-wrap
msgid "deftype and defrecord"
msgstr "deftypeとdefrecord"

#. type: Plain text
#: en/content/reference/datatypes.adoc:28
msgid ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/deftype[deftype] and https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/defrecord[defrecord] dynamically generate compiled bytecode for a named "
"class with a set of given fields, and, optionally, methods for one or more protocols and/or interfaces. They are "
"suitable for dynamic and interactive development, need not be AOT compiled, and can be re-evaluated in the course of "
"a single session. They are similar to defstruct in generating data structures with named fields, but differ from "
"defstruct in that:"
msgstr ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/deftype[deftype]と https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/defrecord[defrecord]は、与えられたフィールドと任意のプロトコル/インター"
"フェースのメソッドを持つ、名前付きのクラスのコンパイル済みバイトコードを動的に生成する。これらは動的でインタラクティブ"
"な開発に向いており、AOTコンパイルを行う必要もなく、単一のセッション内で再評価を行うこともできる。名前付きのフィールド"
"を持つデータ構造を生成する点ではdefstructと似ているが、以下の点で異なる:"

#. type: Plain text
#: en/content/reference/datatypes.adoc:31
msgid "They generate a unique class, with fields corresponding to the given names."
msgstr "与えられた名前に対応するフィールドを持つユニークなクラスを生成する。"

#. type: Plain text
#: en/content/reference/datatypes.adoc:32
msgid "the resulting class has a proper type, unlike conventions for encoding type for structs in metadata"
msgstr "生成されたクラスは正当な型を持ち、メタデータに型をエンコードするdefstructの規約とは異なる"

#. type: Plain text
#: en/content/reference/datatypes.adoc:33
msgid "because they generate a named class, it has an accessible constructor"
msgstr "名前付きのクラスを生成するため、アクセス可能なコンストラクターを持つ"

#. type: Plain text
#: en/content/reference/datatypes.adoc:34
msgid "fields can have type hints, and can be primitive"
msgstr "フィールドはプリミティブ型を含む型ヒントを持つことができる"

#. type: Plain text
#: en/content/reference/datatypes.adoc:35
msgid ""
"note that currently a type hint of a non-primitive type will not be used to constrain the field type nor the "
"constructor arg, but will be used to optimize its use in the class methods"
msgstr ""
"注: 現在、非プリミティブな型ヒントはフィールドの型やコンストラクターの引数を制限するものではないが、クラスメソッドの利"
"用時の最適化のために使用される"

#. type: Plain text
#: en/content/reference/datatypes.adoc:36
msgid "constraining the field type and constructor arg is planned"
msgstr "フィールドやコンストラクターの型の制限は計画されている"

#. type: Plain text
#: en/content/reference/datatypes.adoc:37
msgid "a deftype/defrecord can implement one or more protocols and/or interfaces"
msgstr "deftype/defrecordは1つ以上のプロトコルもしくはインターフェースを実装することができる"

#. type: Plain text
#: en/content/reference/datatypes.adoc:38
msgid "deftype/defrecord can be written with a special reader syntax #my.thing[1 2 3] where:"
msgstr "deftype/defrecordは特別なリーダーシンタックス #my.thing[1 2 3] で記述することができる:"

#. type: Plain text
#: en/content/reference/datatypes.adoc:39
msgid "each element in the vector form is passed to the deftype/defrecord's constructor un-evaluated"
msgstr "ベクターの各要素がdeftype/defrecordのコンストラクターに評価されずに渡される"

#. type: Plain text
#: en/content/reference/datatypes.adoc:40
msgid "the deftype/defrecord name must be fully qualified"
msgstr "deftype/defrecordの名前は完全修飾されている必要がある"

#. type: Plain text
#: en/content/reference/datatypes.adoc:41 en/content/reference/datatypes.adoc:62
msgid "only available in Clojure versions later than 1.3"
msgstr "Clojureのバージョン1.3以降でのみ利用可能"

#. type: Plain text
#: en/content/reference/datatypes.adoc:42
msgid ""
"when a deftype/defrecord Foo is defined a corresponding function `pass:[->Foo]` is defined that passes its arguments "
"to the constructor (versions 1.3 and later only)"
msgstr ""
"deftype/defrecord Fooが定義された場合、対応する引数をコンストラクターに渡す関数 `pass:[->Foo]` が定義される(バージョン"
"1.3以降)"

#. type: Plain text
#: en/content/reference/datatypes.adoc:44
msgid ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/deftype[deftype] and https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/defrecord[defrecord] differ in the following ways:"
msgstr ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/deftype[deftype]と https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/defrecord[defrecord]は以下のように異なる:"

#. type: Plain text
#: en/content/reference/datatypes.adoc:47
msgid "deftype provides no functionality not specified by the user, other than a constructor"
msgstr "deftypeはコンストラクター以外にはユーザーに明示されていないいかなる機能も提供しない"

#. type: Plain text
#: en/content/reference/datatypes.adoc:48
msgid "defrecord provides a complete implementation of a persistent map, including:"
msgstr "defrecordは以下を含む永続的なマップの完全な実装を提供する:"

#. type: Plain text
#: en/content/reference/datatypes.adoc:49
msgid "value-based equality and hashCode"
msgstr "値に基づく同値比較とhashCode"

#. type: Plain text
#: en/content/reference/datatypes.adoc:50
msgid "metadata support"
msgstr "メタデータのサポート"

#. type: Plain text
#: en/content/reference/datatypes.adoc:51
msgid "associative support"
msgstr "associativeのサポートト"

#. type: Plain text
#: en/content/reference/datatypes.adoc:52
msgid "keyword accessors for fields"
msgstr "フィールドのキーワードアクセサ"

#. type: Plain text
#: en/content/reference/datatypes.adoc:53
msgid "extensible fields (you can assoc keys not supplied with the defrecord definition)"
msgstr "拡張可能なフィールド(defrecordの定義にないフィールドのキーをassocすることができる)"

#. type: Plain text
#: en/content/reference/datatypes.adoc:54
msgid "etc"
msgstr "など"

#. type: Plain text
#: en/content/reference/datatypes.adoc:55
msgid "deftype supports mutable fields, defrecord does not"
msgstr "deftypeはミュータブルなフィールドをサポートするが、defrecordはサポートしない"

#. type: Plain text
#: en/content/reference/datatypes.adoc:56
msgid ""
"defrecord supports an additional reader form of #my.record{:a 1, :b 2} taking a map that initializes a defrecord "
"according to:"
msgstr "defrecordは加えて初期値のマップを受け取る#my.record{:a 1, :b 2}のリーダーフォームをサポートする:"

#. type: Plain text
#: en/content/reference/datatypes.adoc:57
msgid "the defrecord name must be fully qualified"
msgstr "defrecord名は完全修飾されている必要がある"

#. type: Plain text
#: en/content/reference/datatypes.adoc:58
msgid "the elements in the map are un-evaluated"
msgstr "マップ内の要素は評価されない"

#. type: Plain text
#: en/content/reference/datatypes.adoc:59
msgid "existing defrecord fields take the keyed values"
msgstr "既存のdefrecordフィールドはキーに対応する値をとる"

#. type: Plain text
#: en/content/reference/datatypes.adoc:60
msgid "defrecord fields without keyed values in the literal map are initialized to nil"
msgstr "リテラルマップにキーに対応する値のないdefrecordフィールドはnilに初期化される"

#. type: Plain text
#: en/content/reference/datatypes.adoc:61
msgid "additional keyed values are allowed and added to the defrecord"
msgstr "追加のキーに対する値は許容されており、defrecordに追加される"

#. type: Plain text
#: en/content/reference/datatypes.adoc:63
msgid ""
"when a defrecord Bar is defined a corresponding function `pass:[map->Bar]` is defined that takes a map and "
"initializes a new record instance with its contents (versions 1.3 and later only)"
msgstr ""
"defrecord Barが定義された場合、受け取ったマップの値でインスタンスの初期化を行う `pass:[map->Bar]` が定義される(バー"
"ジョン1.3以降)"

#. type: Title ==
#: en/content/reference/datatypes.adoc:64
#, no-wrap
msgid "Why have both deftype and defrecord?"
msgstr "なぜdeftypeとdefrecordの両方があるのか?"

#. type: Plain text
#: en/content/reference/datatypes.adoc:67
msgid ""
"It ends up that classes in most OO programs fall into two distinct categories: those classes that are artifacts of "
"the implementation/programming domain, e.g. String or collection classes, or Clojure's reference types; and classes "
"that represent application domain information, e.g. Employee, PurchaseOrder etc. It has always been an unfortunate "
"characteristic of using classes for application domain information that it resulted in information being hidden "
"behind class-specific micro-languages, e.g. even the seemingly harmless employee.getName() is a custom interface to "
"data. Putting information in such classes is a problem, much like having every book being written in a different "
"language would be a problem. You can no longer take a generic approach to information processing. This results in an "
"explosion of needless specificity, and a dearth of reuse."
msgstr ""
"結論としては、ほとんどのOOプログラムは明確に2つに分類される:実装/プログラミングのドメインのもの(例えばStringやコレク"
"ションのクラス、もしくはClojureの参照型)とアプリケーションドメインの情報を表現するクラス(例えば従業員、購入注文など)"
"だ。アプリケーションドメインの情報にクラスが使用されることは常に不幸な特徴であった。クラス特有のマイクロ言語の背後に情"
"報が隠されてしてしまうことにつながるからだ。例えば一見無害なemployee.getName()もデータに対する特別なインターフェース"
"だ。そのようなクラスに情報を入れることは、全ての本が異なる言語で書かれていたら問題になるのと同じように問題だ。情報を処"
"理する際に一般的なアプローチを取ることができなくなり、無用な特殊性の爆発を招き、再利用を不可能にする。"

#. type: Plain text
#: en/content/reference/datatypes.adoc:69
msgid ""
"This is why Clojure has always encouraged putting such information in maps, and that advice doesn't change with "
"datatypes. By using defrecord you get generically manipulable information, plus the added benefits of type-driven "
"polymorphism, and the structural efficiencies of fields. OTOH, it makes no sense for a datatype that defines a "
"collection like vector to have a default implementation of map, thus deftype is suitable for defining such "
"programming constructs."
msgstr ""
"Clojureが常に情報をマップに入れるように奨励してきたのはこれが理由で、データ型についてもこの奨励は変わらない。 "
"defrecordを使用することによって、一般的に操作可能な情報に加えて、型駆動のポリモーフィズムというさらなる恩恵やフィール"
"ド構造による効率性も得ることができる。その一方でベクターのようなコレクションを定義するデータ型にマップのデフォルト実装"
"を持たせる意味はなく、deftypeはそのようなプログラミングのための構造を定義することに向いている。"

#. type: Plain text
#: en/content/reference/datatypes.adoc:71
msgid ""
"Overall, records will be better than structmaps for all information-bearing purposes, and you should move such "
"structmaps to defrecord. It is unlikely much code was trying to use structmaps for programming constructs, but if so, "
"you will find deftype much more suitable."
msgstr ""
"全体として、レコードは情報を持つあらゆる目的でstructmapよりも優れており、そのようなstructmapはdefrecordに移行するべき"
"だ。プログラミングのための構造にstructmapを使用する可能性は低いだろうが、そのような場合にはdeftypeがはるかに向いてい"
"る。"

#. type: Plain text
#: en/content/reference/datatypes.adoc:73
msgid ""
"AOT-compiled deftype/defrecord may be suitable for some of the use cases of *gen-class*, where their limitations are "
"not prohibitive. In those cases, they will have better performance than gen-class."
msgstr ""
"deftype/defrecordの事前コンパイルは制約が障害にならないいくつかの *gen-class* のユースケースに適していると思われる。そ"
"のような場合はgen-classよりもパフォーマンスが良くなる。"

#. type: Title ==
#: en/content/reference/datatypes.adoc:74
#, no-wrap
msgid "Datatypes and protocols are opinionated"
msgstr "データ型とプロトコルには強い主張がある"

#. type: Plain text
#: en/content/reference/datatypes.adoc:77
msgid ""
"While datatypes and protocols have well-defined relationships with host constructs, and make for a great way to "
"expose Clojure functionality to Java programs, they are not primarily interop constructs. That is, they make no "
"effort to completely mimic or adapt to all of the OO mechanisms of the host. In particular, they reflect the "
"following opinions:"
msgstr ""
"datatypeとprotocolはホストの言語構造と明瞭な関係を持っており、Clojureの機能をJavaのプログラムに提供する良い手段ではあ"
"るものの、ホストとの連携のための言語構造ではない。つまりは、ホストの全てのOOのメカニズムを完全に真似したり適合させたり"
"するための努力は一切していない。具体的には以下の意見を反映している:"

#. type: Plain text
#: en/content/reference/datatypes.adoc:79
msgid "Concrete derivation is bad"
msgstr "具象的な派生は悪手だ"

#. type: Plain text
#: en/content/reference/datatypes.adoc:80
msgid "you cannot derive datatypes from concrete classes, only interfaces"
msgstr "具象クラスからデータ型を派生させることはできず、インターフェースからのみ行える"

#. type: Plain text
#: en/content/reference/datatypes.adoc:81
msgid "You should always program to protocols or interfaces"
msgstr "常にプロトコルもしくはインターフェースに対してプログラムするべきだ"

#. type: Plain text
#: en/content/reference/datatypes.adoc:82
msgid "datatypes cannot expose methods not in their protocols or interfaces"
msgstr "データ型はそのプロトコルもしくはインターフェースで定義されていないメソッドを公開することはできない"

#. type: Plain text
#: en/content/reference/datatypes.adoc:83
msgid "Immutability should be the default"
msgstr "イミュータブルがデフォルトであるべきだ"

#. type: Plain text
#: en/content/reference/datatypes.adoc:84
msgid "and is the only option for records"
msgstr "レコードについては唯一の選択肢となっている"

#. type: Plain text
#: en/content/reference/datatypes.adoc:85
msgid "Encapsulation of information is folly"
msgstr "情報のカプセル化は愚かだ"

#. type: Plain text
#: en/content/reference/datatypes.adoc:86
msgid "fields are public, use protocols/interfaces to avoid dependencies"
msgstr "フィールドはパブリックであり、依存関係を避けるためにプロトコルもしくはインターフェースを利用する"

#. type: Plain text
#: en/content/reference/datatypes.adoc:87
msgid "Tying polymorphism to inheritance is bad"
msgstr "ポリモーフィズムと継承を結びつけることは悪手だ"

#. type: Plain text
#: en/content/reference/datatypes.adoc:88
msgid "protocols free you from that"
msgstr "プロトコルを利用することでこれを避けることができる"

#. type: Plain text
#: en/content/reference/datatypes.adoc:90
msgid ""
"If you use datatypes and protocols you will have a clean, interface-based API to offer your Java consumers. If you "
"are dealing with a clean, interface-based Java API, datatypes and protocols can be used to interoperate with and "
"extend it. If you have a 'bad' Java API, you will have to use gen-class. Only in this way can the programming "
"constructs you use to design and implement your Clojure programs be free of the incidental complexities of OO."
msgstr ""
"データ型とプロトコルを利用すると、Javaの利用者にインターフェースに基づく綺麗なAPIを提供することができる。インター"
"フェースに基づく綺麗なJava APIを利用している場合はデータ型とプロトコルを利用することで連携することも、拡張を行うことも"
"可能になる。「悪い」Java APIがある場合は、gen-classを利用する必要がある。これがClojureプログラムを設計し、実装する際に"
"OOがもたらす偶発的な複雑性を避ける唯一の方法だ。"

#. type: Title ==
#: en/content/reference/datatypes.adoc:91
#, no-wrap
msgid "reify"
msgstr "reify"

#. type: Plain text
#: en/content/reference/datatypes.adoc:94
msgid ""
"While deftype and defrecord define named types, https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"reify[reify] defines both an anonymous type and creates an instance of that type. The use case is where you need a "
"one-off implementation of one or more protocols or interfaces and would like to take advantage of the local context. "
"In this respect it is use case similar to proxy, or anonymous inner classes in Java."
msgstr ""
"deftypeとdefrecordは名前付きの型を定義するが、 https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"reify[reify] は匿名の型を定義しその型のインスタンスを作成する。ユースケースは、一度限りの1つ以上のインターフェース/プ"
"ロトコルの実装でローカルコンテキストを利用したい場合だ。この観点からはproxyやJavaの匿名内部クラスのユースケースに似て"
"いる。"

#. type: Plain text
#: en/content/reference/datatypes.adoc:96
msgid ""
"The method bodies of reify are lexical closures, and can refer to the surrounding local scope. *reify* differs from "
"*proxy* in that:"
msgstr ""
"reifyのメソッドボディはレキシカルクロージャーで、周囲のローカルスコープを参照することができる。 *reify*  は以下の点で "
"*proxy* と異なる:"

#. type: Plain text
#: en/content/reference/datatypes.adoc:99
msgid "Only protocols or interfaces are supported, no concrete superclass."
msgstr "プロトコルもしくはインターフェースのみがサポートされており、具象スーパークラスはサポートされない。"

#. type: Plain text
#: en/content/reference/datatypes.adoc:100
msgid "The method bodies are true methods of the resulting class, not external fns."
msgstr "メソッドのボディは外部の関数ではなく、結果として得られるクラスの本物のメソッドである。"

#. type: Plain text
#: en/content/reference/datatypes.adoc:101
msgid "Invocation of methods on the instance is direct, not using map lookup."
msgstr "インスタンスに対するメソッド呼び出しはマップのルックアップを行うことなく直接実行される。"

#. type: Plain text
#: en/content/reference/datatypes.adoc:102
msgid "No support for dynamic swapping of methods in the method map."
msgstr "メソッドマップのメソッドの動的なスワップはサポートされていない。"

#. type: Plain text
#: en/content/reference/datatypes.adoc:104
msgid ""
"The result is better performance than proxy, both in construction and invocation. *reify* is preferable to proxy in "
"all cases where its constraints are not prohibitive."
msgstr ""
"この結果得られるのは、構築と呼び出しどちらにおいてもproxyより優れたパフォーマンスだ。 *reify* はその制約が障害にならな"
"い限り、あらゆるケースにおいてproxyよりも推奨される。"

#. type: Title ==
#: en/content/reference/datatypes.adoc:105
#, no-wrap
msgid "Java annotation support"
msgstr "Javaアノテーションサポート"

#. type: Plain text
#: en/content/reference/datatypes.adoc:108
msgid ""
"Types created with deftype, defrecord, and definterface, can emit classes that include Java annotations for Java "
"interop. Annotations are described as meta on:"
msgstr ""
"deftype、defrecord、およびdefinterfaceで作成された型は、Javaとの連携のためにJavaアノテーションを含むクラスを生成するこ"
"とができる。アノテーションは以下に対するメタデータとして記述される:"

#. type: Plain text
#: en/content/reference/datatypes.adoc:111
msgid "Type name (deftype/record/interface) - class annotations"
msgstr "型名(deftype/record/interface) - クラスアノテーション"

#. type: Plain text
#: en/content/reference/datatypes.adoc:112
msgid "Field names (deftype/record) - field annotations"
msgstr "フィールド名(deftype/record) - フィールドアノテーション"

#. type: Plain text
#: en/content/reference/datatypes.adoc:113
msgid "Method names (deftype/record) - method annotations"
msgstr "メソッド名(deftype/record) - メソッドアノテーション"

#. type: delimited block -
#: en/content/reference/datatypes.adoc:120
#, no-wrap
msgid ""
"(import [java.lang.annotation Retention RetentionPolicy Target ElementType]\n"
"        [javax.xml.ws WebServiceRef WebServiceRefs])\n"
msgstr ""
"(import [java.lang.annotation Retention RetentionPolicy Target ElementType]\n"
"        [javax.xml.ws WebServiceRef WebServiceRefs])\n"

#. type: delimited block -
#: en/content/reference/datatypes.adoc:122
#, no-wrap
msgid "(definterface Foo (foo []))\n"
msgstr "(definterface Foo (foo []))\n"

#. type: delimited block -
#: en/content/reference/datatypes.adoc:148
#, no-wrap
msgid ""
";; annotation on type\n"
"(deftype ^{Deprecated true\n"
"           Retention RetentionPolicy/RUNTIME\n"
"           javax.annotation.processing.SupportedOptions [\"foo\" \"bar\" \"baz\"]\n"
"           javax.xml.ws.soap.Addressing {:enabled false :required true}\n"
"           WebServiceRefs [(WebServiceRef {:name \"fred\" :type String})\n"
"                           (WebServiceRef {:name \"ethel\" :mappedName \"lucy\"})]}\n"
"  Bar [^int a\n"
"       ;; on field\n"
"       ^{:tag int\n"
"         Deprecated true\n"
"         Retention RetentionPolicy/RUNTIME\n"
"         javax.annotation.processing.SupportedOptions [\"foo\" \"bar\" \"baz\"]\n"
"         javax.xml.ws.soap.Addressing {:enabled false :required true}\n"
"         WebServiceRefs [(WebServiceRef {:name \"fred\" :type String})\n"
"                         (WebServiceRef {:name \"ethel\" :mappedName \"lucy\"})]}\n"
"       b]\n"
"  ;; on method\n"
"  Foo (^{Deprecated true\n"
"         Retention RetentionPolicy/RUNTIME\n"
"         javax.annotation.processing.SupportedOptions [\"foo\" \"bar\" \"baz\"]\n"
"         javax.xml.ws.soap.Addressing {:enabled false :required true}\n"
"         WebServiceRefs [(WebServiceRef {:name \"fred\" :type String})\n"
"                         (WebServiceRef {:name \"ethel\" :mappedName \"lucy\"})]}\n"
"       foo [this] 42))\n"
msgstr ""
";; annotation on type\n"
"(deftype ^{Deprecated true\n"
"           Retention RetentionPolicy/RUNTIME\n"
"           javax.annotation.processing.SupportedOptions [\"foo\" \"bar\" \"baz\"]\n"
"           javax.xml.ws.soap.Addressing {:enabled false :required true}\n"
"           WebServiceRefs [(WebServiceRef {:name \"fred\" :type String})\n"
"                           (WebServiceRef {:name \"ethel\" :mappedName \"lucy\"})]}\n"
"  Bar [^int a\n"
"       ;; on field\n"
"       ^{:tag int\n"
"         Deprecated true\n"
"         Retention RetentionPolicy/RUNTIME\n"
"         javax.annotation.processing.SupportedOptions [\"foo\" \"bar\" \"baz\"]\n"
"         javax.xml.ws.soap.Addressing {:enabled false :required true}\n"
"         WebServiceRefs [(WebServiceRef {:name \"fred\" :type String})\n"
"                         (WebServiceRef {:name \"ethel\" :mappedName \"lucy\"})]}\n"
"       b]\n"
"  ;; on method\n"
"  Foo (^{Deprecated true\n"
"         Retention RetentionPolicy/RUNTIME\n"
"         javax.annotation.processing.SupportedOptions [\"foo\" \"bar\" \"baz\"]\n"
"         javax.xml.ws.soap.Addressing {:enabled false :required true}\n"
"         WebServiceRefs [(WebServiceRef {:name \"fred\" :type String})\n"
"                         (WebServiceRef {:name \"ethel\" :mappedName \"lucy\"})]}\n"
"       foo [this] 42))\n"

#. type: delimited block -
#: en/content/reference/datatypes.adoc:152
#, no-wrap
msgid ""
"(seq (.getAnnotations Bar))\n"
"(seq (.getAnnotations (.getField Bar \"b\")))\n"
"(seq (.getAnnotations (.getMethod Bar \"foo\" nil)))\n"
msgstr ""
"(seq (.getAnnotations Bar))\n"
"(seq (.getAnnotations (.getField Bar \"b\")))\n"
"(seq (.getAnnotations (.getMethod Bar \"foo\" nil)))\n"
