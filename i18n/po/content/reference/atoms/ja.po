# Japanese translations for clojure-site-ja package
# Copyright (C) 2016 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2018-02-07 07:23+0900\n"
"PO-Revision-Date: 2019-06-15 20:37+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: en/content/reference/metadata.adoc:4 en/content/reference/protocols.adoc:4 en/content/reference/sequences.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/reference/libs.adoc:4 en/content/reference/transients.adoc:4
#: en/content/reference/compilation.adoc:4 en/content/reference/other_libraries.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/macros.adoc:4 en/content/reference/transducers.adoc:4
#: en/content/reference/refs.adoc:4 en/content/reference/lazy.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/evaluation.adoc:4 en/content/reference/other_functions.adoc:4
#: en/content/reference/reducers.adoc:4 en/content/reference/data_structures.adoc:4 en/content/reference/atoms.adoc:4
#: en/content/reference/repl_and_main.adoc:4 en/content/reference/agents.adoc:4 en/content/reference/datatypes.adoc:4
#: en/content/community/libraries.adoc:4 en/content/community/license.adoc:4 en/content/community/downloads_older.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/swag.adoc:4 en/content/404.adoc:4
#: en/content/privacy.adoc:4 en/content/search.adoc:4 en/content/about/spec.adoc:4
#: en/content/about/concurrent_programming.adoc:4 en/content/about/lisp.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/about/dynamic.adoc:4 en/content/about/features.adoc:4
#: en/content/about/rationale.adoc:4 en/content/about/state.adoc:4 en/content/about/clojurescript.adoc:4
#: en/content/about/functional_programming.adoc:4 en/content/about/clojureclr.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr "Rich Hickey 2015-01-01"

#. type: Plain text
#: en/content/reference/atoms.adoc:1 en/content/news/2011/07/22/introducing-clojurescript.adoc:39
#, no-wrap
msgid "Atoms"
msgstr "Atom"

#. type: Plain text
#: en/content/reference/atoms.adoc:15
msgid ""
"Atoms provide a way to manage shared, synchronous, independent state. They are a reference type like refs and vars. "
"You create an atom with https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/atom[atom], and can "
"access its state with https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/deref[deref/@]. Like refs "
"and agents, atoms support validators. To change the value of an atom, you can use https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/swap![swap!]. A lower-level https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/compare-and-set![compare-and-set!] is also provided. Changes to atoms are always free of race "
"conditions."
msgstr ""
"Atomは共有された、同期的な独立した状態を管理する手段を提供する。AtomはRefやVarと同様に参照型である。 https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/atom[atom] を使用してAtomを作成することができ、 https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/deref[deref/@] を使用することでその状態にアクセスすることができ"
"る。RefやAgentと同様にバリデーターをサポートしている。Atomの値を変更するには https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/swap![swap!] を使用することができる。また、低水準な https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/compare-and-set![compare-and-set!] も提供されている。Atomに対する変更で競合"
"は発生しない。"

#. type: Plain text
#: en/content/reference/atoms.adoc:17
msgid ""
"As with all reference types, the intended use of atom is to hold one of Clojure's immutable data structures. And, "
"similar to ref's alter and agent's send, you change the value by applying a function to the old value. This is done "
"in an atomic manner by https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/swap![swap!] Internally, "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/swap![swap!] reads the current value, applies "
"the function to it, and attempts to compare-and-set! it in. Since another thread may have changed the value in the "
"intervening time, it may have to retry, and does so in a spin loop. The net effect is that the value will always be "
"the result of the application of the supplied function to a current value, atomically. However, because the function "
"might be called multiple times, it must be free of side effects."
msgstr ""
"全ての参照型と同様に、Atomの想定されている使われ方はClojureのイミュータブルなデータ構造を保持することだ。また、Refの"
"alterやAgentのsendと同様に、古い値に関数を適用することで値を変更することができる。これは https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/swap![swap!] によってアトミックに行われる。内的には https://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/swap![swap!] が現在の値を読み込み、関数を適用し、 compare-and-set を試み"
"る。Atomの値の更新を試みる際に他のスレッドによって値が変更された場合、リトライが必要な可能性があり、そのリトライはルー"
"プで行われる。最終的な結果として、Atomの値は常に現在値に与えた関数をアトミックに適用した結果の値となる。与える関数は複"
"数回呼び出される可能性があるので副作用が存在しない必要がある。"

#. type: Plain text
#: en/content/reference/atoms.adoc:19
msgid ""
"Atoms are an efficient way to represent some state that will never need to be coordinated with any other, and for "
"which you wish to make synchronous changes (unlike agents, which are similarly independent but asynchronous). A "
"typical usage might be for memoization:"
msgstr ""
"Atomは協調の必要がない、同期的に変更される状態を効率的に表現する方法だ (Agentと異なり、独立してはいるが同期的)。使用例"
"としてメモ化が挙げられる:"

#. type: delimited block -
#: en/content/reference/atoms.adoc:30
#, no-wrap
msgid ""
"(defn memoize [f]\n"
"  (let [mem (atom {})]\n"
"    (fn [& args]\n"
"      (if-let [e (find @mem args)]\n"
"        (val e)\n"
"        (let [ret (apply f args)]\n"
"          (swap! mem assoc args ret)\n"
"          ret)))))\n"
msgstr ""
"(defn memoize [f]\n"
"  (let [mem (atom {})]\n"
"    (fn [& args]\n"
"      (if-let [e (find @mem args)]\n"
"        (val e)\n"
"        (let [ret (apply f args)]\n"
"          (swap! mem assoc args ret)\n"
"          ret)))))\n"

#. type: delimited block -
#: en/content/reference/atoms.adoc:35
#, no-wrap
msgid ""
"(defn fib [n]\n"
"  (if (<= n 1)\n"
"    n\n"
"    (+ (fib (dec n)) (fib (- n 2)))))\n"
msgstr ""
"(defn fib [n]\n"
"  (if (<= n 1)\n"
"    n\n"
"    (+ (fib (dec n)) (fib (- n 2)))))\n"

#. type: delimited block -
#: en/content/reference/atoms.adoc:38
#, no-wrap
msgid ""
"(time (fib 35))\n"
"user=> \"Elapsed time: 941.445 msecs\"\n"
msgstr ""
"(time (fib 35))\n"
"user=> \"Elapsed time: 941.445 msecs\"\n"

#. type: delimited block -
#: en/content/reference/atoms.adoc:40
#, no-wrap
msgid "(def fib (memoize fib))\n"
msgstr "(def fib (memoize fib))\n"

#. type: delimited block -
#: en/content/reference/atoms.adoc:42
#, no-wrap
msgid "(time (fib 35))\n"
msgstr "(time (fib 35))\n"

#. type: delimited block -
#: en/content/reference/atoms.adoc:44
#, no-wrap
msgid "user=> \"Elapsed time: 0.044 msecs\"\n"
msgstr "user=> \"Elapsed time: 0.044 msecs\"\n"
