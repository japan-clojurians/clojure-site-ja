# Japanese translations for clojure-site-ja package
# Copyright (C) 2016 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: 2019-06-15 19:16+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: en/content/reference/libs.adoc:4 en/content/reference/data_structures.adoc:4 en/content/reference/multimethods.adoc:4
#: en/content/reference/agents.adoc:4 en/content/reference/lazy.adoc:4 en/content/reference/transients.adoc:4
#: en/content/reference/macros.adoc:4 en/content/reference/transducers.adoc:4 en/content/reference/atoms.adoc:4
#: en/content/reference/other_functions.adoc:4 en/content/reference/datatypes.adoc:4
#: en/content/reference/repl_and_main.adoc:4 en/content/reference/protocols.adoc:4
#: en/content/reference/other_libraries.adoc:4 en/content/reference/documentation.adoc:4
#: en/content/reference/refs.adoc:4 en/content/reference/lisps.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/sequences.adoc:4 en/content/reference/reducers.adoc:4 en/content/reference/metadata.adoc:4
#: en/content/reference/evaluation.adoc:4 en/content/reference/compilation.adoc:4 en/content/community/downloads.adoc:4
#: en/content/community/license.adoc:4 en/content/community/downloads_older.adoc:4 en/content/community/swag.adoc:4
#: en/content/community/libraries.adoc:4 en/content/404.adoc:4 en/content/about/spec.adoc:4
#: en/content/about/clojureclr.adoc:4 en/content/about/dynamic.adoc:4 en/content/about/concurrent_programming.adoc:4
#: en/content/about/functional_programming.adoc:4 en/content/about/state.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/clojurescript.adoc:4 en/content/about/runtime_polymorphism.adoc:4 en/content/about/lisp.adoc:4
#: en/content/about/rationale.adoc:4 en/content/about/features.adoc:4 en/content/privacy.adoc:4 en/content/search.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr "Rich Hickey 2015-01-01"

#. type: Title =
#: en/content/reference/multimethods.adoc:1
#, no-wrap
msgid "Multimethods and Hierarchies"
msgstr "マルチメソッド(multimethod)と階層"

#. type: Plain text
#: en/content/reference/multimethods.adoc:17
msgid ""
"Clojure eschews the traditional object-oriented approach of creating a new data type for each new situation, instead "
"preferring to build a large library of functions on a small set of types. However, Clojure fully recognizes the value "
"of runtime polymorphism in enabling flexible and extensible system architecture. Clojure supports sophisticated "
"runtime polymorphism through a multimethod system that supports dispatching on types, values, attributes and metadata "
"of, and relationships between, one or more arguments."
msgstr ""
"Clojure は状況ごとに新しいデータ型を定義するような伝統的オブジェクト指向のアプローチを避け、代わりに少ないデータ型に対"
"する関数群からなる巨大なライブラリを構築することを好む。しかしながら、Clojureも柔軟で拡張可能なシステムアーキテクチャ"
"を可能にするランタイムポリモーフィズムの価値は認識している。Clojureはタイプ、値、属性と引数のメタデータ、ひとつ以上の"
"引数の関連性によるディスパッチをサポートするマルチメソッドシステムを通して洗練されたランタイムポリモーフィズムを提供す"
"る。"

#. type: Plain text
#: en/content/reference/multimethods.adoc:19
msgid ""
"A Clojure multimethod is a combination of a _dispatching_ _function_, and one or more _methods_. When a multimethod "
"is defined, using _**defmulti**_, a dispatching function must be supplied. This function will be applied to the "
"arguments to the multimethod in order to produce a _dispatching value_. The multimethod will then try to find the "
"method associated with the dispatching value or a value from which the dispatching value is derived. If one has been "
"defined (via https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/defmethod[defmethod]), it will then "
"be called with the arguments and that will be the value of the multimethod call. If no method is associated with the "
"dispatching value, the multimethod will look for a method associated with the default dispatching value (which "
"defaults to _**:default**_), and will use that if present. Otherwise the call is an error."
msgstr ""
"Clojureのマルチメソッドは _ディスパッチ関数_ と一つ以上の _メソッド_ で定義される。 _**defmulti**_ を使用してマルチメ"
"ソッドを定義する場合、ディスパッチ関数を与える必要がある。この関数が _ディスパッチ値_ の生成のためにマルチメソッドの引"
"数に適用される。マルチメソッドはその後ディスパッチ値、もしくはディスパッチ値から派生した値と関連するメソッドを探索しす"
"る。関連するメソッドが定義されている場合、( https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"defmethod[defmethod] 経由)、そのメソッドディスパッチ値を引数として呼び出される。ディスパッチ値と関連するメソッドの定義"
"が存在しない場合、マルチメソッドはデフォルトのディスパッチ値と関連するメソッドを探索し(デフォルトは _**:default**_)、"
"存在する場合それを仕様する。存在しない場合、マルチメソッドの呼び出しはエラーとなる。"

#. type: Plain text
#: en/content/reference/multimethods.adoc:21
msgid ""
"The multimethod system exposes this API: https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"defmulti[defmulti] creates new multimethods, https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"defmethod[defmethod] creates and installs a new method of multimethod associated with a dispatch-value, https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/remove-method[remove-method] removes the method "
"associated with a dispatch-value and https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/prefer-"
"method[prefer-method] creates an ordering between methods when they would otherwise be ambiguous."
msgstr ""
"マルチメソッドシステムはこのAPIを提供している: https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"defmulti[defmulti] マルチメソッドを新しく作成する、 https://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/defmethod[defmethod] ディスパッチ値と関連するメソッドをマルチメソッドに新しく定義する。 https://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/remove-method[remove-method] ディスパッチ値と関連するメソッドを削除す"
"る。 https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/prefer-method[prefer-method] メソッドの間の"
"優先順位が曖昧な場合に優先順位を定義する。"

#. type: Plain text
#: en/content/reference/multimethods.adoc:23
msgid ""
"Derivation is determined by a combination of either Java inheritance (for class values), or using Clojure's ad hoc "
"hierarchy system. The hierarchy system supports derivation relationships between names (either symbols or keywords), "
"and relationships between classes and names. The https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"derive[derive] function creates these relationships, and the https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/isa?[isa?] function tests for their existence. Note that https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/isa?[isa?] is not https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"instance?[instance?]."
msgstr ""
"派生(derivation)はJavaの継承(クラス値)、もしくはClojureのアドホックな階層システムの組み合わせで判断される。階層システ"
"ムは名前(シンボル、もしくはキーワード)間、またはクラスと名前の関連性を利用した派生をサポートしている。 https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/derive[derive] 関数はこの関連性を作成し、 the https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/isa?[isa?] 関数が関連性の存在をテストする。 https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/isa?[isa?] と https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/instance?[instance?] は異なる点に注意。"

#. type: Plain text
#: en/content/reference/multimethods.adoc:25
msgid ""
"You can define hierarchical relationships with +(derive child parent)+. Child and parent can be either symbols or "
"keywords, and must be namespace-qualified:"
msgstr ""
"+(derive child parent)+ を使って階層的な関連を定義することができる。子と親には名前空間で修飾されたシンボルとキーワード"
"を使用することができる:"

#. type: Plain text
#: en/content/reference/multimethods.adoc:27
msgid "_Note the pass:[::] reader syntax, ::keywords resolve namespaces._"
msgstr "_注: pass:[::] のリーダー文法をキーワードに使用すると(::keywords)名前空間に解決される。_"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:32
#, no-wrap
msgid ""
"::rect\n"
"-> :user/rect\n"
msgstr ""
"::rect\n"
"-> :user/rect\n"

#. type: Plain text
#: en/content/reference/multimethods.adoc:34
msgid ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/derive[derive] is the fundamental relationship-"
"maker"
msgstr ""
"基本的には https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/derive[derive]を使って関係性を作る。"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:38
#, no-wrap
msgid ""
"(derive ::rect ::shape)\n"
"(derive ::square ::rect)\n"
msgstr ""
"(derive ::rect ::shape)\n"
"(derive ::square ::rect)\n"

#. type: Plain text
#: en/content/reference/multimethods.adoc:40
msgid ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/parents[parents] / https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/ancestors[ancestors] / https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/descendants[descendants] and https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"isa%3F[isa?] let you query the hierarchy"
msgstr ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/parents[parents] / https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/ancestors[ancestors] / https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/descendants[descendants] と https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/isa"
"%3F[isa?]を使うことで階層について調べることができる。"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:45
#, no-wrap
msgid ""
"(parents ::rect)\n"
"-> #{:user/shape}\n"
msgstr ""
"(parents ::rect)\n"
"-> #{:user/shape}\n"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:48
#, no-wrap
msgid ""
"(ancestors ::square)\n"
"-> #{:user/rect :user/shape}\n"
msgstr ""
"(ancestors ::square)\n"
"-> #{:user/rect :user/shape}\n"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:51
#, no-wrap
msgid ""
"(descendants ::shape)\n"
"-> #{:user/rect :user/square}\n"
msgstr ""
"(descendants ::shape)\n"
"-> #{:user/rect :user/square}\n"

#. type: Plain text
#: en/content/reference/multimethods.adoc:54
msgid "`(= x y)` implies `(isa? x y)`"
msgstr "`(= x y)` が真なら `(isa? x y)` も真となる。"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:59
#, no-wrap
msgid ""
"(isa? 42 42)\n"
"-> true\n"
msgstr ""
"(isa? 42 42)\n"
"-> true\n"

#. type: Plain text
#: en/content/reference/multimethods.adoc:62
msgid "`isa?` uses the hierarchy system"
msgstr "`isa?`は階層システムを使う。"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:67
#, no-wrap
msgid ""
"(isa? ::square ::shape)\n"
"-> true\n"
msgstr ""
"(isa? ::square ::shape)\n"
"-> true\n"

#. type: Plain text
#: en/content/reference/multimethods.adoc:70
msgid ""
"You can also use a class as the child (but not the parent, the only way to make something the child of a class is via "
"Java inheritance)."
msgstr ""
"クラスを子として使うこともできる。(親としては使えない、何かのクラスの子を定義することはJavaの継承関係を通してしかでき"
"ない)。"

#. type: Plain text
#: en/content/reference/multimethods.adoc:72
msgid "This allows you to superimpose new taxonomies on the existing Java class hierarchy:"
msgstr "これにより既存のJavaクラスの階層に新たな分類を重ねて定義することが可能になる:"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:77
#, no-wrap
msgid ""
"(derive java.util.Map ::collection)\n"
"(derive java.util.Collection ::collection)\n"
msgstr ""
"(derive java.util.Map ::collection)\n"
"(derive java.util.Collection ::collection)\n"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:80
#, no-wrap
msgid ""
"(isa? java.util.HashMap ::collection)\n"
"-> true\n"
msgstr ""
"(isa? java.util.HashMap ::collection)\n"
"-> true\n"

#. type: Plain text
#: en/content/reference/multimethods.adoc:83
msgid ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/isa%3F[isa?] also tests for class relationships:"
msgstr ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/isa%3F[isa?] はクラス間の関連性についてもテストす"
"る。"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:88
#, no-wrap
msgid ""
"(isa? String Object)\n"
"-> true\n"
msgstr ""
"(isa? String Object)\n"
"-> true\n"

#. type: Plain text
#: en/content/reference/multimethods.adoc:91
msgid ""
"as do https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/parents[parents] / https://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/ancestors[ancestors] (but not https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/descendants[descendants], since class descendants are an open set)"
msgstr ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/parents[parents] / https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/ancestors[ancestors] も同様。(https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/descendants[descendants] は子孫はオープンセットであるため異なる。)"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:99
#, no-wrap
msgid ""
"(ancestors java.util.ArrayList)\n"
"-> #{java.lang.Cloneable java.lang.Object java.util.List\n"
"    java.util.Collection java.io.Serializable\n"
"    java.util.AbstractCollection\n"
"    java.util.RandomAccess java.util.AbstractList}\n"
msgstr ""
"(ancestors java.util.ArrayList)\n"
"-> #{java.lang.Cloneable java.lang.Object java.util.List\n"
"    java.util.Collection java.io.Serializable\n"
"    java.util.AbstractCollection\n"
"    java.util.RandomAccess java.util.AbstractList}\n"

#. type: Plain text
#: en/content/reference/multimethods.adoc:102
msgid ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/isa%3F[isa?] works with vectors by calling "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/isa%3F[isa?] on their corresponding elements:"
msgstr ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/isa%3F[isa?] はベクターに対しても使用することが出"
"来る。その場合、 https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/isa%3F[isa?] を各要素に対して呼"
"び出した結果を返す:"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:107
#, no-wrap
msgid ""
"(isa? [::square ::rect] [::shape ::shape])\n"
"-> true\n"
msgstr ""
"(isa? [::square ::rect] [::shape ::shape])\n"
"-> true\n"

#. type: Title ==
#: en/content/reference/multimethods.adoc:109
#, no-wrap
msgid "isa? based dispatch"
msgstr "isa? に基づくディスパッチ"

#. type: Plain text
#: en/content/reference/multimethods.adoc:112
msgid ""
"Multimethods use https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/isa%3F[isa?] rather than = when "
"testing for dispatch value matches. Note that the first test of https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/isa%3F[isa?] is =, so exact matches work."
msgstr ""
"マルチメソッドはディスパッチ値の比較に=ではなく、 https://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/isa%3F[isa?] を使用する。 https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/isa%3F[isa?] で最"
"初に行われる比較は=なので同値の場合でも正しい結果になる。"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:118
#, no-wrap
msgid ""
"(defmulti foo class)\n"
"(defmethod foo ::collection [c] :a-collection)\n"
"(defmethod foo String [s] :a-string)\n"
msgstr ""
"(defmulti foo class)\n"
"(defmethod foo ::collection [c] :a-collection)\n"
"(defmethod foo String [s] :a-string)\n"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:121
#, no-wrap
msgid ""
"(foo [])\n"
":a-collection\n"
msgstr ""
"(foo [])\n"
":a-collection\n"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:124
#, no-wrap
msgid ""
"(foo (java.util.HashMap.))\n"
":a-collection\n"
msgstr ""
"(foo (java.util.HashMap.))\n"
":a-collection\n"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:127
#, no-wrap
msgid ""
"(foo \"bar\")\n"
":a-string\n"
msgstr ""
"(foo \"bar\")\n"
":a-string\n"

#. type: Plain text
#: en/content/reference/multimethods.adoc:130
msgid ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/prefer-method[prefer-method] is used for "
"disambiguating in case of multiple matches where neither dominates the other. You can just declare, per multimethod, "
"that one dispatch value is preferred over another:"
msgstr ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/prefer-method[prefer-method] はディスパッチ値が複"
"数マッチし、どちらを優先するべきか曖昧な場合に順序を付けることに使用する。マルチメソッド毎に特定のディスパッチ値が別の"
"ディスパッチ値よりも優先されることを宣言することができる:"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:134
#, no-wrap
msgid "(derive ::rect ::shape)\n"
msgstr "(derive ::rect ::shape)\n"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:138
#, no-wrap
msgid ""
"(defmulti bar (fn [x y] [x y]))\n"
"(defmethod bar [::rect ::shape] [x y] :rect-shape)\n"
"(defmethod bar [::shape ::rect] [x y] :shape-rect)\n"
msgstr ""
"(defmulti bar (fn [x y] [x y]))\n"
"(defmethod bar [::rect ::shape] [x y] :rect-shape)\n"
"(defmethod bar [::shape ::rect] [x y] :shape-rect)\n"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:144
#, fuzzy, no-wrap
#| msgid ""
#| "(bar ::rect ::rect)\n"
#| "-> java.lang.IllegalArgumentException:\n"
#| "   Multiple methods match dispatch value:\n"
#| "   [:user/rect :user/rect] -> [:user/rect :user/shape]\n"
#| "   and [:user/shape :user/rect],\n"
#| "   and neither is preferred\n"
msgid ""
"(bar ::rect ::rect)\n"
"-> Execution error (IllegalArgumentException) at user/eval152 (REPL:1).\n"
"   Multiple methods in multimethod 'bar' match dispatch value: \n"
"   [:user/rect :user/rect] -> [:user/shape :user/rect] \n"
"   and [:user/rect :user/shape], and neither is preferred\n"
msgstr ""
"(bar ::rect ::rect)\n"
"-> java.lang.IllegalArgumentException:\n"
"   Multiple methods match dispatch value:\n"
"   [:user/rect :user/rect] -> [:user/rect :user/shape]\n"
"   and [:user/shape :user/rect],\n"
"   and neither is preferred\n"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:148
#, no-wrap
msgid ""
"(prefer-method bar [::rect ::shape] [::shape ::rect])\n"
"(bar ::rect ::rect)\n"
"-> :rect-shape\n"
msgstr ""
"(prefer-method bar [::rect ::shape] [::shape ::rect])\n"
"(bar ::rect ::rect)\n"
"-> :rect-shape\n"

#. type: Plain text
#: en/content/reference/multimethods.adoc:151
msgid ""
"All of the examples above use the global hierarchy used by the multimethod system, but entire independent hierarchies "
"can also be created with https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/make-hierarchy[make-"
"hierarchy], and all of the above functions can take an optional hierarchy as a first argument."
msgstr ""
"上記の全ての例ではマルチメソッドシステムが使用するグローバルな階層を使用しているが、 https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/make-hierarchy[make-hierarchy] で完全に独立した階層を作ることも可能で、上記"
"の全ての関数は任意で階層を第1引数にとることができる。"

#. type: Plain text
#: en/content/reference/multimethods.adoc:153
msgid ""
"This simple system is extremely powerful. One way to understand the relationship between Clojure multimethods and "
"traditional Java-style single dispatch is that single dispatch is like a Clojure multimethod whose dispatch function "
"calls getClass on the first argument, and whose methods are associated with those classes. Clojure multimethods are "
"not hard-wired to class/type, they can be based on any attribute of the arguments, on multiple arguments, can do "
"validation of arguments and route to error-handling methods etc."
msgstr ""
"このシンプルなシステムは非常に強力だ。Clojureのマルチメソッドと伝統的なJavaスタイルのシングルディスパッチの関係を理解"
"するひとつの方法は、シングルディスパッチはClojureのマルチメソッドにおいてディスパッチ関数が第一引数に対してgetClassを"
"呼び出し、かつメソッドがそのクラスと関連しているようなものだ。Clojureのマルチメソッドはクラスや型と密に結びついていな"
"いため、複数の引数のどのような属性に基づくことができ、また引数に対するバリデーションを行いエラー処理メソッドを呼び出す"
"こと等が可能になる。"

#. type: Plain text
#: en/content/reference/multimethods.adoc:156
msgid ""
"_Note: In this example, the keyword :Shape is being used as the dispatch function, as keywords are functions of maps, "
"as described in the <<data_structures#,Data Structures>> section._"
msgstr ""
"_注: この例ではキーワード :Shape がディスパッチ関数として使われている。 <<data_structures#,データ構造>> のセクションで"
"説明されている通り、キーワードはマップに対する関数だからだ。_"

#. type: delimited block -
#: en/content/reference/multimethods.adoc:175
#, no-wrap
msgid ""
"(defmulti area :Shape)\n"
"(defn rect [wd ht] {:Shape :Rect :wd wd :ht ht})\n"
"(defn circle [radius] {:Shape :Circle :radius radius})\n"
"(defmethod area :Rect [r]\n"
"    (* (:wd r) (:ht r)))\n"
"(defmethod area :Circle [c]\n"
"    (* (. Math PI) (* (:radius c) (:radius c))))\n"
"(defmethod area :default [x] :oops)\n"
"(def r (rect 4 13))\n"
"(def c (circle 12))\n"
"(area r)\n"
"-> 52\n"
"(area c)\n"
"-> 452.3893421169302\n"
"(area {})\n"
"-> :oops\n"
msgstr ""
"(defmulti area :Shape)\n"
"(defn rect [wd ht] {:Shape :Rect :wd wd :ht ht})\n"
"(defn circle [radius] {:Shape :Circle :radius radius})\n"
"(defmethod area :Rect [r]\n"
"    (* (:wd r) (:ht r)))\n"
"(defmethod area :Circle [c]\n"
"    (* (. Math PI) (* (:radius c) (:radius c))))\n"
"(defmethod area :default [x] :oops)\n"
"(def r (rect 4 13))\n"
"(def c (circle 12))\n"
"(area r)\n"
"-> 52\n"
"(area c)\n"
"-> 452.3893421169302\n"
"(area {})\n"
"-> :oops\n"
