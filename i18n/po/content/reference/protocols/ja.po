# Japanese translations for clojure-site-ja package
# Copyright (C) 2016 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: 2019-06-15 18:19+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: en/content/reference/metadata.adoc:4 en/content/reference/protocols.adoc:4 en/content/reference/sequences.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/reference/libs.adoc:4 en/content/reference/transients.adoc:4
#: en/content/reference/compilation.adoc:4 en/content/reference/other_libraries.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/macros.adoc:4 en/content/reference/transducers.adoc:4
#: en/content/reference/refs.adoc:4 en/content/reference/lazy.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/evaluation.adoc:4 en/content/reference/other_functions.adoc:4
#: en/content/reference/reducers.adoc:4 en/content/reference/data_structures.adoc:4 en/content/reference/atoms.adoc:4
#: en/content/reference/repl_and_main.adoc:4 en/content/reference/agents.adoc:4 en/content/reference/datatypes.adoc:4
#: en/content/community/libraries.adoc:4 en/content/community/license.adoc:4 en/content/community/downloads_older.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/swag.adoc:4 en/content/404.adoc:4
#: en/content/privacy.adoc:4 en/content/search.adoc:4 en/content/about/spec.adoc:4
#: en/content/about/concurrent_programming.adoc:4 en/content/about/lisp.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/about/dynamic.adoc:4 en/content/about/features.adoc:4
#: en/content/about/rationale.adoc:4 en/content/about/state.adoc:4 en/content/about/clojurescript.adoc:4
#: en/content/about/functional_programming.adoc:4 en/content/about/clojureclr.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr "Rich Hickey 2015-01-01"

#. type: Title =
#: en/content/reference/protocols.adoc:1
#, no-wrap
msgid "Protocols"
msgstr "プロトコル(protocol)"

#. type: Title ==
#: en/content/reference/protocols.adoc:16 en/content/reference/datatypes.adoc:17
#, no-wrap
msgid "Motivation"
msgstr "動機"

#. type: Plain text
#: en/content/reference/protocols.adoc:19 en/content/reference/datatypes.adoc:20
msgid ""
"Clojure is written in terms of abstractions. There are abstractions for sequences, collections, callability, etc. In "
"addition, Clojure supplies many implementations of these abstractions. The abstractions are specified by host "
"interfaces, and the implementations by host classes. While this was sufficient for bootstrapping the language, it "
"left Clojure without similar abstraction and low-level implementation facilities. The <<protocols#,protocols>> and "
"<<datatypes#,datatypes>> features add powerful and flexible mechanisms for abstraction and data structure definition "
"with no compromises vs the facilities of the host platform."
msgstr ""
"Clojureは抽象に基づいて記述されている。シーケンス、コレクション、コーラビリティなどの抽象が存在する。加えてClojureはこ"
"れらの抽象の複数の実装を提供している。これらの抽象はホストのインターフェース、実装はホストのクラスで定義されている。こ"
"れは言語自身のブートストラップには十分だったものの、Clojureが同様の抽象化と低レベルの実装の機構を欠く原因になってい"
"た。 <<protocols#,プロトコル>> と <<datatypes#,データ型>> という機能は、強力で柔軟な抽象化とデータ構造定義のメカニズム"
"をホストプラットフォームの機構に対して妥協することなく提供する。"

#. type: Plain text
#: en/content/reference/protocols.adoc:21
msgid "There are several motivations for protocols:"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:23
msgid "Provide a high-performance, dynamic polymorphism construct as an alternative to interfaces"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:24
msgid "Support the best parts of interfaces"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:25
#, fuzzy
#| msgid "Informational vs implementational"
msgid "specification only, no implementation"
msgstr "情報的 vs 実装的"

#. type: Plain text
#: en/content/reference/protocols.adoc:26
msgid "a single type can implement multiple protocols"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:27
msgid "While avoiding some of the drawbacks"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:28
msgid ""
"Which interfaces are implemented is a design-time choice of the type author, cannot be extended later (although "
"interface injection might eventually address this)"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:29
msgid "implementing an interface creates an isa/instanceof type relationship and hierarchy"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:30
msgid ""
"Avoid the 'expression problem' by allowing independent extension of the set of types, protocols, and implementations "
"of protocols on types, by different parties"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:31
msgid "do so without wrappers/adapters"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:32
msgid ""
"Support the 90% case of multimethods (single dispatch on type) while providing higher-level abstraction/organization"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:35
msgid "Protocols were introduced in Clojure 1.2."
msgstr ""

#. type: Title ==
#: en/content/reference/protocols.adoc:36 en/content/reference/datatypes.adoc:21 en/content/about/dynamic.adoc:42
#, no-wrap
msgid "Basics"
msgstr "基本"

#. type: Plain text
#: en/content/reference/protocols.adoc:39
msgid ""
"A protocol is a named set of named methods and their signatures, defined using https://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/defprotocol[defprotocol]:"
msgstr ""

#. type: delimited block -
#: en/content/reference/protocols.adoc:46
#, no-wrap
msgid ""
"(defprotocol AProtocol\n"
"  \"A doc string for AProtocol abstraction\"\n"
"  (bar [a b] \"bar docs\")\n"
"  (baz [a] [a b] [a b c] \"baz docs\"))\n"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:49
msgid "No implementations are provided"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:50
msgid "Docs can be specified for the protocol and the functions"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:51
msgid "The above yields a set of polymorphic functions and a protocol object"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:52
msgid "all are namespace-qualified by the namespace enclosing the definition"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:53
msgid "The resulting functions dispatch on the type of their first argument, and thus must have at least one argument"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:54
msgid "defprotocol is dynamic, and does not require AOT compilation"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:56
msgid ""
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/defprotocol[defprotocol] will automatically "
"generate a corresponding interface, with the same name as the protocol, e.g. given a protocol my.ns/Protocol, an "
"interface my.ns.Protocol. The interface will have methods corresponding to the protocol functions, and the protocol "
"will automatically work with instances of the interface."
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:58
msgid ""
"Note that you do not need to use this interface with https://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/deftype[deftype] , https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/defrecord[defrecord] , "
"or https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/reify[reify], as they support protocols "
"directly:"
msgstr ""

#. type: delimited block -
#: en/content/reference/protocols.adoc:64
#, no-wrap
msgid ""
"(defprotocol P\n"
"  (foo [x])\n"
"  (bar-me [x] [x y]))\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/protocols.adoc:70
#, no-wrap
msgid ""
"(deftype Foo [a b c]\n"
"  P\n"
"  (foo [x] a)\n"
"  (bar-me [x] b)\n"
"  (bar-me [x y] (+ c y)))\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/protocols.adoc:72
#, no-wrap
msgid "(bar-me (Foo. 1 2 3) 42)\n"
msgstr ""

#. type: Title =
#: en/content/reference/protocols.adoc:72
#, no-wrap
msgid "> 45"
msgstr ""

#. type: delimited block -
#: en/content/reference/protocols.adoc:80
#, no-wrap
msgid ""
"(foo\n"
" (let [x 42]\n"
"   (reify P\n"
"     (foo [this] 17)\n"
"     (bar-me [this] x)\n"
"     (bar-me [this y] x))))\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/protocols.adoc:82
#, no-wrap
msgid "> 17\n"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:85
msgid ""
"A Java client looking to participate in the protocol can do so most efficiently by implementing the protocol-"
"generated interface."
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:87
msgid ""
"External implementations of the protocol (which are needed when you want a class or type not in your control to "
"participate in the protocol) can be provided using the https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/extend[extend] construct:"
msgstr ""

#. type: delimited block -
#: en/content/reference/protocols.adoc:98
#, no-wrap
msgid ""
"(extend AType\n"
"  AProtocol\n"
"   {:foo an-existing-fn\n"
"    :bar (fn [a b] ...)\n"
"    :baz (fn ([a]...) ([a b] ...)...)}\n"
"  BProtocol\n"
"    {...}\n"
"...)\n"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:101
msgid "extend takes a type/class (or interface, see below), a one or more protocol + function map (evaluated) pairs."
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:103
msgid ""
"Will extend the polymorphism of the protocol's methods to call the supplied functions when an AType is provided as "
"the first argument"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:104
msgid "Function maps are maps of the keywordized method names to ordinary fns"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:105
msgid "this facilitates easy reuse of existing fns and maps, for code reuse/mixins without derivation or composition"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:106
#, fuzzy
#| msgid "a deftype/defrecord can implement one or more protocols and/or interfaces"
msgid "You can implement a protocol on an interface"
msgstr "deftype/defrecordは1つ以上のプロトコルもしくはインターフェースを実装することができる"

#. type: Plain text
#: en/content/reference/protocols.adoc:107
msgid "this is primarily to facilitate interop with the host (e.g. Java)"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:108
msgid "but opens the door to incidental multiple inheritance of implementation"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:109
msgid "since a class can inherit from more than one interface, both of which implement the protocol"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:110
msgid "if one interface is derived from the other, the more derived is used, else which one is used is unspecified."
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:111
msgid "The implementing fn can presume first argument is instanceof AType"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:112
msgid "You can implement a protocol on _**nil**_"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:113
msgid "To define a default implementation of protocol (for other than nil) just use Object"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:115
msgid ""
"Protocols are fully reified and support reflective capabilities via https://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/extends%3F[extends?] , https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"extenders[extenders] , and https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/satisfies"
"%3F[satisfies?] ."
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:117
msgid ""
"Note the convenience macros https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/extend-type[extend-"
"type] , and https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/extend-protocol[extend-protocol]"
msgstr ""

#. type: Plain text
#: en/content/reference/protocols.adoc:118
msgid "If you are providing external definitions inline, these will be more convenient than using *extend* directly"
msgstr ""

#. type: delimited block -
#: en/content/reference/protocols.adoc:127
#, no-wrap
msgid ""
"(extend-type MyType\n"
"  Countable\n"
"    (cnt [c] ...)\n"
"  Foo\n"
"    (bar [x y] ...)\n"
"    (baz ([x] ...) ([x y zs] ...)))\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/protocols.adoc:129
#, no-wrap
msgid "  ;expands into:\n"
msgstr ""

#. type: delimited block -
#: en/content/reference/protocols.adoc:136
#, no-wrap
msgid ""
"(extend MyType\n"
"  Countable\n"
"   {:cnt (fn [c] ...)}\n"
"  Foo\n"
"   {:baz (fn ([x] ...) ([x y zs] ...))\n"
"    :bar (fn [x y] ...)})\n"
msgstr ""
