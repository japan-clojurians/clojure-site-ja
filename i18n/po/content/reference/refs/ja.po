# Japanese translations for clojure-site-ja package
# Copyright (C) 2016 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: 2019-06-15 18:50+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: en/content/reference/metadata.adoc:4 en/content/reference/protocols.adoc:4 en/content/reference/sequences.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/reference/libs.adoc:4 en/content/reference/transients.adoc:4
#: en/content/reference/compilation.adoc:4 en/content/reference/other_libraries.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/macros.adoc:4 en/content/reference/transducers.adoc:4
#: en/content/reference/refs.adoc:4 en/content/reference/lazy.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/evaluation.adoc:4 en/content/reference/other_functions.adoc:4
#: en/content/reference/reducers.adoc:4 en/content/reference/data_structures.adoc:4 en/content/reference/atoms.adoc:4
#: en/content/reference/repl_and_main.adoc:4 en/content/reference/agents.adoc:4 en/content/reference/datatypes.adoc:4
#: en/content/community/libraries.adoc:4 en/content/community/license.adoc:4 en/content/community/downloads_older.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/swag.adoc:4 en/content/404.adoc:4
#: en/content/privacy.adoc:4 en/content/search.adoc:4 en/content/about/spec.adoc:4
#: en/content/about/concurrent_programming.adoc:4 en/content/about/lisp.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/about/dynamic.adoc:4 en/content/about/features.adoc:4
#: en/content/about/rationale.adoc:4 en/content/about/state.adoc:4 en/content/about/clojurescript.adoc:4
#: en/content/about/functional_programming.adoc:4 en/content/about/clojureclr.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr "Rich Hickey 2015-01-01"

#. type: Title ==
#: en/content/reference/libs.adoc:64 en/content/reference/refs.adoc:73 en/content/reference/namespaces.adoc:24
#: en/content/reference/other_functions.adoc:41 en/content/reference/other_functions.adoc:65
#: en/content/reference/vars.adoc:85 en/content/reference/data_structures.adoc:70
#: en/content/reference/data_structures.adoc:90 en/content/reference/data_structures.adoc:98
#: en/content/reference/data_structures.adoc:107 en/content/reference/data_structures.adoc:116
#: en/content/reference/data_structures.adoc:162 en/content/reference/data_structures.adoc:174
#: en/content/reference/data_structures.adoc:188 en/content/reference/data_structures.adoc:223
#: en/content/reference/repl_and_main.adoc:185 en/content/reference/agents.adoc:64
#, no-wrap
msgid "Related functions"
msgstr "関連する関数"

#. type: Title ==
#: en/content/reference/transients.adoc:42 en/content/reference/refs.adoc:35 en/content/reference/agents.adoc:39
#, no-wrap
msgid "Example"
msgstr "例"

#. type: Title =
#: en/content/reference/refs.adoc:1
#, no-wrap
msgid "Refs and Transactions"
msgstr "Refとトランザクション"

#. type: Plain text
#: en/content/reference/refs.adoc:17
msgid ""
"While <<vars#,Vars>> ensure safe use of mutable storage locations via thread _isolation_, transactional references "
"(Refs) ensure safe _shared_ use of mutable storage locations via a http://en.wikipedia.org/wiki/"
"Software_transactional_memory[software transactional memory] (STM) system. Refs are bound to a single storage "
"location for their lifetime, and only allow mutation of that location to occur within a transaction."
msgstr ""
"<<vars#,Var>> はスレッド間の _分離_ によってミュータブルなストレージの安全な使用を保証しているが、トランザクショナルな"
"参照(Ref)は http://en.wikipedia.org/wiki/Software_transactional_memory[software transactional memory] (STM) システムに"
"よってミュータブルなストレージの安全な _共有_ を保証する。Refは最初から最後まで単一のストレージに束縛され、変更をトラ"
"ンザクションの中でしか許容しない。"

#. type: Plain text
#: en/content/reference/refs.adoc:19
msgid ""
"Clojure transactions should be easy to understand if you've ever used database transactions - they ensure that all "
"actions on Refs are atomic, consistent, and isolated. Atomic means that every change to Refs made within a "
"transaction occurs or none do. Consistent means that each new value can be checked with a validator function before "
"allowing the transaction to commit. Isolated means that no transaction sees the effects of any other transaction "
"while it is running. Another feature common to STMs is that, should a transaction have a conflict while running, it "
"is automatically retried."
msgstr ""
"データベースのトランザクションを使用したことがあればClojureのトランザクションを理解することは容易だ - Refに対する全て"
"の処理がアトミックで一貫性があり、分離されていることを保証する。アトミックとは、トランザクション内でのRefに対する変更"
"が全て起こるか、一切起こらないかのどちらかであることを意味する。一貫性があるとは全ての新しい値に対して、トランザクショ"
"ンのコミットの前にバリデーション関数でチェックを行うことができることを意味する。分離されているとはトランザクション内で"
"の影響は、トランザクションが動いている間は他のトランザクションから観測されないことを意味する。もう一つ、STMの一般的な"
"機能としてトランザクションの動作中に競合が起こった場合の自動的なリトライもある。"

#. type: Plain text
#: en/content/reference/refs.adoc:21
msgid ""
"There are many ways to do STMs (locking/pessimistic, lock-free/optimistic and hybrids) and it is still a research "
"problem. The Clojure STM uses http://en.wikipedia.org/wiki/Multiversion_concurrency_control[multiversion concurrency "
"control] with adaptive history queues for http://en.wikipedia.org/wiki/Snapshot_isolation[snapshot isolation], and "
"provides a distinct https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/commute[commute] operation."
msgstr ""
"STMを実現するには複数の方式があり (ロック/悲観的, ロックフリー/楽観的 および それらの混合) 、未だに研究の対象となる問"
"題である。ClojureのSTMは http://en.wikipedia.org/wiki/Multiversion_concurrency_control[multiversion concurrency "
"control] と adaptive history queue を http://en.wikipedia.org/wiki/Snapshot_isolation[snapshot isolation] のために使用"
"し、固有の https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/commute[commute] 処理を提供している。"

#. type: Plain text
#: en/content/reference/refs.adoc:23
msgid "In practice, this means:"
msgstr "これの現実的な意味は:"

#. type: Plain text
#: en/content/reference/refs.adoc:25
msgid ""
"All reads of Refs will see a consistent snapshot of the 'Ref world' as of the starting point of the transaction (its "
"'read point'). The transaction _will_ see any changes it has made. This is called the _in-transaction-value_."
msgstr ""
"Refに対する全ての読み込みは 'Refの世界' の一貫性のあるスナップショットをトランザクションの開始地点のように観測する(ト"
"ランザクションの 'read point')。トランザクションはRefに対する全ての変更を _観測する_ 。これを _in-transaction-value_ "
"と呼ぶ。"

#. type: Plain text
#: en/content/reference/refs.adoc:26
msgid ""
"All changes made to Refs during a transaction (via https://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/ref-set[ref-set], https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/alter[alter] or https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/commute[commute]) will appear to occur at a single point "
"in the 'Ref world' timeline (its 'write point')."
msgstr ""
"トランザクション内に行われたRefに対する全ての変更( https://clojure.github.io/clojure/clojure.core-api.html#clojure."
"core/ref-set[ref-set], https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/alter[alter] or https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/commute[commute] を使用)は 「Refの世界」 のタイムライン上"
"の一点で起こったと映る (Refの 'wirte point') 。"

#. type: Plain text
#: en/content/reference/refs.adoc:27
msgid ""
"No changes will have been made by any other transactions to any Refs that have been *ref-set**_ / _**altered**_ / "
"_**ensured**_ by this transaction."
msgstr ""
"このトランザクション内で _**ref-set**_ / _**altered**_ / _**ensured**_ されたRefには他のトランザクションからの変更はな"
"い。"

#. type: Plain text
#: en/content/reference/refs.adoc:28
msgid ""
"Changes _may have_ been made by other transactions to any Refs that have been commuted by this transaction. That "
"should be okay since the function applied by _**commute**_ should be commutative."
msgstr ""
"このトランザクションによりコミュートされたRefは、他のトランザクションから変更を受ける _かもしれない_ 。 _**commute**_ "
"を使用して適用した関数は可換であるべきなのでこれは問題にならない。"

#. type: Plain text
#: en/content/reference/refs.adoc:29
msgid "Readers and commuters will never block writers, commuters, or other readers."
msgstr "リーダーとコミューターはライター、コミューター、他のリーダーを決してブロックしない。"

#. type: Plain text
#: en/content/reference/refs.adoc:30
msgid "Writers will never block commuters, or readers."
msgstr "ライターはコミューターもしくはリーダーを決してブロックしない。"

#. type: Plain text
#: en/content/reference/refs.adoc:31
msgid ""
"I/O and other activities with side-effects should be avoided in transactions, since transactions _will_ be retried. "
"The https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/io![io!] macro can be used to prevent the "
"use of an impure function in a transaction."
msgstr ""
"トランザクションはリトライが _行われる_ のでトランザクション内でI/O等の副作用を伴う処理は避けるべきで、 https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/io![io!] マクロを使用することでトランザクション内で純粋で"
"はない関数の使用を防ぐことができる。"

#. type: Plain text
#: en/content/reference/refs.adoc:32
msgid ""
"If a constraint on the validity of a value of a Ref that is being changed depends upon the simultaneous value of a "
"Ref that is _not being changed_, that second Ref can be protected from modification by calling https://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/ensure[ensure]. Refs 'ensured' this way will be protected (item #3), "
"but don't change the world (item #2)."
msgstr ""
"変更を受けているあるRefの値の正当性の制約が同時に _変更を受けていない_ 別のRefの値に依存する場合、 https://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/ensure[ensure] を使用して2つ目のRefを変更から保護することができ"
"る。 'ensure' されたRef(3つ目)は保護されるが、元のRef(2つ目)に対する変更は保護されない。"

#. type: Plain text
#: en/content/reference/refs.adoc:33
msgid ""
"The Clojure MVCC STM is designed to work with the persistent collections, and it is strongly recommended that you use "
"the Clojure collections as the values of your Refs. Since all work done in an STM transaction is speculative, it is "
"imperative that there be a low cost to making copies and modifications. Persistent collections have free copies (just "
"use the original, it can't be changed), and 'modifications' share structure efficiently. In any case:"
msgstr ""
"Clojure MVCC STM パーシスタントなコレクションと共に良く動作するように設計されているため、Refの値にはClojureのコレク"
"ションを使用することが強く推奨される。STMのトランザクション内での処理は投機的であることから、コピーや変更のコストが低"
"いことは必須であるためだ。パーシスタントなコレクションの場合、コピーのコストはゼロであり(不変であるため元のものを使用"
"すれば良い)、 '変更' は構造が効率的に共有される。いずれにせよ:"

#. type: Plain text
#: en/content/reference/refs.adoc:34
msgid "The values placed in Refs _must be, or be considered, immutable_!! Otherwise, Clojure can't help you."
msgstr ""
"Ref内の値は _イミュータブルである、もしくはイミュータブルとして扱われる必要がある_ !! そうでない場合、Clojureがあなた"
"の助けになることはない。"

#. type: Plain text
#: en/content/reference/refs.adoc:37
msgid ""
"In this example a vector of references to vectors is created, each containing (initially sequential) unique numbers. "
"Then a set of threads are started that repeatedly select two random positions in two random vectors and swap them, in "
"a transaction. No special effort is made to prevent the inevitable conflicts other than the use of transactions."
msgstr ""
"この例ではユニークな数字(最初は昇順)を含むベクターに対する参照のベクターが作成される。そして複数のスレッドが起動し、繰"
"り返しトランザクション内でランダムなベクターからランダムな位置を選択し入れ替えを行う。トランザクションを使用する以外に"
"は不可避な衝突を防ぐ工夫はしていない。"

#. type: delimited block -
#: en/content/reference/refs.adoc:57
#, no-wrap
msgid ""
"(defn run [nvecs nitems nthreads niters]\n"
"  (let [vec-refs (vec (map (comp ref vec)\n"
"                           (partition nitems (range (* nvecs nitems)))))\n"
"        swap #(let [v1 (rand-int nvecs)\n"
"                    v2 (rand-int nvecs)\n"
"                    i1 (rand-int nitems)\n"
"                    i2 (rand-int nitems)]\n"
"                (dosync\n"
"                 (let [temp (nth @(vec-refs v1) i1)]\n"
"                   (alter (vec-refs v1) assoc i1 (nth @(vec-refs v2) i2))\n"
"                   (alter (vec-refs v2) assoc i2 temp))))\n"
"        report #(do\n"
"                 (prn (map deref vec-refs))\n"
"                 (println \"Distinct:\"\n"
"                          (count (distinct (apply concat (map deref vec-refs))))))]\n"
"    (report)\n"
"    (dorun (apply pcalls (repeat nthreads #(dotimes [_ niters] (swap)))))\n"
"    (report)))\n"
msgstr ""
"(defn run [nvecs nitems nthreads niters]\n"
"  (let [vec-refs (vec (map (comp ref vec)\n"
"                           (partition nitems (range (* nvecs nitems)))))\n"
"        swap #(let [v1 (rand-int nvecs)\n"
"                    v2 (rand-int nvecs)\n"
"                    i1 (rand-int nitems)\n"
"                    i2 (rand-int nitems)]\n"
"                (dosync\n"
"                 (let [temp (nth @(vec-refs v1) i1)]\n"
"                   (alter (vec-refs v1) assoc i1 (nth @(vec-refs v2) i2))\n"
"                   (alter (vec-refs v2) assoc i2 temp))))\n"
"        report #(do\n"
"                 (prn (map deref vec-refs))\n"
"                 (println \"Distinct:\"\n"
"                          (count (distinct (apply concat (map deref vec-refs))))))]\n"
"    (report)\n"
"    (dorun (apply pcalls (repeat nthreads #(dotimes [_ niters] (swap)))))\n"
"    (report)))\n"

#. type: Plain text
#: en/content/reference/refs.adoc:60
msgid "When run, we see no values get lost or duplicated in the shuffle:"
msgstr "シャッフルの実行にあたって値の喪失や重複が起こらないことが確認できる:"

#. type: delimited block -
#: en/content/reference/refs.adoc:63
#, no-wrap
msgid "(run 100 10 10 100000)\n"
msgstr "(run 100 10 10 100000)\n"

#. type: delimited block -
#: en/content/reference/refs.adoc:67
#, no-wrap
msgid ""
"([0 1 2 3 4 5 6 7 8 9] [10 11 12 13 14 15 16 17 18 19] ...\n"
" [990 991 992 993 994 995 996 997 998 999])\n"
"Distinct: 1000\n"
msgstr ""
"([0 1 2 3 4 5 6 7 8 9] [10 11 12 13 14 15 16 17 18 19] ...\n"
" [990 991 992 993 994 995 996 997 998 999])\n"
"Distinct: 1000\n"

#. type: delimited block -
#: en/content/reference/refs.adoc:71
#, no-wrap
msgid ""
"([382 318 466 963 619 22 21 273 45 596] [808 639 804 471 394 904 952 75 289 778] ...\n"
" [484 216 622 139 651 592 379 228 242 355])\n"
"Distinct: 1000\n"
msgstr ""
"([382 318 466 963 619 22 21 273 45 596] [808 639 804 471 394 904 952 75 289 778] ...\n"
" [484 216 622 139 651 592 379 228 242 355])\n"
"Distinct: 1000\n"

#. type: Plain text
#: en/content/reference/refs.adoc:76
msgid "Create a Ref: https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/ref[ref]"
msgstr "Refの作成: https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/ref[ref]"

#. type: Plain text
#: en/content/reference/refs.adoc:78
msgid ""
"Examine a Ref: https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/deref[deref] _(see also the +@+ "
"<<reader#,reader>> macro)_"
msgstr ""
"Refの観測: https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/deref[deref] _( +@+ <<reader#,リーダー"
">> マクロも参照)_"

#. type: Plain text
#: en/content/reference/refs.adoc:80
msgid ""
"Transaction macros: https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/dosync[dosync] https://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/io![io!]"
msgstr ""
"トランザクションマクロ: https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/dosync[dosync] http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/io![io!]"

#. type: Plain text
#: en/content/reference/refs.adoc:82
msgid ""
"Allowed only in a transaction: https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/ensure[ensure] "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/ref-set[ref-set] https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/alter[alter] https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/commute[commute]"
msgstr ""
"トランザクション内でのみ使用可能: https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/ensure[ensure] "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/ref-set[ref-set] https://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/alter[alter] https://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/commute[commute]"

#. type: Plain text
#: en/content/reference/refs.adoc:83 en/content/reference/agents.adoc:75
msgid ""
"Ref validators: https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/set-validator![set-validator!] "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/get-validator[get-validator]"
msgstr ""
"Refバリデーター: https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/set-validator![set-validator!] "
"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/get-validator[get-validator]"
