# Japanese translations for clojure-site-ja package
# Copyright (C) 2016 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: 2019-06-15 17:51+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: en/content/reference/metadata.adoc:4 en/content/reference/protocols.adoc:4 en/content/reference/sequences.adoc:4
#: en/content/reference/multimethods.adoc:4 en/content/reference/libs.adoc:4 en/content/reference/transients.adoc:4
#: en/content/reference/compilation.adoc:4 en/content/reference/other_libraries.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/macros.adoc:4 en/content/reference/transducers.adoc:4
#: en/content/reference/refs.adoc:4 en/content/reference/lazy.adoc:4 en/content/reference/namespaces.adoc:4
#: en/content/reference/lisps.adoc:4 en/content/reference/evaluation.adoc:4 en/content/reference/other_functions.adoc:4
#: en/content/reference/reducers.adoc:4 en/content/reference/data_structures.adoc:4 en/content/reference/atoms.adoc:4
#: en/content/reference/repl_and_main.adoc:4 en/content/reference/agents.adoc:4 en/content/reference/datatypes.adoc:4
#: en/content/community/libraries.adoc:4 en/content/community/license.adoc:4 en/content/community/downloads_older.adoc:4
#: en/content/community/downloads.adoc:4 en/content/community/swag.adoc:4 en/content/404.adoc:4
#: en/content/privacy.adoc:4 en/content/search.adoc:4 en/content/about/spec.adoc:4
#: en/content/about/concurrent_programming.adoc:4 en/content/about/lisp.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/about/dynamic.adoc:4 en/content/about/features.adoc:4
#: en/content/about/rationale.adoc:4 en/content/about/state.adoc:4 en/content/about/clojurescript.adoc:4
#: en/content/about/functional_programming.adoc:4 en/content/about/clojureclr.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr "Rich Hickey 2015-01-01"

#. type: Title =
#: en/content/reference/lisps.adoc:1
#, no-wrap
msgid "Differences with other Lisps"
msgstr "他のLispとの違い"

#. type: Plain text
#: en/content/reference/lisps.adoc:16
msgid "This information is provided for programmers familiar with Common Lisp or Scheme."
msgstr "この情報はCommon LispやSchemeを知っているプログラマーのために提供されている。"

#. type: Plain text
#: en/content/reference/lisps.adoc:18
msgid "Clojure is case sensitive"
msgstr "Clojureは大文字と小文字の違いを気にする"

#. type: Plain text
#: en/content/reference/lisps.adoc:19
msgid "Clojure is a Lisp-1"
msgstr "ClojureはLisp-1である"

#. type: Plain text
#: en/content/reference/lisps.adoc:20
msgid "() is not the same as nil"
msgstr "()はnilとは異なる"

#. type: Plain text
#: en/content/reference/lisps.adoc:21
msgid "The reader is side-effect free"
msgstr "readerは副作用を起こさない"

#. type: Plain text
#: en/content/reference/lisps.adoc:22
msgid "Keywords are not Symbols"
msgstr "キーワードはシンボルではない"

#. type: Plain text
#: en/content/reference/lisps.adoc:23
msgid "Symbols are not storage locations (see Var)"
msgstr "シンボルはストレージではない (Varを参照)"

#. type: Plain text
#: en/content/reference/lisps.adoc:24
msgid "_**nil**_ is not a Symbol"
msgstr "_**nil**_ はシンボルではない"

#. type: Plain text
#: en/content/reference/lisps.adoc:25
msgid "t is not syntax, use _**true**_"
msgstr "t はシンタックスに含まれない。 _**true**_ を使用する"

#. type: Plain text
#: en/content/reference/lisps.adoc:26
msgid "The read table is currently not accessible to user programs"
msgstr "現在、ユーザープログラムがリードテーブルにアクセスすることはできない"

#. type: Plain text
#: en/content/reference/lisps.adoc:27
msgid "_**let**_ binds sequentially"
msgstr "_**let**_ は逐次的に束縛を行う"

#. type: Plain text
#: en/content/reference/lisps.adoc:28
msgid "_**do**_ is not a looping construct"
msgstr "_**do**_ はループ構造ではない"

#. type: Plain text
#: en/content/reference/lisps.adoc:29
msgid "There is no tail-call optimization, use _**recur**_."
msgstr "末尾呼び出し最適化はない。 _**recur**_ を使用する。"

#. type: Plain text
#: en/content/reference/lisps.adoc:30
msgid "syntax-quote does symbol resolution, so `x is not the same as 'x."
msgstr "シンタックスクォートはシンボルの解決を行うため、 `x は 'x と異なる。"

#. type: Plain text
#: en/content/reference/lisps.adoc:31
msgid "` has auto-gensyms."
msgstr "` は自動的にgensymを行う。"

#. type: Plain text
#: en/content/reference/lisps.adoc:32
msgid "~ is unquote ',' is whitespace"
msgstr "~ はアンクォートで、 ',' は空白である"

#. type: Plain text
#: en/content/reference/lisps.adoc:33
msgid "There is reader syntax for maps, vectors, and sets"
msgstr "マップ、ベクター、セットに対してリーダーのシンタックスが定義されている"

#. type: Plain text
#: en/content/reference/lisps.adoc:34
msgid "_**cons**_, _**first**_ and _**rest**_ manipulate sequence abstractions, not concrete cons cells"
msgstr "_**cons**_, _**first**_ および _**rest**_ は具体的なコンスセルに対してではなく、シーケンス抽象を操作する。"

#. type: Plain text
#: en/content/reference/lisps.adoc:35
msgid "Most data structures are immutable"
msgstr "ほとんどのデータ構造はイミュータブルである。"

#. type: Plain text
#: en/content/reference/lisps.adoc:36
msgid "lambda is _**fn**_, and supports overloading by arity"
msgstr "ラムダは _**fn**_ であり、アリティによるオーバーロードをサポートしている。"

#. type: Plain text
#: en/content/reference/lisps.adoc:37
msgid "_**pass:[=]**_ is the equality predicate"
msgstr "_**pass:[=]**_ は等価性を示す述語である"

#. type: Plain text
#: en/content/reference/lisps.adoc:38
msgid ""
"Global Vars can be dynamically rebound (if declared dynamic) without interfering with lexical local bindings. No "
"special declarations are necessary to distinguish between dynamic and lexical bindings. Since Clojure is a Lisp-1, "
"(global) functions can be dynamically rebound (if they are marked as dynamic)."
msgstr ""
"グローバルなVarは、動的(dynamic)と宣言されている場合には、ローカルなシンボルの束縛に干渉することなく動的に再束縛するこ"
"とができる。動的な束縛とレキシカルな束縛を区別するための特別な宣言などは必要ない。ClojureはLisp-1であるため、グローバ"
"ルな関数は動的に再束縛することができる。"

#. type: Plain text
#: en/content/reference/lisps.adoc:39
msgid ""
"No letrec, labels or flet - use (fn name [args]...) for self-reference, https://clojure.github.io/clojure/clojure."
"core-api.html#clojure.core/letfn[letfn] for mutual reference."
msgstr ""
"letrec、labels や flet は存在しない - 自己参照には (fn name [args]...) を使用する。相互参照には http://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/letfn[letfn] を使用する。"

#. type: Plain text
#: en/content/reference/lisps.adoc:40
msgid ""
"In Clojure _**nil**_ means 'nothing'. It signifies the absence of a value, of any type, and is not specific to lists "
"or sequences."
msgstr ""
"Clojure では _**nil**_ は 「無」 を意味する。どのような型においてもが値がないこと示し、リストやシーケンス特有のもので"
"はない。"

#. type: Plain text
#: en/content/reference/lisps.adoc:41
msgid "Empty collections are distinct from _**nil**_. Clojure does not equate _**nil**_ and '()."
msgstr "空のコレクションは _**nil**_ とは明確に異なる。Clojureは _**nil**_ と '() を同値として扱わない。"

#. type: Plain text
#: en/content/reference/lisps.adoc:42
msgid "_**false**_ means one of the two possible boolean values, the other being _**true**_"
msgstr "_**false**_ はboolean型でとりうる２つの値のうちのひとつを示し、もうひとつの値は _**true**_ である。"

#. type: Plain text
#: en/content/reference/lisps.adoc:43
msgid ""
"There is more to collections than lists. You can have instances of empty collections, some of which have literal "
"support ([], {}, and ()). Thus there can be no sentinel empty collection value."
msgstr ""
"リスト以外にもコレクションは存在する。空のコレクションのインスタンスを作ることができ、いくつかはリテラルをサポートして"
"いる ([]、 {}、 および ())。よって、空のコレクションを示すセンチネルな値は存在しない。"

#. type: Plain text
#: en/content/reference/lisps.adoc:44
msgid "Coming from Scheme, _**nil**_ may map most closely to your notion of #f."
msgstr "Schemeから来た場合、 _**nil**_ は#fの概念に最も似ているかもしれない。"

#. type: Plain text
#: en/content/reference/lisps.adoc:45
msgid ""
"A big difference in Clojure, is sequences. Sequences are not specific collections, esp. they are not necessarily "
"concrete lists. When you ask an empty collection for a sequence of its elements (by calling *seq*) it returns "
"_**nil**_, saying \"I can't produce one\". When you ask a sequence on its last element for the _**rest**_ it returns "
"_**another logical sequence.**_ You can only tell if that sequence is empty by calling *seq* on it in turn. This "
"enables sequences and the sequence protocol to be _lazy_."
msgstr ""
"Clojureにおける大きな違いはシーケンスである。シーケンスは特定のコレクションではなく、特に必ずしも具体的なリストではな"
"い。 *seq* を呼び出して空のコレクションからシーケンスを要求した場合、 _**nil**_ を返し、「シーケンスを作ることができな"
"い」ということを示す。シーケンスの最後の要素に対して _**rest**_ を要求した場合、 _**別の論理的なシーケンスを返す。**_ "
"シーケンスが空かどうかはそれに対して *seq* を呼び出すことによって判定できる。シーケンスとシーケンスのプロトコルを "
"_lazy_ な(遅延評価される)ものにすることが可能になる。"

#. type: Plain text
#: en/content/reference/lisps.adoc:46
msgid ""
"Some of the sequence functions correspond to functions from Scheme and CL that there manipulated only pairs/conses "
"('lists') and returned sentinel values ('() and nil) that represented 'empty' lists. The Clojure return values differ "
"in not returning specific empty collections, but rather another logical sequence. Some of the sequence functions have "
"no counterpart in Scheme/CL, and map to Haskell/ML-like functions. Some of those functions return infinite or "
"calculated sequences, where the analogy to concrete data-structures like Scheme/CL lists is tenuous at best."
msgstr ""
"いくつかのシーケンス関数は、pair/cons (リスト) に対してのみ操作を行い、空リストを意味するセンチネル値 ('() と nil) を"
"返すという点がSchemeやCLの関数に対応する。Clojureが返す値は、具体的な空のコレクションではなく、むしろ別の論理的なシー"
"ケンスであるという点が異なる。いくつかのシーケンス関数はScheme/CLに相当するものが存在せず、Haskell/MLライクな関数であ"
"る。これらの関数のいくつかが無限の、または計算されたシーケンスを返し、Scheme/CLにおける具体的なデータ構造とはあまり似"
"ていない。"

#. type: Plain text
#: en/content/reference/lisps.adoc:47
msgid ""
"It helps to distinguish collections/data-structures and seqs/iteration. In both CL and Scheme they are conflated, in "
"Clojure they are separate."
msgstr ""
"コレクション/データ構造とseq/iterationを区別することは有用だ。CLとSchemeではどちらもそれらが入り混じっているが、"
"Clojureでは区別されている。"

#. type: Table
#: en/content/reference/lisps.adoc:61
#, no-wrap
msgid ""
"|   | Clojure | Common Lisp | Scheme | Java |\n"
"| Has nil? | nil - means 'nothing' | nil - means false or empty list | - | null |\n"
"| Has true? | true | - | #t | true (primitive) |\n"
"| Has false? | false | - | #f | false (primitive) |\n"
"| Conditionals distinguish: | nil or false/ everything else | nil/non-nil | #f/non-#f | false/true |\n"
"| List/sequence library manipulates distinguished concrete type(s)? | No - seq abstraction with many collection implementations | Yes - cons and vector | Yes - pair | No - Iterator abstraction with many collection implementations |\n"
"| Singleton empty-list value? | No - can have distinct empty values of concrete collection types | nil | '() | No |\n"
"| End-of-sequence returns: | a logical sequence for which *seq* returns nil | nil | '() | false |\n"
"| Host null: | nil | NA | NA | NA |\n"
"| Host true: | true (boxed) | NA | NA | NA |\n"
"| Host false: | false (boxed) | NA | NA | NA |\n"
msgstr ""
"|   | Clojure | Common Lisp | Scheme | Java |\n"
"| nil があるか | nil - 「無」を意味する | nil - falseまたは空リストを意味する | - | null |\n"
"| true があるか | true | - | #t | true (プリミティブ) |\n"
"| false があるか | false | - | #f | false (プリミティブ) |\n"
"| 条件分岐の際の区別: | nil と false/ それ以外 | nil/非nil | #f/非#f | false/true |\n"
"| リスト/シーケンスライブラリが個別の具体的な型を扱うか | 扱わない - seqによるコレクションの実装の抽象化 | 扱う - コンス と ベクター | 扱う - ペア | 扱わない - イテレーターによるコレクション実装の抽象化 |\n"
"| シングルトンの空リスト値があるか | ない - 具体的なコレクション型ごとに空のコレクションの値が存在しうる | nil | '() | ない |\n"
"| シーケンスの終端の戻り値: | *seq* がnilを返す論理シーケンス | nil | '() | false |\n"
"| ホスト環境の null: | nil | NA | NA | NA |\n"
"| ホスト環境の true: | true (boxed) | NA | NA | NA |\n"
"| ホスト環境の false: | false (boxed) | NA | NA | NA |\n"
