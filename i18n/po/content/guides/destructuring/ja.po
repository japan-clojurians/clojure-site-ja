# Japanese translations for clojure-site-ja package
# Copyright (C) 2016 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: 2019-06-15 18:59+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title ==
#: en/content/reference/macros.adoc:1 en/content/guides/spec.adoc:777 en/content/guides/destructuring.adoc:539
#, no-wrap
msgid "Macros"
msgstr "マクロ(macro)"

#. type: Title =
#: en/content/guides/destructuring.adoc:1
#, no-wrap
msgid "Destructuring in Clojure"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:4
msgid "Michael Zavarella 2015-12-09"
msgstr ""

#. type: Title ==
#: en/content/guides/destructuring.adoc:12
#, no-wrap
msgid "What is Destructuring?"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:15
msgid ""
"Destructuring is a way to concisely bind names to the values inside a data structure. Destructuring allows us to "
"write more concise and readable code."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:17
msgid "Consider the following example of extracting and naming values in a vector."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:21 en/content/guides/destructuring.adoc:192
#, no-wrap
msgid "(def my-line [[5 10] [10 20]])\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:30
#, no-wrap
msgid ""
"(let [p1 (first my-line)\n"
"      p2 (second my-line)\n"
"      x1 (first p1)\n"
"      y1 (second p1)\n"
"      x2 (first p2)\n"
"      y2 (second p2)]\n"
"  (println \"Line from (\" x1 \",\" y1 \") to (\" x2 \", \" y2 \")\"))\n"
";= \"Line from ( 5 , 10 ) to ( 10 , 20 )\"\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:33
msgid ""
"This is perfectly valid, but the code extracting and naming the values in the vector obscures our intent. "
"Destructuring allows us to more concisely extract and name important parts of complex data structures to make our "
"code cleaner."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:42
#, no-wrap
msgid ""
";= Using the same vector as above\n"
"(let [[p1 p2] my-line\n"
"      [x1 y1] p1\n"
"      [x2 y2] p2]\n"
" (println \"Line from (\" x1 \",\" y1 \") to (\" x2 \", \" y2 \")\"))\n"
";= \"Line from ( 5 , 10 ) to ( 10 , 20 )\"\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:45
msgid ""
"Rather than explicitly binding each variable, we describe the bindings based on their sequential order. That's a "
"pretty weird statement, \"describe the bindings,\" so let's look at it again."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:47
msgid ""
"We have a data structure `my-line` that looks like this, `[[5 10] [10 20]]`. In our destructuring form we will create "
"a vector containing two elements, `p1` and `p2`, each of which are vectors themselves. This will bind the vector `[5 "
"10]` to the symbol `p1` and the vector `[10 20]` to the symbol `p2`. Since we want to work with the elements of `p1` "
"and `p2` rather than the structures themselves, we destructure `p1` and `p2` within the same let statement. The "
"vector `p1` looks like this, `[5 10]`, so to destructure it, we create a vector containing two elements, `x1` and "
"`y1`. This binds `5` to the symbol `x1` and `10` to the symbol `y1`. The same is repeated for `p2` binding `10` to "
"`x2` and `20` to `y2`. At this point, we now have everything we need to work with our data."
msgstr ""

#. type: Title ==
#: en/content/guides/destructuring.adoc:48
#, no-wrap
msgid "Sequential Destructuring"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:51
msgid ""
"Clojure destructuring is broken up into two categories, sequential destructuring and associative destructuring. "
"Sequential destructuring represents a sequential data structure as a Clojure vector within a let binding."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:53
msgid ""
"This type of destructuring can be used on any kind of data structure that can be traversed in linear time, including "
"lists, vectors, and anything that can produce a sequence."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:59
#, no-wrap
msgid ""
"(def my-vector [1 2 3])\n"
"(def my-list '(1 2 3))\n"
"(def my-string \"abc\")\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:64
#, no-wrap
msgid ""
";= It should come as no surprise that this will print out 1 2 3\n"
"(let [[x y z] my-vector]\n"
"  (println x y z))\n"
";= 1 2 3\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:69
#, no-wrap
msgid ""
";= We can also use a similar technique to destructure a list\n"
"(let [[x y z] my-list]\n"
"  (println x y z))\n"
";= 1 2 3\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:76
#, no-wrap
msgid ""
";= For strings, the elements are destructured by character.\n"
"(let [[x y z] my-string]\n"
"  (println x y z)\n"
"  (map type [x y z]))\n"
";= a b c\n"
";= (java.lang.Character java.lang.Character java.lang.Character)\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:79
msgid ""
"The key to sequential destructuring is that you bind the values one-by-one to the symbols in the vector. For instance "
"the vector `[x y z]` will match each element one-by-one with the list `'(1 2 3)`."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:81
msgid ""
"In some cases, the collection you are destructuring isn't the exact same size as the destructuring bindings. If the "
"vector is too small, the extra symbols will be bound to nil."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:88
#, no-wrap
msgid ""
"(def small-list '(1 2 3))\n"
"(let [[a b c d e f g] small-list]\n"
"  (println a b c d e f g))\n"
";= 1 2 3 nil nil nil nil\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:91
msgid "On the other hand, if the collection is too large, the extra values are simply ignored."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:98
#, no-wrap
msgid ""
"(def large-list '(1 2 3 4 5 6 7 8 9 10))\n"
"(let [[a b c] large-list]\n"
"  (println a b c))\n"
";= 1 2 3\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:101
msgid "Destructuring gives you total control over the elements that you choose to bind (or not) and how you bind them."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:103
msgid "Many times, you don't need access to _every_ element in a collection, only certain ones."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:107
#, no-wrap
msgid "(def names [\"Michael\" \"Amber\" \"Aaron\" \"Nick\" \"Earl\" \"Joe\"])\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:110
msgid "Say you want to print the first element on one line and the remainder on another line."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:118
#, no-wrap
msgid ""
"(let [[item1 item2 item3 item4 item5 item6] names]\n"
"  (println item1)\n"
"  (println item2 item3 item4 item5 item6))\n"
";= Michael\n"
";= Amber Aaron Nick Earl Joe\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:121
msgid ""
"This binding works but even using destructuring it's pretty clunky. Instead we can use `&` to combine the tail "
"elements into a sequence."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:129
#, no-wrap
msgid ""
"(let [[item1 & remaining] names]\n"
"  (println item1)\n"
"  (apply println remaining))\n"
";= Michael\n"
";= Amber Aaron Nick Earl Joe\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:132
msgid "You can ignore bindings that you don't intend on using by binding them to any symbol of your choosing."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:138
#, no-wrap
msgid ""
"(let [[item1 _ item3 _ item5 _] names]\n"
"  (println \"Odd names:\" item1 item3 item5))\n"
";= Odd names: Michael Aaron Earl\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:141
msgid "The convention for this is to use an underscore like above."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:143
msgid "You can use `:as all` to bind the entire vector to the symbol `all`."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:149
#, no-wrap
msgid ""
"(let [[item1 :as all] names]\n"
"  (println \"The first name from\" all \"is\" item1))\n"
";= The first name from [Michael Amber Aaron Nick Earl Joe] is Michael\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:152
msgid "Let's stop for a bit and look a little further into the types of `:as` and `&`."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:159
#, no-wrap
msgid ""
"(def numbers [1 2 3 4 5])\n"
"(let [[x & remaining :as all] numbers]\n"
"  (apply prn [remaining all]))\n"
";= (2 3 4 5) [1 2 3 4 5]\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:162
msgid ""
"Here `remaining` is bound to a sequence containing the remaining elements of the `numbers` vector while `all` has "
"been bound to the original `vector`. What happens when we destructure a string instead?"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:169
#, no-wrap
msgid ""
"(def word \"Clojure\")\n"
"(let [[x & remaining :as all] word]\n"
"  (apply prn [x remaining all]))\n"
";= \\C (\\l \\o \\j \\u \\r \\e) \"Clojure\"\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:172
msgid ""
"Here `all` is bound to the original structure (String, vector, list, whatever it may be) and `x` is bound to the "
"character `\\C`, and `remaining` is the remaining list of characters."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:174
msgid "You can combine any or all of these techniques at the same time at your discretion."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:185
#, no-wrap
msgid ""
"(def fruits [\"apple\" \"orange\" \"strawberry\" \"peach\" \"pear\" \"lemon\"])\n"
"(let [[item1 _ item3 & remaining :as all-fruits] fruits]\n"
"  (println \"The first and third fruits are\" item1 \"and\" item3)\n"
"  (println \"These were taken from\" all-fruits)\n"
"  (println \"The fruits after them are\" remaining))\n"
";= The first and third fruits are apple and strawberry\n"
";= These were taken from [apple orange strawberry peach pear lemon]\n"
";= The fruits after them are (peach pear lemon)\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:188
msgid ""
"Destructuring can also be nested to get access to arbitrary levels of sequential structure. Let's go back to our "
"vector from the very beginning, `my-line`."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:195
msgid "This vector is comprised of nested vectors that we can access directly."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:201
#, no-wrap
msgid ""
"(let [[[x1 y1][x2 y2]] my-line]\n"
"  (println \"Line from (\" x1 \",\" y1 \") to (\" x2 \", \" y2 \")\"))\n"
";= \"Line from ( 5 , 10 ) to ( 10 , 20 )\"\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:204
msgid "When you have nested vectors, you can use `:as` or `&` at any level as well."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:212
#, no-wrap
msgid ""
"(let [[[a b :as group1] [c d :as group2]] my-line]\n"
"  (println a b group1)\n"
"  (println c d group2))\n"
";= 5 10 [5 10]\n"
";= 10 20 [10 20]\n"
msgstr ""

#. type: Title ==
#: en/content/guides/destructuring.adoc:214
#, no-wrap
msgid "Associative Destructuring"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:217
msgid ""
"Associative destructuring is similar to sequential destructuring, but applied instead to associative (key-value) "
"structures (including maps, records, vectors, etc). The associative bindings are concerned with concisely extracting "
"values of the map by key."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:219
msgid "Let's first consider an example that extracts values from a map without destructuring:"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:225
#, no-wrap
msgid ""
"(def client {:name \"Super Co.\"\n"
"             :location \"Philadelphia\"\n"
"             :description \"The worldwide leader in plastic tableware.\"})\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:231
#, no-wrap
msgid ""
"(let [name (:name client)\n"
"      location (:location client)\n"
"      description (:description client)]\n"
"  (println name location \"-\" description))\n"
";= Super Co. Philadelphia - The worldwide leader in plastic tableware.\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:234
msgid ""
"Note that each line of the let binding is essentially the same - it extracts a value from the map by the name of the "
"key, then binds it to a local with the same name."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:236
msgid "Below is a first example of doing the same thing with associative destructuring:"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:244
#, no-wrap
msgid ""
"(let [{name :name\n"
"       location :location\n"
"       description :description} client]\n"
"  (println name location \"-\" description))\n"
";= Super Co. Philadelphia - The worldwide leader in plastic tableware.\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:247
msgid ""
"The destructuring form is now a map rather than a vector, and instead of a symbol on the left side of the let, we "
"have a map. The keys of the map are the symbols we want to bind in the let. The values of the destructuring map are "
"the keys we will look up in the associative value. Here they are keywords (the most common case), but they could be "
"any key value - numbers, strings, symbols, etc."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:249
msgid ""
"Similar to sequential destructuring, if you try to bind a key that is not present in the map, the binding value will "
"be nil."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:255
#, no-wrap
msgid ""
"(let [{category :category} client]\n"
"  (println category))\n"
";= nil\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:258
msgid ""
"Associative destructuring, however, also allows you to supply a default value if the key is not present in the "
"associative value with the `:or` key."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:264
#, no-wrap
msgid ""
"(let [{category :category, :or {category \"Category not found\"}} client]\n"
"  (println category))\n"
";= Category not found\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:267
msgid ""
"The value for `:or` is a map where the bound symbol (here `category`) is bound to the expression `\"Category not found"
"\"`. When category is not found in `client`, it is instead found in the `:or` map and bound to that value instead."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:269
msgid ""
"In sequential destructuring, you generally bind unneeded values with an `_`. Since associative destructuring doesn't "
"require traversing the entire structure, you can simply omit any keys you don't plan on using from the destructuring "
"form."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:271
msgid ""
"If you need access to the entire map, you can use the `:as` key to bind the entire incoming value, just as in "
"sequential destructuring."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:277
#, no-wrap
msgid ""
"(let [{name :name :as all} client]\n"
"  (println \"The name from\" all \"is\" name))\n"
";= The name from {:name Super Co., :location Philadelphia, :description The world wide leader in plastic table-ware.} is Super Co.\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:280
msgid "The `:as` and `:or` keywords can be combined in a single destructuring."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:289
#, no-wrap
msgid ""
"(def my-map {:a \"A\" :b \"B\" :c 3 :d 4})\n"
"(let [{a :a, x :x, :or {x \"Not found!\"}, :as all} my-map]\n"
"  (println \"I got\" a \"from\" all)\n"
"  (println \"Where is x?\" x))\n"
";= I got A from {:a \"A\" :b \"B\" :c 3 :d 4}\n"
";= Where is x? Not found!\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:292
msgid ""
"You might have noticed that our original example still contains redundant information (the local binding name and the "
"key name) in the associative destructuring form. The `:keys` key can be used to further remove the duplication:"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:298
#, no-wrap
msgid ""
"(let [{:keys [name location description]} client]\n"
"  (println name location \"-\" description))\n"
";= Super Co. Philadelphia - The worldwide leader in plastic tableware.\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:301
msgid ""
"This example is exactly the same as the prior version - it binds `name` to `(:name client)`, `location` to `(:"
"location client)`, and `description` to `(:description client)`."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:303
msgid ""
"The `:keys` key is for associative values with keyword keys, but there are also `:strs` and `:syms` for string and "
"symbol keys respectively. In all of these cases the vector contains symbols which are the local binding names."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:307
#, no-wrap
msgid "(def string-keys {\"first-name\" \"Joe\" \"last-name\" \"Smith\"})\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:311
#, no-wrap
msgid ""
"(let [{:strs [first-name last-name]} string-keys]\n"
"  (println first-name last-name))\n"
";= Joe Smith\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:313
#, no-wrap
msgid "(def symbol-keys {'first-name \"Jane\" 'last-name \"Doe\"})\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:317
#, no-wrap
msgid ""
"(let [{:syms [first-name last-name]} symbol-keys]\n"
"  (println first-name last-name))\n"
";= Jane Doe\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:320
msgid "Associative destructuring can be nested and combined with sequential destructuring as needed."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:333
#, no-wrap
msgid ""
"(def multiplayer-game-state\n"
"  {:joe {:class \"Ranger\"\n"
"         :weapon \"Longbow\"\n"
"         :score 100}\n"
"   :jane {:class \"Knight\"\n"
"          :weapon \"Greatsword\"\n"
"          :score 140}\n"
"   :ryan {:class \"Wizard\"\n"
"          :weapon \"Mystic Staff\"\n"
"          :score 150}})\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:337
#, no-wrap
msgid ""
"(let [{{:keys [class weapon]} :joe} multiplayer-game-state]\n"
"  (println \"Joe is a\" class \"wielding a\" weapon))\n"
";= Joe is a Ranger wielding a Longbow\n"
msgstr ""

#. type: Title ===
#: en/content/guides/destructuring.adoc:339
#, no-wrap
msgid "Keyword arguments"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:342
msgid ""
"One special case is using associative destructuring for keyword-arg parsing. Consider a function that takes options `:"
"debug` and `:verbose`. These could be specified in an options map:"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:348
#, no-wrap
msgid ""
"(defn configure [val options]\n"
"  (let [{:keys [debug verbose] :or {debug false, verbose false}} options]\n"
"    (println \"val =\" val \" debug =\" debug \" verbose =\" verbose)))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:351
#, no-wrap
msgid ""
"(configure 12 {:debug true})\n"
";;val = 12  debug = true  verbose = false\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:354
msgid ""
"However, it would be nicer to type if we could pass those optional arguments as just additional \"keyword\" arguments "
"like this:"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:358
#, no-wrap
msgid "(configure 12 :debug true)\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:361
msgid ""
"To support this style of invocation, associative destructuring also works with lists or sequences of key-value pairs "
"for keyword argument parsing. The sequence comes from the rest arg of a variadic function but is destructured not "
"with sequential destructuring, but with associative destructuring (so a sequence destructured as if it were the key-"
"value pairs in a map):"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:367
#, no-wrap
msgid ""
"(defn configure [val & {:keys [debug verbose]\n"
"                        :or {debug false, verbose false}}]\n"
"  (println \"val =\" val \" debug =\" debug \" verbose =\" verbose))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:370
#, no-wrap
msgid ""
"(configure 10)\n"
";;val = 10  debug = false  verbose = false\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:373
#, no-wrap
msgid ""
"(configure 5 :debug true)\n"
";;val = 5  debug = true  verbose = false\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:377
#, no-wrap
msgid ""
";; Note that any order is ok for the kwargs\n"
"(configure 12 :verbose true :debug true)\n"
";;val = 12  debug = true  verbose = true\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:380
msgid ""
"The use of keyword arguments has fallen in and out of fashion in the Clojure community over the years. They are now "
"mostly used when presenting interfaces that people are expected to type at the REPL or the outermost layers of an "
"API. In general, inner layers of the code find it easier to pass options as an explicit map."
msgstr ""

#. type: Title ===
#: en/content/guides/destructuring.adoc:381
#, no-wrap
msgid "Namespaced keywords"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:384
msgid ""
"If the keys in your map are namespaced keywords, you can also use destructuring with it, even though local binding "
"symbols are not allowed to have namespaces. Destructuring a namespaced key will bind a value to the local name part "
"of the key and drop the namespace."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:394
#, no-wrap
msgid ""
"(def human {:person/name \"Franklin\"\n"
"            :person/age 25\n"
"            :hobby/hobbies \"running\"})\n"
"(let [{:keys [hobby/hobbies]\n"
"       :person/keys [name age]} human]\n"
"  (println name \"is\" age \"and likes\" hobbies))\n"
";= Franklin is 25 and likes running\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:397
msgid ""
"Destructuring namespaced keywords using `:keys` alone can result in local bindings that clash. Because all map "
"destructuring options can be combined, any local binding form can be defined individually."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:408
#, no-wrap
msgid ""
"(def human {:person/name \"Franklin\"\n"
"            :person/age 25\n"
"            :hobby/name \"running\"})\n"
"(let [{:person/keys [age]\n"
"       hobby-name :hobby/name\n"
"       person-name :person/name} human]\n"
"  (println person-name \"is\" age \"and likes\" hobby-name))\n"
";= Franklin is 25 and likes running\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:411
msgid ""
"You can even destructure using auto-resolved keywords, which will again be bound to only the name part of the key:"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:417
#, no-wrap
msgid ""
";; this assumes you have a person.clj namespace in your project\n"
";; if not do the following at your repl instead: (create-ns 'person) (alias 'p 'person)\n"
"(require '[person :as p])\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:421
#, no-wrap
msgid ""
"(let [person {::p/name \"Franklin\", ::p/age 25}\n"
"      {:keys [::p/name ::p/age]} person]\n"
"  (println name \"is\" age))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:423
#, no-wrap
msgid ";= Franklin is 25\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:426
msgid ""
"Creating and destructuring maps with auto-resolved keywords allow us to write code using a namespace alias (here `p`) "
"that is defined by a `require` in the current namespace, giving us a means of namespace indirection that can be "
"changed at a single place in the code."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:428
msgid ""
"All symbols bound in the context of destructuring can be further destructured - this allows destructuring to be used "
"in a nested fashion for both sequential and associative destructuring. It is less obvious, but this also extends to "
"the symbol defined after `&`."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:430
msgid ""
"This example destructures the `&` seq in place to decode the rest of the arguments as options (note that we are thus "
"destructuring the two arguments sequentially and the rest associatively):"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:436
#, no-wrap
msgid ""
"(defn f-with-options\n"
"  [a b & {:keys [opt1]}]\n"
"  (println \"Got\" a b opt1))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:439
#, no-wrap
msgid ""
"(f-with-options 1 2 :opt1 true)\n"
";= Got 1 2 true\n"
msgstr ""

#. type: Title ==
#: en/content/guides/destructuring.adoc:441
#, no-wrap
msgid "Where to destructure"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:444
msgid "You can utilize destructuring anywhere that there is an explicit or implicit let binding."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:446
msgid "One of the most common places to see destructuring is in pulling apart the arguments passed to a function."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:448
msgid ""
"Here we have the standard let x equal this, let y equal that, etc... Again, this is perfectly valid code, it's just "
"verbose."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:456
#, no-wrap
msgid ""
"(defn print-coordinates-1 [point]\n"
"  (let [x (first point)\n"
"        y (second point)\n"
"        z (last point)]\n"
"    (println \"x:\" x \", y:\" y \", z:\" z)))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:459
msgid ""
"Any time we see code that is using `first`, `second`, `nth`, or `get` to pull apart a data structure, it's likely "
"that destructuring can clean that up - we can start by rewriting the `let`:"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:465
#, no-wrap
msgid ""
"(defn print-coordinates-2 [point]\n"
"  (let [[x y z] point]\n"
"    (println \"x:\" x \", y:\" y \", z:\" z)))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:468
msgid ""
"When defining a function in clojure, destructuring can be applied on the incoming parameters, just like in a let:"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:473
#, no-wrap
msgid ""
"(defn print-coordinates-3 [[x y z]]\n"
"  (println \"x:\" x \", y:\" y \", z:\" z))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:476
msgid ""
"We have replaced several lines of code that pulled apart the incoming point data with a concise statement about the "
"structure of that data that also binds the data to local values."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:478
msgid ""
"For a more realistic example, let's create a map containing some basic contact information for the infamous John "
"Smith."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:486
#, no-wrap
msgid ""
"(def john-smith {:f-name \"John\"\n"
"                 :l-name \"Smith\"\n"
"                 :phone \"555-555-5555\"\n"
"                 :company \"Functional Industries\"\n"
"                 :title \"Sith Lord of Git\"})\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:489
msgid "Now that we have John's personal information we need to access the values within this map."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:495
#, no-wrap
msgid ""
"(defn print-contact-info [{:keys [f-name l-name phone company title]}]\n"
"  (println f-name l-name \"is the\" title \"at\" company)\n"
"  (println \"You can reach him at\" phone))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:499
#, no-wrap
msgid ""
"(print-contact-info john-smith)\n"
";= John Smith is the Sith Lord of Git at Functional Industries\n"
";= You can reach him at 555-555-5555\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:502
msgid ""
"This function will associatively destructure the input using the `:keys` shortcut and then print out the contact "
"information that we provided."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:504
msgid "But what about when we want to send John a nice letter?"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:517
#, no-wrap
msgid ""
"(def john-smith {:f-name \"John\"\n"
"                 :l-name \"Smith\"\n"
"                 :phone \"555-555-5555\"\n"
"                 :address {:street \"452 Lisp Ln.\"\n"
"                           :city \"Macroville\"\n"
"                           :state \"Kentucky\"\n"
"                           :zip \"81321\"}\n"
"                 :hobbies [\"running\" \"hiking\" \"basketball\"]\n"
"                 :company \"Functional Industries\"\n"
"                 :title \"Sith Lord of Git\"})\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:520
msgid ""
"We have an address in there now, but we needed to nest a map into our original structure in order to accomplish this."
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:531
#, no-wrap
msgid ""
"(defn print-contact-info\n"
"  [{:keys [f-name l-name phone company title]\n"
"    {:keys [street city state zip]} :address\n"
"    [fav-hobby second-hobby] :hobbies}]\n"
"  (println f-name l-name \"is the\" title \"at\" company)\n"
"  (println \"You can reach him at\" phone)\n"
"  (println \"He lives at\" street city state zip)\n"
"  (println \"Maybe you can write to him about\" fav-hobby \"or\" second-hobby))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:537
#, no-wrap
msgid ""
"(print-contact-info john-smith)\n"
";= John Smith is the Sith Lord of Git at Functional Industries\n"
";= You can reach him at 555-555-5555\n"
";= He lives at 452 Lisp Ln. Macroville Kentucky 81321\n"
";= Maybe you can write to him about running or hiking\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:542
msgid ""
"Macro writers may find the need to write a macro that incorporates destructuring. The most common way to do so is to "
"produce a call to something that already does destructuring (like `let`, `loop`, `fn`, etc). Some examples of this in "
"`clojure.core` include `if-let`, `when-let`, `when-some`, etc."
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:544
msgid ""
"However, in rare cases you might want to instead resolve the destructuring yourself in a macro. In this case, use the "
"(undocumented) `clojure.core/destructure` function, which implements the destructuring logic and is what `let` and "
"`loop` actually invoke. The `destructure` function is designed to be invoked in a macro and expects to take a form "
"and return a form:"
msgstr ""

#. type: delimited block -
#: en/content/guides/destructuring.adoc:552
#, no-wrap
msgid ""
"(destructure '[[x & remaining :as all] numbers])\n"
";= [vec__1 numbers\n"
";=  x (clojure.core/nth vec__1 0 nil)\n"
";=  remaining (clojure.core/nthnext vec__1 1)\n"
";=  all vec__1]\n"
msgstr ""

#. type: Plain text
#: en/content/guides/destructuring.adoc:554
msgid ""
"The result was formatted here to give it a little more clarity. This example should also give you some insight into "
"how destructuring works under the hood."
msgstr ""
