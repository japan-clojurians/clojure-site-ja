# Japanese translations for clojure-site-ja package
# Copyright (C) 2016 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: 2016-06-27 08:47+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: en/content/reference/namespaces.adoc:1 en/content/guides/reader_conditionals.adoc:87 en/content/guides/faq.adoc:133
#: en/content/news/2011/07/22/introducing-clojurescript.adoc:28
#, no-wrap
msgid "Namespaces"
msgstr "ネームスペース"

#. type: delimited block -
#: en/content/guides/weird_characters.adoc:700 en/content/guides/reader_conditionals.adoc:25
#, no-wrap
msgid ""
"#?(:clj  (Clojure expression)\n"
"   :cljs (ClojureScript expression)\n"
"   :cljr (Clojure CLR expression)\n"
"   :default (fallthrough expression))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/weird_characters.adoc:708 en/content/guides/reader_conditionals.adoc:30
msgid ""
"The syntax for a splicing reader conditional is `#?@`. It is used to splice lists into the containing form. So the "
"Clojure reader would read this:"
msgstr ""

#. type: delimited block -
#: en/content/guides/weird_characters.adoc:713 en/content/guides/reader_conditionals.adoc:36
#, no-wrap
msgid ""
"(defn build-list []\n"
"  (list #?@(:clj  [5 6 7 8]\n"
"            :cljs [1 2 3 4])))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/weird_characters.adoc:715 en/content/guides/reader_conditionals.adoc:39
msgid "as this:"
msgstr ""

#. type: delimited block -
#: en/content/guides/weird_characters.adoc:719 en/content/guides/reader_conditionals.adoc:44
#, no-wrap
msgid ""
"(defn build-list []\n"
"  (list 5 6 7 8))\n"
msgstr ""

#. type: Title ==
#: en/content/guides/comparators.adoc:71 en/content/guides/reader_conditionals.adoc:11
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Title =
#: en/content/guides/reader_conditionals.adoc:1
#, no-wrap
msgid "Reader Conditionals Guide"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:4
msgid "Daniel Compton 2016-01-14"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:14
msgid ""
"Reader conditionals are a feature added in Clojure 1.7. They are designed to allow different dialects of Clojure to "
"share common code that is mostly platform independent, but contains some platform dependent code. If you are writing "
"code across multiple platforms that is mostly independent you should separate `.clj` and `.cljs` files instead."
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:16
msgid ""
"Reader conditionals are integrated into the Clojure reader, and don't require any extra tooling beyond Clojure 1.7 or "
"greater. To use reader conditionals, all you need is for your file to have a `.cljc` extension and to use Clojure 1.7 "
"or ClojureScript 0.0-3196 or higher. Reader conditionals are expressions, and can be manipulated like ordinary "
"Clojure expressions. For more technical details, see the reference page on <<xref/../../reference/reader#,the "
"reader>>."
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:18
msgid ""
"There are two types of reader conditionals, standard and splicing. The standard reader conditional behaves similarly "
"to a traditional `cond`. The syntax for usage is `#?` and looks like:"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:28
msgid ""
"The platform tags `:clj`, etc are a fixed set of tags hard-coded into each platform. The `:default` tag is a well-"
"known tag to catch and provide an expression if no platform tag matches. If no tags match and `:default` is not "
"provided, the reader conditional will read nothing (not nil, but as if nothing was read from the stream at all)."
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:47
msgid ""
"One important thing to note is that in Clojure 1.7 a splicing conditional reader cannot be used to splice in multiple "
"top level forms. In concrete terms, this means you can't do this:"
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:55
#, no-wrap
msgid ""
";; Don't do this!, will throw an error\n"
"#?@(:clj\n"
"    [(defn clj-fn1 [] :abc)\n"
"     (defn clj-fn2 [] :cde)])\n"
";; CompilerException java.lang.RuntimeException: Reader conditional splicing not allowed at the top level.\n"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:58
msgid "Instead you'd need to do wrap each function individually:"
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:63
#, no-wrap
msgid ""
"#?(:clj (defn clj-fn1 [] :abc))\n"
"#?(:clj (defn clj-fn2 [] :cde))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:66
msgid "or use a `do` to wrap all of the top level functions:"
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:72
#, no-wrap
msgid ""
"#?(:clj\n"
"    (do (defn clj-fn1 [] :abc)\n"
"        (defn clj-fn2 [] :cde)))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:75
msgid "Let's go through some examples of places you might want to use these new reader conditionals."
msgstr ""

#. type: Title ==
#: en/content/guides/reader_conditionals.adoc:76
#, no-wrap
msgid "Host interop"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:79
msgid ""
"Host interop is one of the biggest pain points solved by reader conditionals. You may have a Clojure file that is "
"almost pure Clojure, but needs to call out to the host environment for one function. https://github.com/"
"lymingtonprecision/route-ccrs/blob/c579aea05504736f2cfbd31c3c755f7e25fdad77/src/route_ccrs/manufacturing_methods."
"cljc#L8-L10[This] is a classic example:"
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:85
#, no-wrap
msgid ""
"(defn str->int [s]\n"
"  #?(:clj  (java.lang.Integer/parseInt s)\n"
"     :cljs (js/parseInt s)))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:90
msgid ""
"Namespaces are the other big pain point for sharing code between Clojure and ClojureScript. ClojureScript has "
"different syntax for https://clojurescript.org/about/differences#_macros[requiring macros] than Clojure. To use "
"macros that work in both Clojure and ClojureScript in a `.cljc` file, you'll need reader conditionals in the "
"namespace declaration."
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:92
msgid ""
"Here is an example from a https://github.com/lymingtonprecision/route-ccrs/blob/"
"c579aea05504736f2cfbd31c3c755f7e25fdad77/test/route_ccrs/schema/ids/part_no_test.cljc[test] in https://github.com/"
"lymingtonprecision/route-ccrs[route-ccrs]"
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:103
#, no-wrap
msgid ""
"(ns route-ccrs.schema.ids.part-no-test\n"
"  (:require #?(:clj  [clojure.test :refer :all]\n"
"               :cljs [cljs.test :refer-macros [is]])\n"
"            #?(:cljs [cljs.test.check :refer [quick-check]])\n"
"            #?(:clj  [clojure.test.check.properties :as prop]\n"
"               :cljs [cljs.test.check.properties :as prop\n"
"                       :include-macros true])\n"
"            [schema.core :as schema :refer [check]]))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:106
msgid ""
"Here is another example, we want to be able to use the `rethinkdb.query` namespace in Clojure and ClojureScript. "
"However we can't load the required `rethinkdb.net` in ClojureScript as it uses Java sockets to communicate with the "
"database. Instead we use a reader conditional so the namespace is only required when read by Clojure programs."
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:112
#, no-wrap
msgid ""
"(ns rethinkdb.query\n"
"  (:require [clojure.walk :refer [postwalk postwalk-replace]]\n"
"            #?(:clj [rethinkdb.net :as net])))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:114
#, no-wrap
msgid ";; snip...\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:118
#, no-wrap
msgid ""
"#?(:clj (defn run [query conn]\n"
"      (let [token (get-token conn)]\n"
"        (net/send-start-query conn token (replace-vars query)))))\n"
msgstr ""

#. type: Title ===
#: en/content/guides/reader_conditionals.adoc:120 en/content/guides/learn/flow.adoc:285
#, no-wrap
msgid "Exception handling"
msgstr "例外処理"

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:123
msgid ""
"Exception handling is another area that benefits from reader conditionals. ClojureScript supports `(catch :default)` "
"to catch everything, however you will often still want to handle host specific exceptions. Here's an https://github."
"com/runexec/lemon-disc/blob/c24c6638f1d476a0f5470387e52a2b702117c4a9/src/lemon_disc/core.cljc#L65-L72[example] from "
"https://github.com/runexec/lemon-disc[lemon-disc]."
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:134
#, no-wrap
msgid ""
"(defn message-container-test [f]\n"
"  (fn [mc]\n"
"      (passed?\n"
"        (let [failed* (failed mc)]\n"
"          (try\n"
"            (let [x (:data mc)]\n"
"              (if (f x) mc failed*))\n"
"            (catch #?(:clj Exception :cljs js/Object) _ failed*))))))\n"
msgstr ""

#. type: Title ==
#: en/content/guides/reader_conditionals.adoc:136
#, no-wrap
msgid "Splicing"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:139
msgid ""
"The splicing reader conditional is not as widely used as the standard one. For an example on its usage, let's look at "
"the https://github.com/clojure/clojure-clr/blob/544e9354e121e10a656702222d47c8398468fb02/Clojure/Clojure.Tests/"
"clojure/test_clojure/reader.cljc#L672-L677[tests] for reader conditionals in the ClojureCLR reader. What might not be "
"obvious at first glance is that the vectors inside the splicing reader conditional are being wrapped by a surrounding "
"vector."
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:150
#, no-wrap
msgid ""
"(deftest reader-conditionals\n"
"     ;; snip\n"
"     (testing \"splicing\"\n"
"              (is (= [] [#?@(:clj [])]))\n"
"              (is (= [:a] [#?@(:clj [:a])]))\n"
"              (is (= [:a :b] [#?@(:clj [:a :b])]))\n"
"              (is (= [:a :b :c] [#?@(:clj [:a :b :c])]))\n"
"              (is (= [:a :b :c] [#?@(:clj [:a :b :c])]))))\n"
msgstr ""

#. type: Title ==
#: en/content/guides/reader_conditionals.adoc:152
#, no-wrap
msgid "File organisation"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:155
msgid ""
"There isn't a clear community consensus yet around where to put `.cljc` files. Two options are to have a single `src` "
"directory with `.clj`, `.cljs`, and `.cljc` files, or to have separate `src/clj`, `src/cljc`, and `src/cljs` "
"directories."
msgstr ""

#. type: Title ==
#: en/content/guides/reader_conditionals.adoc:156
#, no-wrap
msgid "cljx"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:159
msgid ""
"Before reader conditionals were introduced, the same goal of sharing code between platforms was solved by a Leiningen "
"plugin called https://github.com/lynaghk/cljx[cljx]. cljx processes files with the `.cljx` extension and outputs "
"multiple platform specific files to a generated sources directory. These were then read as normal Clojure or "
"ClojureScript files by the Clojure <<xref/../../reference/reader#,reader>>. This worked well, but required another "
"piece of tooling to run. cljx was deprecated on June 13 2015 in favour of reader conditionals."
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:161
msgid ""
"Sente previously used cljx for sharing code between Clojure and ClojureScript. I've rewritten the https://github.com/"
"ptaoussanis/sente/blob/v1.4.1/src/taoensso/sente.cljx[main] namespace to use reader conditionals. Notice that we've "
"used the splicing reader conditional to splice the vector into the parent `:require`. Notice also that some of the "
"requires are duplicated between `:clj` and `:cljs`."
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:178
#, no-wrap
msgid ""
"(ns taoensso.sente\n"
"  (:require\n"
"    #?@(:clj  [[clojure.string :as str]\n"
"               [clojure.core.async :as async]\n"
"               [taoensso.encore :as enc]\n"
"               [taoensso.timbre :as timbre]\n"
"               [taoensso.sente.interfaces :as interfaces]]\n"
"        :cljs [[clojure.string :as str]\n"
"               [cljs.core.async :as async]\n"
"               [taoensso.encore :as enc]\n"
"               [taoensso.sente.interfaces :as interfaces]]))\n"
"  #?(:cljs (:require-macros\n"
"             [cljs.core.async.macros :as asyncm :refer (go go-loop)]\n"
"             [taoensso.encore :as enc :refer (have? have have-in)])))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:190
#, no-wrap
msgid ""
"(ns taoensso.sente\n"
"  #+clj\n"
"  (:require\n"
"   [clojure.string     :as str]\n"
"   [clojure.core.async :as async)]\n"
"   [taoensso.encore    :as enc]\n"
"   [taoensso.timbre    :as timbre]\n"
"   [taoensso.sente.interfaces :as interfaces])\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:197
#, no-wrap
msgid ""
"  #+cljs\n"
"  (:require\n"
"   [clojure.string  :as str]\n"
"   [cljs.core.async :as async]\n"
"   [taoensso.encore :as enc]\n"
"   [taoensso.sente.interfaces :as interfaces])\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/reader_conditionals.adoc:202
#, no-wrap
msgid ""
"  #+cljs\n"
"  (:require-macros\n"
"   [cljs.core.async.macros :as asyncm :refer (go go-loop)]\n"
"   [taoensso.encore        :as enc    :refer (have? have have-in)]))\n"
msgstr ""

#. type: Title ==
#: en/content/guides/reader_conditionals.adoc:204
#, no-wrap
msgid "Backwards compatibility"
msgstr ""

#. type: Plain text
#: en/content/guides/reader_conditionals.adoc:206
msgid ""
"At the time of writing, there is no way to use `.cljc` files in versions of Clojure less than 1.7, nor is there any "
"porting mechanism to preprocess `.cljc` files to output `.clj` and `.cljs` files like cljx does. For that reason "
"library maintainers may need to wait for a while until they can safely drop support for older versions of Clojure and "
"adopt reader conditionals."
msgstr ""
