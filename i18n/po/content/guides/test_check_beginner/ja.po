# Japanese translations for clojure-site-ja package
# Copyright (C) 2019 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-07-25 20:54+0900\n"
"PO-Revision-Date: 2019-07-25 20:54+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: en/content/reference/transducers.adoc:39 en/content/reference/reader.adoc:180
#: en/content/guides/test_check_beginner.adoc:204
msgid "For example:"
msgstr "例:"

#. type: Title ==
#: en/content/guides/spec.adoc:867 en/content/guides/test_check_beginner.adoc:118
#, no-wrap
msgid "Generators"
msgstr ""

#. type: Title =
#: en/content/guides/test_check_beginner.adoc:1
#, no-wrap
msgid "test.check"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:4
msgid "Gary Fredericks 2019-06-29"
msgstr ""

#. type: Title ==
#: en/content/guides/test_check_beginner.adoc:11 en/content/guides/equality.adoc:128
#: en/content/guides/comparators.adoc:73 en/content/guides/reader_conditionals.adoc:11
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:15
msgid ""
"test.check is a property-based testing library for clojure, inspired by http://hackage.haskell.org/package/"
"QuickCheck[QuickCheck]."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:19
msgid ""
"This guide, which is based on version `0.10.0`, will briefly introduce property-based testing using test.check "
"examples, and then cover basic usage of the different parts of the API."
msgstr ""

#. type: Title ==
#: en/content/guides/test_check_beginner.adoc:20
#, fuzzy, no-wrap
#| msgid "For testing"
msgid "Property-based testing"
msgstr "テストのために"

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:30
msgid ""
"Property-based tests are often contrasted with \"example-based tests\", which are tests which test a function by "
"enumerating specific inputs and the expected outputs (i.e., \"examples\"). This guide is written in terms of testing "
"pure functions, but for testing less pure systems you can imagine a function that wraps the test, which uses the "
"arguments to set up the context for the system, runs the system, and then queries the environment to measure the "
"effects, and returns the result of those queries."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:36
msgid ""
"Property-based testing, in contrast, describes properties that should be true for all valid inputs. A property-based "
"test consists of a method for generating valid inputs (a \"generator\"), and a function which takes a generated input "
"and combines it with the function under test to decide whether the property holds for that particular input."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:40
msgid ""
"A classic first example of a property is one that tests the `sort` function by checking that it's idempotent. In test."
"check, this could be written like this:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:48
#, no-wrap
msgid ""
"(require '[clojure.test.check :as tc])\n"
"(require '[clojure.test.check.generators :as gen])\n"
"(require '[clojure.test.check.properties :as prop])\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:52
#, no-wrap
msgid ""
"(def sort-idempotent-prop\n"
"  (prop/for-all [v (gen/vector gen/int)]\n"
"    (= (sort v) (sort (sort v)))))\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:59
#, no-wrap
msgid ""
"(tc/quick-check 100 sort-idempotent-prop)\n"
";; => {:result true,\n"
";; =>  :pass? true,\n"
";; =>  :num-tests 100,\n"
";; =>  :time-elapsed-ms 28,\n"
";; =>  :seed 1528580707376}\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:67
msgid ""
"Here the `(gen/vector gen/int)` expression is the generator for inputs to the `sort` function; it specifies that an "
"input is a vector of integers. In reality, `sort` can take any collection of compatibly `Comparable` objects; there's "
"often a tradeoff between the simplicity of a generator and the completeness with which it describes the actual input "
"space."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:71
msgid ""
"The name `v` is bound to a particular generated vector of integers, and the expression in the body of the `prop/for-"
"all` determines whether the trial passes or fails."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:76
msgid ""
"The `tc/quick-check` call \"runs the property\" 100 times, meaning it generates one hundred vectors of integers and "
"evaluates `(= (sort v) (sort (sort v)))` for each of them; it reports success only if each of those trials passes."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:82
msgid ""
"If any of the trials fails, then test.check attempts to \"shrink\" the input to a minimal failing example, and then "
"reports the original failing example and the shrunk one. For example, this faulty property claims that after sorting "
"a vector of integers, the first element should be less than the last element:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:89
#, no-wrap
msgid ""
"(def prop-sorted-first-less-than-last\n"
"  (prop/for-all [v (gen/not-empty (gen/vector gen/int))]\n"
"    (let [s (sort v)]\n"
"      (< (first s) (last s)))))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:93
msgid "If we run this property with `tc/quick-check`, it returns something like this:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:112
#, no-wrap
msgid ""
"{:num-tests 5,\n"
" :seed 1528580863556,\n"
" :fail [[-3]],\n"
" :failed-after-ms 1,\n"
" :result false,\n"
" :result-data nil,\n"
" :failing-size 4,\n"
" :pass? false,\n"
" :shrunk\n"
" {:total-nodes-visited 5,\n"
"  :depth 2,\n"
"  :pass? false,\n"
"  :result false,\n"
"  :result-data nil,\n"
"  :time-shrinking-ms 1,\n"
"  :smallest [[0]]}}\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:117
msgid ""
"The original failing example `[-3]` (given at the `:fail` key) has been shrunk to `[0]` (under `[:shrunk :"
"smallest]`), and a variety of other data is provided as well."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:123
msgid ""
"The different parts of test.check are cleanly separated by namespace.  We will proceed from the bottom up, starting "
"with generators, then properties, and then two methods for running tests."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:126
msgid "Generators are supported by the `clojure.test.check.generators` namespace."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:129
msgid "The built-in generators fall into three categories: scalars (basic data types), collections, and combinators."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:131
msgid "scalars (basic data types: numbers, strings, etc.)"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:132
msgid "collections (lists, maps, sets, etc.)"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:133
msgid "combinators"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:136
msgid "The combinators are general enough to support creating generators for arbitrary custom types."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:140
msgid ""
"Additionally, there are several development functions for experimenting with generators. We'll introduce those first "
"so we can use them to demonstrate the rest of the generator functionality."
msgstr ""

#. type: Title ===
#: en/content/guides/test_check_beginner.adoc:141
#, fuzzy, no-wrap
#| msgid "During development"
msgid "Development Tools"
msgstr "開発中に"

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:145
msgid ""
"The `gen/sample` function takes a generator and returns a collection of small sample elements from that generator:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:150
#, no-wrap
msgid ""
"user=> (gen/sample gen/boolean)\n"
"(true false true true true false true true false false)\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:156
msgid ""
"The `gen/generate` function takes a generator and returns a single generated element, and additionally allows "
"specifying the `size` of the element. `size` is an abstract parameter, that is generally an integer ranging from 0 to "
"200."
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:161
#, no-wrap
msgid ""
"user=> (gen/generate gen/large-integer 50)\n"
"-165175\n"
msgstr ""

#. type: Title ===
#: en/content/guides/test_check_beginner.adoc:163
#, no-wrap
msgid "Scalar Generators"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:167
msgid "test.check comes with generators for booleans, numbers, characters, strings, keywords, symbols, and UUIDs. E.g.:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:172
#, no-wrap
msgid ""
"user=> (gen/sample gen/double)\n"
"(-0.5 ##Inf -2.0 -2.0 0.5 -3.875 -0.5625 -1.75 5.0 -2.0)\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:175
#, no-wrap
msgid ""
"user=> (gen/sample gen/char-alphanumeric)\n"
"(\\G \\w \\i \\1 \\V \\U \\8 \\U \\t \\M)\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:178
#, no-wrap
msgid ""
"user=> (gen/sample gen/string-alphanumeric)\n"
"(\"\" \"\" \"e\" \"Fh\" \"w46H\" \"z\" \"Y\" \"7\" \"NF4e\" \"b0\")\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:181
#, no-wrap
msgid ""
"user=> (gen/sample gen/keyword)\n"
"(:. :Lx :x :W :DR :*- :j :g :G :_)\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:184
#, no-wrap
msgid ""
"user=> (gen/sample gen/symbol)\n"
"(+ kI G uw jw M9E ?23 T3 * .q)\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:196
#, no-wrap
msgid ""
"user=> (gen/sample gen/uuid)\n"
"(#uuid \"c4342745-9f71-42cb-b89e-e99651b9dd5f\"\n"
" #uuid \"819c3d12-b45a-4373-a307-5943cf17d90b\"\n"
" #uuid \"c72b5d34-255f-408f-8d16-4828ed740904\"\n"
" #uuid \"d342d515-b297-4ed4-91cc-8cd55007e2c2\"\n"
" #uuid \"6d09c6f3-12d4-4e5e-9de5-0ed32c9fef20\"\n"
" #uuid \"a572178c-5460-44ee-b992-9d3d26daf8c0\"\n"
" #uuid \"572cc48e-b3a8-40ca-9449-48af08c617d3\"\n"
" #uuid \"5f6ed50b-adef-4e7f-90d0-44511900491e\"\n"
" #uuid \"ddbbfd07-d580-4638-9858-57a469d91727\"\n"
" #uuid \"c32b7788-70de-4bf5-b24f-1e7cb564a37d\")\n"
msgstr ""

#. type: Title ===
#: en/content/guides/test_check_beginner.adoc:198
#, no-wrap
msgid "Collection Generators"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:202
msgid "The collection generators are generally functions with arguments for generators of their elements."
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:209
#, no-wrap
msgid ""
"user=> (gen/generate (gen/vector gen/boolean) 5)\n"
"[false false false false]\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:214
msgid ""
"(note that the second argument to `gen/generate` here is not specifying the size of the collection, but the abstract "
"`size` parameter mentioned earlier; the default value for `gen/generate` is 30)"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:217
msgid "There are also generators for heterogeneous collections, the most important of which is `gen/tuple`:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:222
#, no-wrap
msgid ""
"user=> (gen/generate (gen/tuple gen/boolean gen/keyword gen/large-integer))\n"
"[true :r -85718]\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:225
msgid "Some collection generators can also be customized further:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:234
#, no-wrap
msgid ""
"user=> (gen/generate (gen/vector-distinct (gen/vector gen/boolean 3)\n"
"                                          {:min-elements 3 :max-elements 5}))\n"
"[[true  false false]\n"
" [true  true  false]\n"
" [false false true]\n"
" [false true  true]]\n"
msgstr ""

#. type: Title ===
#: en/content/guides/test_check_beginner.adoc:236
#, no-wrap
msgid "Generator Combinators"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:240
msgid ""
"The scalar and collection generators can generate a variety of structures, but creating nontrivial custom generators "
"requires using the combinators."
msgstr ""

#. type: Title ====
#: en/content/guides/test_check_beginner.adoc:241
#, no-wrap
msgid "`gen/one-of`"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:245
msgid "`gen/one-of` takes a collection of generators and returns a generator that can generate values from any of them:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:250
#, no-wrap
msgid ""
"user=> (gen/sample (gen/one-of [gen/boolean gen/double gen/large-integer]))\n"
"(-1.0 -1 true false 3 true true -24 -0.4296875 3)\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:254
msgid "There is also `gen/frequency`, which is similar but allows specifying a weight for each generator."
msgstr ""

#. type: Title ====
#: en/content/guides/test_check_beginner.adoc:255
#, no-wrap
msgid "`gen/such-that`"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:259
msgid "`gen/such-that` restricts an existing generator to a subset of its values, using a predicate:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:264
#, no-wrap
msgid ""
"user=> (gen/sample (gen/such-that odd? gen/large-integer))\n"
"(3 -1 -1 -1 -3 5 -11 1 -1 -5)\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:270
msgid ""
"However, there's no magic here: the only way to generate values that match the predicate is to generate values "
"repeatedly until one happens to match. This means `gen/such-that` can randomly fail if the predicate doesn't match "
"too many times in a row:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:275
#, no-wrap
msgid ""
"user=> (count (gen/sample (gen/such-that odd? gen/large-integer) 10000))\n"
"ExceptionInfo Couldn't satisfy such-that predicate after 10 tries.  clojure.core/ex-info (core.clj:4754)\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:280
msgid ""
"This call to `gen/sample` (asking for 10000 odd numbers) fails because `gen/large-integer` returns even numbers about "
"half the time, so seeing ten even numbers in a row isn't extraordinarily unlikely."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:284
msgid ""
"`gen/such-that` should be avoided unless the predicate is highly likely to succeed. In other cases, there is often an "
"alternative way to build the generator, as we'll see with `gen/fmap`."
msgstr ""

#. type: Title ====
#: en/content/guides/test_check_beginner.adoc:285
#, no-wrap
msgid "`gen/fmap`"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:291
msgid ""
"`gen/fmap` allows you to modify any generator by supplying a function to modify the values it generates. You can use "
"this to construct arbitrary structures or custom objects by generating the pieces they need and then combining them "
"in the `gen/fmap` function:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:301
#, no-wrap
msgid ""
"user=> (gen/generate (gen/fmap (fn [[name age]]\n"
"                                 {:type :humanoid\n"
"                                  :name name\n"
"                                  :age  age})\n"
"                               (gen/tuple gen/string-ascii\n"
"                                          (gen/large-integer* {:min 0}))))\n"
"{:type :humanoid, :name \".o]=w2hZ\", :age 14}\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:309
msgid ""
"Another use of `gen/fmap` is to restrict or skew the distribution of another generator using targeted "
"transformations. For example, to turn a general integer generator into a generator of odd numbers, you could either "
"use the `gen/fmap` function `pass:[#(+ 1 (* 2 %))]` (which also has the effect of doubling the range of the "
"distribution) or `pass:[#(cond-> % (even? %) (+ 1))]` (which doesn't)."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:311
msgid "Here's a generator that only generates upper-case strings:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:316
#, no-wrap
msgid ""
"user=> (gen/sample (gen/fmap #(.toUpperCase %) gen/string-ascii))\n"
"(\"\" \"\" \"JT\" \"\" \">Y1@\" \"\" \"]-\" \"XCJ@C\" \"<ANF.\\\"|\" \"I@O\\\"M\")\n"
msgstr ""

#. type: Title ====
#: en/content/guides/test_check_beginner.adoc:318
#, no-wrap
msgid "`gen/bind`"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:323
msgid ""
"The most advanced combinator allows generating things in multiple stages, with the generators in later stages "
"constructed using values generated in earlier stages."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:327
msgid ""
"While this may sound complicated, the signature is hardly different from `gen/fmap`: the argument order is reversed, "
"and the function is expected to return a generator instead of a value."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:336
msgid ""
"As an example, suppose you want to generate a random list of numbers in two different orders (e.g., to test a "
"function that should be agnostic to collection ordering). This is hard to do using `gen/fmap` or any other "
"combinator, since generating two collections directly will generally give you collections with different elements, "
"and if you just generate one you don't have the opportunity to use the generated list with another generator (e.g. "
"`gen/shuffle`) that might be able to reorder it."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:338
msgid "`gen/bind` gives us exactly the two-phase structure we need:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:347
#, no-wrap
msgid ""
"user=> (gen/generate (gen/bind (gen/vector gen/large-integer)\n"
"                               (fn [xs]\n"
"                                 (gen/fmap (fn [ys] [xs ys])\n"
"                                           (gen/shuffle xs)))))\n"
"[[-5967 -9114 -2 -4 68583042 223266 540 3 -100]\n"
" [223266 -9114 -2 -100 3 540 -5967 -4 68583042]]\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:356
msgid ""
"The structure here is a bit obtuse, as the function we passed to `gen/bind` couldn't simply call `(gen/shuffle xs)` "
"-- if it had, the whole generator would have simply returned the one collection generated by `(gen/shuffle xs)`; in "
"order to both generate a second collection with `gen/shuffle` and also return the original collection, we use `gen/"
"fmap` to combine the two into a vector."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:359
msgid "Here's another structure that's a bit simpler at the expense of doing an extra shuffle:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:365
#, no-wrap
msgid ""
"user=> (gen/generate (gen/bind (gen/vector gen/large-integer)\n"
"                               (fn [xs] (gen/vector (gen/shuffle xs) 2))))\n"
"[[-4 254202577 -27512 1596863 0 6] [-4 6 254202577 1596863 -27512 0]]\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:370
msgid ""
"However, an option with arguably even better readability is to use the `gen/let` macro, which uses a `let`-like "
"syntax to describe uses of `gen/fmap` and `gen/bind`:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:378
#, no-wrap
msgid ""
"user=> (gen/generate\n"
"        (gen/let [xs (gen/vector gen/large-integer)\n"
"                  ys (gen/shuffle xs)]\n"
"          [xs ys]))\n"
"[[0 47] [0 47]]\n"
msgstr ""

#. type: Title ==
#: en/content/guides/test_check_beginner.adoc:380
#, fuzzy, no-wrap
#| msgid "operation:"
msgid "Properties"
msgstr "操作:"

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:385
msgid ""
"A property is an actual test -- it combines a generator with a function you want to test, and checks that the "
"function behaves as expected given the generated values."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:388
msgid "Properties are created using the `clojure.test.check.properties/for-all` macro."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:391
msgid ""
"The property in <<quick-check-examples,the first example>> generates a vector and then calls the function being "
"tested (`sort`) three times."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:393
msgid "Properties can also combine several generators, for example:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:400
#, no-wrap
msgid ""
"(def +-is-commutative\n"
"  (prop/for-all [a gen/large-integer\n"
"                 b gen/large-integer]\n"
"    (= (+ a b) (+ b a))))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:404
msgid "There are two ways to actually run properties, which is what the next two sections are about."
msgstr ""

#. type: Title ===
#: en/content/guides/test_check_beginner.adoc:405
#, no-wrap
msgid "`quick-check`"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:409
msgid ""
"The standalone and functional method of running tests is via the `quick-check` function in the `clojure.test.check` "
"namespace."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:413
msgid ""
"It takes a property and a number of trials, and runs the property up to that many times, returning a map describing "
"success or failure."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:415
msgid "See <<quick-check-examples,the examples above>>."
msgstr ""

#. type: Title ===
#: en/content/guides/test_check_beginner.adoc:416
#, fuzzy, no-wrap
#| msgid "`def`"
msgid "`defspec`"
msgstr "`def`"

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:420
msgid "`defspec` is a macro for writing property-based-tests that are recognized and run by `clojure.test`."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:423
msgid ""
"The difference from `quick-check` is partly just syntactic, and partly that it _defines_ a test instead of running it."
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:426
msgid ""
"For example, the <<quick-check-examples,first `quick-check` example in this guide>> could also be written like this:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:430
#, fuzzy, no-wrap
#| msgid "(require '[clojure.repl :refer :all])\n"
msgid "(require '[clojure.test.check.clojure-test :refer [defspec]])\n"
msgstr "(require '[clojure.repl :refer :all])\n"

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:434
#, no-wrap
msgid ""
"(defspec sort-is-idempotent 100\n"
"  (prop/for-all [v (gen/vector gen/int)]\n"
"    (= (sort v) (sort (sort v)))))\n"
msgstr ""

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:438
msgid "Given this, calling `(clojure.test/run-tests)` in the same namespace produces the following output:"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:442
#, no-wrap
msgid ""
"Testing my.test.ns\n"
"{:result true, :num-tests 100, :seed 1536503193939, :test-var \"sort-is-idempotent\"}\n"
msgstr ""

#. type: delimited block -
#: en/content/guides/test_check_beginner.adoc:445
#, no-wrap
msgid ""
"Ran 1 tests containing 1 assertions.\n"
"0 failures, 0 errors.\n"
msgstr ""

#. type: Title ==
#: en/content/guides/test_check_beginner.adoc:447
#, fuzzy, no-wrap
#| msgid "API Documentation"
msgid "Additional Documentation"
msgstr "APIドキュメンテーション"

#. type: Plain text
#: en/content/guides/test_check_beginner.adoc:450
msgid ""
"For additional documentation, see the https://github.com/clojure/test.check/blob/master/README.md[test.check README]."
msgstr ""
