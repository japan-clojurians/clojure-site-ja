# Japanese translations for clojure-site-ja package
# Copyright (C) 2018 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2019-06-12 00:05+0900\n"
"PO-Revision-Date: 2019-06-15 20:54+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title ==
#: en/content/reference/reader.adoc:31 en/content/guides/learn/syntax.adoc:15
#, no-wrap
msgid "Literals"
msgstr "リテラル"

#. type: Title ==
#: en/content/reference/evaluation.adoc:1 en/content/guides/learn/syntax.adoc:59
#, no-wrap
msgid "Evaluation"
msgstr "評価"

#. type: Title ===
#: en/content/reference/other_functions.adoc:37 en/content/guides/learn/syntax.adoc:310
#, no-wrap
msgid "Printing"
msgstr "印字"

#. type: Plain text
#: en/content/guides/learn/hashed_colls.adoc:4 en/content/guides/learn/syntax.adoc:4 en/content/guides/learn/flow.adoc:4
#: en/content/guides/learn/sequential_colls.adoc:4 en/content/guides/learn/functions.adoc:4
msgid "Alex Miller 2017-09-02"
msgstr "Alex Miller 2017-09-02"

#. type: Title =
#: en/content/guides/learn/syntax.adoc:1
#, no-wrap
msgid "Learn Clojure - Syntax"
msgstr "Clojureを学ぼう - シンタックス"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:18
msgid "Below are some examples of literal representations of common primitives in Clojure."
msgstr "以下はClojureで一般的なプリミティブのリテラル表現の例だ。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:20
msgid ""
"The `;` creates a comment to the end of the line. Sometimes multiple semicolons are used to indicate header lines."
msgstr "`;` は行末までのコメントになる。時にはヘッダー行を示すために複数のセミコロンが使われることもある。"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:29
#, no-wrap
msgid ""
";; Numeric types\n"
"42              ; Long - 64-bit integer (from -2^63 to 2^63-1)\n"
"6.022e23        ; Double - double-precision 64-bit floating point\n"
"42N             ; BigInt - arbitrary precision integer\n"
"1.0M            ; BigDecimal - arbitrary precision fixed-point decimal\n"
"22/7            ; Ratio\n"
msgstr ""
";; 数値型\n"
"42              ; Long - 64ビット整数 (-2^63から2^63-1まで)\n"
"6.022e23        ; Double - 倍精度64ビット浮動小数点数\n"
"42N             ; BigInt - 任意精度整数\n"
"1.0M            ; BigDecimal - 任意精度固定小数点十進数\n"
"22/7            ; Ratio (分数)\n"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:33
#, no-wrap
msgid ""
";; Character types\n"
"\"hello\"         ; String\n"
"\\e              ; Character\n"
msgstr ""
";; 文字型\n"
"\"hello\"         ; String (文字列)\n"
"\\e              ; Character (文字)\n"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:43
#, no-wrap
msgid ""
";; Other types\n"
"nil             ; null value\n"
"true            ; Boolean (also, false)\n"
"#\"[0-9]+\"       ; Regular expression\n"
":alpha          ; Keyword\n"
":release/alpha  ; Keyword with namespace\n"
"map             ; Symbol\n"
"+               ; Symbol - most punctuation allowed\n"
"clojure.core/+  ; Namespaced symbol\n"
msgstr ""
";; その他の型\n"
"nil             ; null値\n"
"true            ; Boolean (false もある)\n"
"#\"[0-9]+\"       ; Regular expression (正規表現)\n"
":alpha          ; Keyword (キーワード)\n"
":release/alpha  ; Keyword with namespace (名前空間付きキーワード)\n"
"map             ; Symbol (シンボル)\n"
"+               ; Symbol - ほとんどの句読点が使える\n"
"clojure.core/+  ; Namespaced symbol (名前空間付きシンボル)\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:46
msgid "All of the literals above are valid Clojure expressions."
msgstr "上記のリテラルはすべて有効なClojureの式だ。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:48
msgid "Clojure also includes literal syntax for four collection types:"
msgstr "Clojureにはまた、4つのコレクション型についてリテラルシンタックスがある:"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:55
#, no-wrap
msgid ""
"'(1 2 3)     ; list \n"
"[1 2 3]      ; vector\n"
"#{1 2 3}     ; set\n"
"{:a 1, :b 2} ; map\n"
msgstr ""
"'(1 2 3)     ; list (リスト)\n"
"[1 2 3]      ; vector (ベクター)\n"
"#{1 2 3}     ; set (セット)\n"
"{:a 1, :b 2} ; map (マップ)\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:58
msgid ""
"We'll talk about these in much greater detail later - for now it's enough to know that these four data structures can "
"be used to create composite data."
msgstr ""
"これらについては後ほどもっと詳しく説明するので、今はこれら4つのデータ構造が複合データを作るのに使えることを知っていれ"
"ば十分だ。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:62
msgid "Next we will consider how Clojure reads and evaluates expressions."
msgstr "次に、Clojureはどのように式を読み取って評価するのか検討しよう。"

#. type: Title ===
#: en/content/guides/learn/syntax.adoc:63
#, no-wrap
msgid "Traditional Evaluation (Java)"
msgstr "伝統的な評価 (Java)"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:66
msgid "image:/images/content/guides/learn/syntax/traditional-evaluation.png[\"Java evaluation\"]"
msgstr "image:/clojure-site-ja/images/content/guides/learn/syntax/traditional-evaluation.png[\"Java evaluation\"]"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:68
msgid ""
"In Java, source code (.java files) are read as characters by the compiler (javac), which produces bytecode (.class "
"files) which can be loaded by the JVM."
msgstr ""
"Javaでは、ソースコード(.javaファイル)が文字としてコンパイラ(javac)に読み取られ、バイトコード(.classファイル)が生成さ"
"れ、それがJVMにロードされる。"

#. type: Title ===
#: en/content/guides/learn/syntax.adoc:69
#, no-wrap
msgid "Clojure Evaluation"
msgstr "Clojureの評価"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:72
msgid "image:/images/content/guides/learn/syntax/clojure-evaluation.png[\"Clojure evaluation\"]"
msgstr "image:/clojure-site-ja/images/content/guides/learn/syntax/clojure-evaluation.png[\"Clojure evaluation\"]"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:74
msgid ""
"In Clojure, source code is read as characters by the <<xref/../../../reference/reader#,Reader>>. The Reader may read "
"the source either from .clj files or be given a series of expressions interactively. The Reader produces Clojure "
"data. The Clojure compiler then produces the bytecode for the JVM."
msgstr ""
"Clojureでは、ソースコードが文字として <<xref/../../../reference/reader#,リーダー(reader)>> に読み取られる。リーダーは"
"ソースを.cljファイルから読み取るかもしれないし対話的に一連の式を与えられるかもしれない。リーダーはClojureのデータを生"
"成する。そしてClojureコンパイラはJVMへのバイトコードを生成する。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:76
msgid "There are two important points here:"
msgstr "ここで重要な点が2つある:"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:78
msgid ""
"The unit of source code is a *Clojure expression*, not a Clojure source file. Source files are read as a series of "
"expressions, just as if you typed those expressions interactively at the REPL."
msgstr ""
"ソースコードの単位は *Clojureの式* であり、Clojureのソースファイルではない。ソースファイルはちょうどREPLで対話的にタイ"
"プするのと同じように一連の式として読み取られる。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:79
msgid ""
"Separating the Reader and the Compiler is a key separation that makes room for macros. Macros are special functions "
"that take code (as data), and emit code (as data). Can you see where a loop for macro expansion could be inserted in "
"the evaluation model?"
msgstr ""
"リーダーとコンパイラの分離はマクロの余地を生む鍵となる分離だ。マクロはコードを(データとして)受け取ってコードを(データ"
"として)出力する特殊な関数だ。マクロ展開のループがこの評価モデルのどこに挿入できるか分かるだろうか?"

#. type: Title ===
#: en/content/guides/learn/syntax.adoc:80
#, no-wrap
msgid "Structure vs Semantics"
msgstr "構造 vs セマンティクス"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:83
msgid "Consider a Clojure expression:"
msgstr "あるClojureの式を考えてみよう:"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:85
msgid "image:/images/content/guides/learn/syntax/structure-and-semantics.png[\"Structure and semantics\"]"
msgstr ""
"image:/clojure-site-ja/images/content/guides/learn/syntax/structure-and-semantics.png[\"Structure and semantics\"]"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:87
msgid ""
"This diagram illustrates the difference between syntax in green (the Clojure data structure produced by the Reader) "
"and semantics in blue (how that data is understood by the Clojure runtime)."
msgstr ""
"この図は、緑色のシンタックス(リーダーによって生成されたClojureのデータ)と青色のセマンティクス(そのデータがClojureラン"
"タイムにどのように理解されるか)の違いを示している。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:89
msgid ""
"Most literal Clojure forms evaluate to themselves, *except* symbols and lists. Symbols are used to refer to something "
"else and when evaluated, return what they refer to. Lists (as in the diagram) are evaluated as invocation."
msgstr ""
"シンボルとリストを *除き* 、ほとんどのリテラルのClojureフォームは自分自身に評価される。シンボルは他のものを指し示すの"
"に使われ、評価されると指し示しているものを返す。(図のような)リストは呼び出しとして評価される。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:91
msgid ""
"In the diagram, (+ 3 4) is read as a list containing the symbol (+) and two numbers (3 and 4). The first element "
"(where + is found) can be called \"function position\", that is, a place to find the thing to invoke. While functions "
"are an obvious thing to invoke, there are also a few special operators known to the runtime, macros, and a handful of "
"other invokable things."
msgstr ""
"図では、(+ 3 4)はシンボル(+)と2つの数(3と4)を持つリストとして読み取られる。第1要素(+がある場所)は「関数位置(function "
"position)」、つまり呼び出すものがある場所と呼ばれることがある。関数は呼び出すものとして明らかだが、他にもランタイムの"
"認識する少数の特別なオペレータとして、マクロと他に一握りの呼び出し可能なものがある。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:93
msgid "Considering the evaluation of the expression above:"
msgstr "上の式の評価を考えてみると:"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:95
msgid "3 and 4 evaluate to themselves (longs)"
msgstr "3と4はそれ自身(long)に評価される"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:96
msgid "+ evaluates to a function that implements `+`"
msgstr "+は `+` を実装している関数に評価される"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:97
msgid "evaluating the list will invoke the `+` function with 3 and 4 as arguments"
msgstr "リストを評価すると3と4を引数として `+` 関数が呼び出される"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:99
msgid ""
"Many languages have both statements and expressions, where statements have some stateful effect but do not return a "
"value. In Clojure, everything is an expression that evaluates to a value. Some expressions (but not most) also have "
"side effects."
msgstr ""
"多くの言語には文と式の両方があり、文は何らかのステートフルな効果はあるが値を返さない。Clojureでは、あらゆるものが値に"
"評価される式だ。一部の式には副作用もある(大多数はそうではないが)。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:101
msgid "Now let's consider how we can interactively evaluate expressions in Clojure."
msgstr "それでは、Clojureでどのように式を対話的に評価できるか考えてみよう。"

#. type: Title ===
#: en/content/guides/learn/syntax.adoc:102
#, no-wrap
msgid "Delaying evaluation with quoting"
msgstr "クォートで評価を遅らせる"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:105
msgid ""
"Sometimes it's useful to suspend evaluation, in particular for symbols and lists. Sometimes a symbol should just be a "
"symbol without looking up what it refers to:"
msgstr ""
"時には評価を停止することが便利な場合もある(特にシンボルとリストについて)。シンボルが指し示しているものをルックアップす"
"ることなく単にシンボルであってほしいことがある:"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:110
#, no-wrap
msgid ""
"user=> 'x\n"
"x\n"
msgstr ""
"user=> 'x\n"
"x\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:113
msgid "And sometimes a list should just be a list of data values (not code to evaluate):"
msgstr "また、リストが(評価すべきコードではなく)単にデータ値のリストであってほしいことがある:"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:118
#, no-wrap
msgid ""
"user=> '(1 2 3)\n"
"(1 2 3)\n"
msgstr ""
"user=> '(1 2 3)\n"
"(1 2 3)\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:121
msgid ""
"One confusing error you might see is the result of accidentally trying to evaluate a list of data as if it were code:"
msgstr "遭遇するかもしれない分かりづらいエラーのひとつは、データのリストをコードのように誤って評価してしまった結果だ:"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:126
#, no-wrap
msgid ""
"user=> (1 2 3)\n"
"ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn\n"
msgstr ""
"user=> (1 2 3)\n"
"ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:129
msgid ""
"For now, don't worry too much about quote but you will see it occasionally in these materials to avoid evaluation of "
"symbols or lists."
msgstr ""
"今はクォートについてあまり気にしすぎる必要はないが、シンボルやリストの評価を避けるためにこの資料でも時折目にするだろ"
"う。"

#. type: Title ==
#: en/content/guides/learn/syntax.adoc:130
#, no-wrap
msgid "REPL"
msgstr "REPL"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:133
msgid ""
"Most of the time when you are using Clojure, you will do so in an editor or a REPL (Read-Eval-Print-Loop). The REPL "
"has the following parts:"
msgstr ""
"Clojureを使う時間のほとんどはエディタもしくはREPL(Read-Eval-Print-Loop)で過ごすだろう。REPLは以下の部分でできている:"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:135
msgid "Read an expression (a string of characters) to produce Clojure data."
msgstr "式(文字列)を読み取って(Read)、Clojureのデータを生成する"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:136
msgid "Evaluate the data returned from #1 to yield a result (also Clojure data)."
msgstr "#1から返ってきたデータを評価して(Evaluate)、結果(これもClojureのデータ)を生成する。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:137
msgid "Print the result by converting it from data back to characters."
msgstr "それをデータから文字へ戻す変換によって結果を印字する(Print)"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:138
msgid "Loop back to the beginning."
msgstr "最初に戻る(Loop)"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:140
msgid ""
"One important aspect of #2 is that Clojure always compiles the expression before executing it; Clojure is **always** "
"compiled to JVM bytecode. There is no Clojure interpreter."
msgstr ""
"#2の重要な点のひとつは、Clojureは式を実行する前に常にコンパイルするということだ。Clojureは **常に** JVMのバイトコード"
"にコンパイルされる。Clojureインタプリタというものはないのだ。"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:145
#, no-wrap
msgid ""
"user=> (+ 3 4)\n"
"7\n"
msgstr ""
"user=> (+ 3 4)\n"
"7\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:148
msgid "The box above demonstrates evaluating an expression (+ 3 4) and receiving a result."
msgstr "上の囲みは、(+ 3 4)という式の評価と結果の受け取りを示している。"

#. type: Title ===
#: en/content/guides/learn/syntax.adoc:149
#, no-wrap
msgid "Exploring at the REPL"
msgstr "REPLで探索する"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:152
msgid ""
"Most REPL environments support a few tricks to help with interactive use. For example, some special symbols remember "
"the results of evaluating the last three expressions:"
msgstr ""
"たいていのREPL環境は対話的な利用を支援するいくつかの仕組みをサポートしている。例えば、特別なシンボルが最後の3つの式の"
"評価結果を記憶しておいてくれる:"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:154
msgid "`*1` (the last result)"
msgstr "`*1` (最後の結果)"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:155
msgid "`*2` (the result two expressions ago)"
msgstr "`*2` (2つ前の式の結果)"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:156
msgid "`*3` (the result three expressions ago)"
msgstr "`*3` (3つ前の式の結果)"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:165
#, no-wrap
msgid ""
"user=> (+ 3 4)\n"
"7\n"
"user=> (+ 10 *1)\n"
"17\n"
"user=> (+ *1 *2)\n"
"24\n"
msgstr ""
"user=> (+ 3 4)\n"
"7\n"
"user=> (+ 10 *1)\n"
"17\n"
"user=> (+ *1 *2)\n"
"24\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:168
msgid ""
"In addition, there is a namespace `clojure.repl` that is included in the standard Clojure library that provides a "
"number of helpful functions. To load that library and make it's functions available in our current context, call:"
msgstr ""
"加えて、 `clojure.repl` というClojure標準ライブラリに含まれた名前空間があり、便利な関数をいくつか提供している。このラ"
"イブラリをロードして現在のコンテキストで関数を利用可能にするには、以下を呼び出そう:"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:172
#, no-wrap
msgid "(require '[clojure.repl :refer :all])\n"
msgstr "(require '[clojure.repl :refer :all])\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:175
msgid "For now, you can treat that as a magic incantation. Poof! We'll unpack it when we get to namespaces."
msgstr "今はこれをおまじないとして扱ってもよいだろう。名前空間のところに到達したら中身を説明しよう。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:177
msgid ""
"We now have access to some additional functions that are useful at the REPL: `doc`, `find-doc`, `apropos`, `source`, "
"and `dir`."
msgstr "REPLで便利な追加の関数にアクセスできるようになった: `doc`, `find-doc`, `apropos`, `source`, `dir` だ。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:179
msgid "The `doc` function displays the documentation for any function. Let's call it on `+`:"
msgstr "`doc` 関数は任意の関数のドキュメンテーションを表示する。 `+` に対して呼び出してみよう:"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:183
#, no-wrap
msgid "user=> (doc +)\n"
msgstr "user=> (doc +)\n"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:188
#, no-wrap
msgid ""
"clojure.core/+\n"
"([] [x] [x y] [x y & more])\n"
"  Returns the sum of nums. (+) returns 0. Does not auto-promote\n"
"  longs, will throw on overflow. See also: +'\n"
msgstr ""
"clojure.core/+\n"
"([] [x] [x y] [x y & more])\n"
"  Returns the sum of nums. (+) returns 0. Does not auto-promote\n"
"  longs, will throw on overflow. See also: +'\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:191
msgid "The `doc` function prints the documentation for `+`, including the valid signatures."
msgstr "`doc` 関数は `+` のドキュメンテーションを有効なシグネチャとともに印字している。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:193
msgid ""
"The doc function prints the documentation, then returns nil as the result - you will see both in the evaluation "
"output."
msgstr "docはドキュメンテーションを印字して、結果としてnilを返す――評価の出力で両方が見えるだろう。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:195
msgid "We can invoke `doc` on itself too:"
msgstr "`doc` をそれ自身に対して呼び出すこともできる:"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:199
#, no-wrap
msgid "user=> (doc doc)\n"
msgstr "user=> (doc doc)\n"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:204
#, no-wrap
msgid ""
"clojure.repl/doc\n"
"([name])\n"
"Macro\n"
"  Prints documentation for a var or special form given its name\n"
msgstr ""
"clojure.repl/doc\n"
"([name])\n"
"Macro\n"
"  Prints documentation for a var or special form given its name\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:207
msgid ""
"Not sure what something is called? You can use the `apropos` command to find functions that match a particular string "
"or regular expression."
msgstr ""
"あるものがどのような名前で呼ばれるか自信がない? `apropos` コマンドを使って特定の文字列や正規表現にマッチする関数を見つ"
"けることができる。"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:212
#, no-wrap
msgid ""
"user=> (apropos \"+\")\n"
"(clojure.core/+ clojure.core/+')\n"
msgstr ""
"user=> (apropos \"+\")\n"
"(clojure.core/+ clojure.core/+')\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:215
msgid "You can also widen your search to include the docstrings themselves with `find-doc`:"
msgstr "`find-doc` でdocstring自体も含むように検索範囲を広げることもできる。"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:219
#, no-wrap
msgid "user=> (find-doc \"trim\")\n"
msgstr "user=> (find-doc \"trim\")\n"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:227
#, no-wrap
msgid ""
"clojure.core/subvec\n"
"([v start] [v start end])\n"
"  Returns a persistent vector of the items in vector from\n"
"  start (inclusive) to end (exclusive).  If end is not supplied,\n"
"  defaults to (count vector). This operation is O(1) and very fast, as\n"
"  the resulting vector shares structure with the original and no\n"
"  trimming is done.\n"
msgstr ""
"clojure.core/subvec\n"
"([v start] [v start end])\n"
"  Returns a persistent vector of the items in vector from\n"
"  start (inclusive) to end (exclusive).  If end is not supplied,\n"
"  defaults to (count vector). This operation is O(1) and very fast, as\n"
"  the resulting vector shares structure with the original and no\n"
"  trimming is done.\n"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:231
#, no-wrap
msgid ""
"clojure.string/trim\n"
"([s])\n"
"  Removes whitespace from both ends of string.\n"
msgstr ""
"clojure.string/trim\n"
"([s])\n"
"  Removes whitespace from both ends of string.\n"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:236
#, no-wrap
msgid ""
"clojure.string/trim-newline\n"
"([s])\n"
"  Removes all trailing newline \\n or return \\r characters from\n"
"  string.  Similar to Perl's chomp.\n"
msgstr ""
"clojure.string/trim-newline\n"
"([s])\n"
"  Removes all trailing newline \\n or return \\r characters from\n"
"  string.  Similar to Perl's chomp.\n"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:240
#, no-wrap
msgid ""
"clojure.string/triml\n"
"([s])\n"
"  Removes whitespace from the left side of string.\n"
msgstr ""
"clojure.string/triml\n"
"([s])\n"
"  Removes whitespace from the left side of string.\n"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:244
#, no-wrap
msgid ""
"clojure.string/trimr\n"
"([s])\n"
"  Removes whitespace from the right side of string.\n"
msgstr ""
"clojure.string/trimr\n"
"([s])\n"
"  Removes whitespace from the right side of string.\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:247
msgid ""
"If you'd like to see a full listing of the functions in a particular namespace, you can use the `dir` function. Here "
"we can use it on the `clojure.repl` namespace:"
msgstr ""
"特定の名前空間の関数の一覧が見たい場合には、 `dir` 関数が利用できる。ここでは `clojure.repl` 名前空間に対して使ってい"
"る:"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:251
#, no-wrap
msgid "user=> (dir clojure.repl)\n"
msgstr "user=> (dir clojure.repl)\n"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:265
#, no-wrap
msgid ""
"apropos\n"
"demunge\n"
"dir\n"
"dir-fn\n"
"doc\n"
"find-doc\n"
"pst\n"
"root-cause\n"
"set-break-handler!\n"
"source\n"
"source-fn\n"
"stack-element-str\n"
"thread-stopper\n"
msgstr ""
"apropos\n"
"demunge\n"
"dir\n"
"dir-fn\n"
"doc\n"
"find-doc\n"
"pst\n"
"root-cause\n"
"set-break-handler!\n"
"source\n"
"source-fn\n"
"stack-element-str\n"
"thread-stopper\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:268
msgid ""
"And finally, we can see not only the documentation but the underlying source for any function accessible by the "
"runtime:"
msgstr ""
"そして最後に、ランタイムにアクセス可能な任意の関数のドキュメンテーションだけでなく背後にあるソースを見ることもできる。"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:272
#, no-wrap
msgid "user=> (source dir)\n"
msgstr "user=> (source dir)\n"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:278
#, no-wrap
msgid ""
"(defmacro dir\n"
"  \"Prints a sorted directory of public vars in a namespace\"\n"
"  [nsname]\n"
"  `(doseq [v# (dir-fn '~nsname)]\n"
"     (println v#)))\n"
msgstr ""
"(defmacro dir\n"
"  \"Prints a sorted directory of public vars in a namespace\"\n"
"  [nsname]\n"
"  `(doseq [v# (dir-fn '~nsname)]\n"
"     (println v#)))\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:281
msgid ""
"As you go through this workshop, please feel free to examine the docstring and source for the functions you are "
"using. Exploring the implementation of the Clojure library itself is an excellent way to learn more about the "
"language and how it is used."
msgstr ""
"このワークショップを進めるにあたって、使っている関数のdocstringやソースコードを気軽に調べてみてほしい。Clojureライブラ"
"リ自体の実装を探索することは、言語とその使われ方についてさらに学ぶための素晴らしい方法だ。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:283
msgid ""
"It is also an excellent idea to keep a copy of the [Clojure Cheatsheet](https://clojure.org/api/cheatsheet) open "
"while you are learning Clojure. The cheatsheet categorizes the functions available in the standard library and is an "
"invaluable reference."
msgstr ""
"Clojureを学ぶ際に[Clojure Cheatsheet](https://clojure.org/api/cheatsheet)を開いておくのもまた素晴らしいアイディアだ。"
"チートシートには標準ライブラリで利用可能な関数が分類してあり、非常に価値のある参考資料だ。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:285
msgid "Now let's consider some Clojure basics to get you going...."
msgstr "それではClojureの基本について考えてみよう。"

#. type: Title ==
#: en/content/guides/learn/syntax.adoc:286
#, no-wrap
msgid "Clojure basics"
msgstr "Clojureの基本"

#. type: Title ===
#: en/content/guides/learn/syntax.adoc:288
#, no-wrap
msgid "`def`"
msgstr "`def`"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:291
msgid ""
"When you are evaluating things at a REPL, it can be useful to save a piece of data for later. We can do this with "
"`def`:"
msgstr "REPLで何かを評価する時に、後のためにデータを保存しておくと便利なことがある。これは `def` でできる:"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:296
#, no-wrap
msgid ""
"user=> (def x 7)\n"
"#'user/x\n"
msgstr ""
"user=> (def x 7)\n"
"#'user/x\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:299
msgid ""
"`def` is a special form that associates a symbol (x) in the current namespace with a value (7). This linkage is "
"called a `var`. In most actual Clojure code, vars should refer to either a constant value or a function, but it's "
"common to define and re-define them for convenience when working at the REPL."
msgstr ""
"`def` は特殊形式であり、シンボル(x)を現在の名前空間で値(7)に関連付ける。このつながりは `var` と呼ばれる。多くの実際の"
"Clojureコードでは、varは定数値もしくは関数のどちらかを指すべきだが、REPLでは便宜的にvarを定義して再定義することが一般"
"的だ。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:301
msgid ""
"Note the return value above is `pass:[#'user/x]` - that's the literal representation for a var: `#'` followed by the "
"namespaced symbol. `user` is the default namespace."
msgstr ""
"上の戻り値が `pass:[#'user/x]` であることに注意しよう――これはvarのリテラル表現だ: `#'` の後に名前空間付きのシンボルが"
"続く。 `user` はデフォルトの名前空間だ。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:303
msgid ""
"Recall that symbols are evaluated by looking up what they refer to, so we can get the value back by just using the "
"symbol:"
msgstr ""
"シンボルは指し示すものをルックアップすることで評価されることを思い出そう。したがって単にシンボルを使って値を取り戻すこ"
"とができる:"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:308
#, no-wrap
msgid ""
"user=> (+ x x)\n"
"14\n"
msgstr ""
"user=> (+ x x)\n"
"14\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:313
msgid ""
"One of the most common things you do when learning a language is to print out values. Clojure provides several "
"functions for printing values:"
msgstr ""
"言語を学ぶ際にする最も一般的なことのひとつは値を印字することだ。Clojureは値を印字するためにいくつかの関数を提供してい"
"る:"

#. type: Table
#: en/content/guides/learn/syntax.adoc:319
#, no-wrap
msgid ""
"| | Human-Readable | Machine-Readable |\n"
"|With newline| println | prn | \n"
"|Without newline | print | pr |\n"
msgstr ""
"| | 人間が読める | 機械が読める |\n"
"| 改行あり | println | prn |\n"
"| 改行なし | print | pr |\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:322
msgid ""
"The human-readable forms will translate special print characters (like newlines and tabs) to their expected form and "
"print strings without quotes. We often use `println` to debug functions or print a value at the REPL. `println` takes "
"any number of arguments and interposes a space between each argument's printed value:"
msgstr ""
"人間が読める(human-readable)形式は特殊印字文字(改行やタブなど)を期待される形式に翻訳して文字列をクォートなしで印字す"
"る。 `println` は関数をデバッグしたりREPLで値を印字するのによく使う。 `println` は任意個数の引数をとって、個々の引数の"
"印字した値の間にスペースを入れる:"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:327
#, no-wrap
msgid ""
"user=> (println \"What is this:\" (+ 1 2))\n"
"What is this: 3\n"
msgstr ""
"user=> (println \"What is this:\" (+ 1 2))\n"
"What is this: 3\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:330
msgid "The println function has side-effects (printing) and returns nil as a result."
msgstr "println関数には副作用(印字)があり、結果としてnilを返す。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:332
msgid ""
"Note that \"What is this:\" above did not print the surrouding quotes and is not a string that the Reader could read "
"again in the same way. For that purpose, use the machine-readable version prn:"
msgstr ""
"上の\"What is this:\"は囲っているクォートが印字されず、リーダーが同じように再び読み取ることができる文字列ではないこと"
"に注意しよう。その目的では、機械が読める(machine-readable)バージョンのprnを使おう:"

#. type: delimited block -
#: en/content/guides/learn/syntax.adoc:337
#, no-wrap
msgid ""
"user=> (prn \"one\\n\\ttwo\")\n"
"\"one\\n\\ttwo\"\n"
msgstr ""
"user=> (prn \"one\\n\\ttwo\")\n"
"\"one\\n\\ttwo\"\n"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:340
msgid ""
"Note that the printed result is a valid form that the Reader could read again. Both human- and readable- printing "
"functions are useful in different contexts."
msgstr ""
"印字された結果はリーダーが再び読み取れる有効な形式であることに注意しよう。人間が読める印字関数、機械が読める印字関数の"
"両者は異なるコンテキストで有用なものだ。"

#. type: Title ==
#: en/content/guides/learn/syntax.adoc:341 en/content/guides/learn/functions.adoc:299
#, no-wrap
msgid "Test your knowledge"
msgstr "知識をテストしよう"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:344
msgid "Using the REPL, compute the sum of 7654 and 1234."
msgstr "REPLを使って、7654と1234の和を計算しよう。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:345
msgid "Rewrite the following algebraic expression as a Clojure expression: `( 7 + 3 * 4 + 5 ) / 10`."
msgstr "次の代数式をClojureの式として書き換えよう: `( 7 + 3 * 4 + 5) / 10` 。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:346
msgid ""
"Using REPL documentation functions, find the documentation for the `rem` and `mod` functions. Compare the results of "
"the provided expressions based on the documentation."
msgstr ""
"REPLのドキュメンテーション関数を使って、 `rem`, `mod` 関数のドキュメンテーションを見つけよう。ドキュメンテーションに基"
"づいて式の結果を比較しよう。"

#. type: Plain text
#: en/content/guides/learn/syntax.adoc:347
msgid "Using `find-doc`, find the function that prints the stack trace of the most recent REPL exception."
msgstr "`find-doc` を使って、最も最近のREPLでの例外のスタックトレースを印字する関数を見つけよう。"
